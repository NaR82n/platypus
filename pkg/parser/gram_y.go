// Code generated by goyacc -o gram_y.go gram.y. DO NOT EDIT.

//line gram.y:7
package parser

import __yyfmt__ "fmt"

//line gram.y:7

import (
	plast "github.com/GuanceCloud/platypus/pkg/ast"
	// pltoken "github.com/GuanceCloud/platypus/pkg/token"
)

//line gram.y:16
type yySymType struct {
	yys      int
	aststmts plast.Stmts
	astblock *plast.BlockStmt

	ifitem *plast.IfStmtElem
	iflist []*plast.IfStmtElem
	node   *plast.Node
	nodes  []*plast.Node
	item   Item
}

const SEMICOLON = 57346
const COMMA = 57347
const COMMENT = 57348
const DOT = 57349
const EOF = 57350
const ERROR = 57351
const ID = 57352
const NUMBER = 57353
const LEFT_PAREN = 57354
const LEFT_BRACKET = 57355
const LEFT_BRACE = 57356
const RIGHT_BRACE = 57357
const RIGHT_PAREN = 57358
const RIGHT_BRACKET = 57359
const SPACE = 57360
const STRING = 57361
const QUOTED_STRING = 57362
const MULTILINE_STRING = 57363
const FOR = 57364
const IN = 57365
const WHILE = 57366
const BREAK = 57367
const CONTINUE = 57368
const RETURN = 57369
const EOL = 57370
const COLON = 57371
const STR = 57372
const INT = 57373
const FLOAT = 57374
const BOOL = 57375
const LIST = 57376
const MAP = 57377
const STRUCT = 57378
const ANY = 57379
const LET = 57380
const FN = 57381
const RET_SYMB = 57382
const BitwiseAND = 57383
const operatorsStart = 57384
const ADD = 57385
const DIV = 57386
const GTE = 57387
const GT = 57388
const LT = 57389
const LTE = 57390
const MOD = 57391
const MUL = 57392
const NEQ = 57393
const EQ = 57394
const EQEQ = 57395
const SUB = 57396
const operatorsEnd = 57397
const keywordsStart = 57398
const TRUE = 57399
const FALSE = 57400
const IDENTIFIER = 57401
const AND = 57402
const OR = 57403
const NIL = 57404
const NULL = 57405
const IF = 57406
const ELIF = 57407
const ELSE = 57408
const keywordsEnd = 57409
const startSymbolsStart = 57410
const START_STMTS = 57411
const startSymbolsEnd = 57412

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SEMICOLON",
	"COMMA",
	"COMMENT",
	"DOT",
	"EOF",
	"ERROR",
	"ID",
	"NUMBER",
	"LEFT_PAREN",
	"LEFT_BRACKET",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"RIGHT_PAREN",
	"RIGHT_BRACKET",
	"SPACE",
	"STRING",
	"QUOTED_STRING",
	"MULTILINE_STRING",
	"FOR",
	"IN",
	"WHILE",
	"BREAK",
	"CONTINUE",
	"RETURN",
	"EOL",
	"COLON",
	"STR",
	"INT",
	"FLOAT",
	"BOOL",
	"LIST",
	"MAP",
	"STRUCT",
	"ANY",
	"LET",
	"FN",
	"RET_SYMB",
	"BitwiseAND",
	"operatorsStart",
	"ADD",
	"DIV",
	"GTE",
	"GT",
	"LT",
	"LTE",
	"MOD",
	"MUL",
	"NEQ",
	"EQ",
	"EQEQ",
	"SUB",
	"operatorsEnd",
	"keywordsStart",
	"TRUE",
	"FALSE",
	"IDENTIFIER",
	"AND",
	"OR",
	"NIL",
	"NULL",
	"IF",
	"ELIF",
	"ELSE",
	"keywordsEnd",
	"startSymbolsStart",
	"START_STMTS",
	"startSymbolsEnd",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:772

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 230,
	1, 79,
	4, 79,
	8, 79,
	15, 79,
	28, 79,
	-2, 139,
}

const yyPrivate = 57344

const yyLast = 1296

var yyAct = [...]int16{
	25, 291, 8, 49, 182, 3, 84, 80, 78, 31,
	74, 85, 320, 31, 30, 95, 98, 312, 30, 301,
	293, 99, 97, 82, 314, 66, 96, 119, 111, 274,
	32, 195, 125, 306, 32, 94, 273, 95, 98, 86,
	87, 90, 91, 99, 97, 92, 118, 93, 96, 143,
	81, 120, 121, 232, 127, 103, 104, 71, 133, 115,
	308, 257, 282, 239, 112, 114, 288, 68, 72, 116,
	137, 109, 2, 110, 115, 237, 139, 108, 221, 112,
	114, 144, 252, 307, 147, 283, 240, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 220, 168, 263, 247, 140, 143, 42, 173, 174,
	43, 177, 129, 183, 186, 187, 107, 143, 191, 113,
	44, 175, 128, 178, 194, 167, 204, 188, 163, 196,
	198, 244, 169, 199, 172, 130, 202, 176, 201, 179,
	184, 100, 242, 189, 123, 200, 224, 225, 56, 228,
	31, 102, 43, 98, 185, 30, 122, 185, 99, 97,
	75, 165, 44, 132, 101, 114, 208, 124, 234, 279,
	94, 32, 95, 98, 86, 87, 90, 91, 99, 97,
	92, 246, 93, 96, 76, 243, 255, 245, 109, 89,
	88, 304, 106, 233, 108, 43, 208, 208, 246, 246,
	136, 19, 305, 105, 256, 44, 206, 94, 108, 95,
	98, 86, 87, 90, 91, 99, 97, 92, 249, 93,
	96, 261, 138, 208, 55, 20, 89, 266, 268, 135,
	117, 260, 271, 190, 43, 4, 206, 206, 31, 208,
	290, 278, 134, 30, 44, 280, 208, 111, 281, 208,
	1, 43, 115, 77, 285, 286, 164, 112, 114, 32,
	208, 44, 7, 206, 43, 208, 294, 208, 145, 73,
	171, 141, 115, 222, 44, 299, 5, 112, 114, 206,
	208, 131, 17, 29, 303, 208, 206, 207, 292, 206,
	15, 26, 14, 48, 309, 235, 236, 47, 46, 34,
	206, 208, 311, 142, 52, 206, 313, 206, 316, 36,
	208, 54, 37, 318, 210, 38, 59, 207, 207, 58,
	206, 321, 251, 40, 289, 206, 35, 209, 166, 205,
	142, 39, 292, 9, 208, 13, 208, 12, 258, 11,
	10, 206, 208, 142, 207, 259, 16, 18, 262, 180,
	206, 21, 79, 33, 6, 67, 0, 0, 0, 272,
	207, 0, 0, 0, 276, 0, 277, 207, 0, 142,
	207, 0, 0, 230, 206, 0, 206, 170, 0, 284,
	0, 207, 206, 0, 287, 0, 207, 0, 207, 0,
	192, 0, 43, 0, 211, 217, 142, 0, 0, 0,
	298, 207, 44, 0, 0, 0, 207, 0, 0, 302,
	0, 0, 215, 212, 213, 214, 223, 70, 0, 216,
	229, 219, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 218, 315, 0, 317, 0, 143, 0, 0,
	0, 319, 0, 238, 0, 0, 0, 0, 0, 142,
	0, 230, 230, 142, 0, 207, 0, 207, 0, 0,
	0, 142, 0, 207, 94, 0, 95, 98, 86, 87,
	90, 91, 99, 97, 92, 42, 93, 96, 43, 66,
	57, 53, 69, 89, 88, 126, 0, 62, 44, 63,
	230, 142, 0, 142, 0, 0, 264, 0, 267, 269,
	270, 142, 0, 70, 0, 0, 0, 0, 275, 51,
	0, 71, 0, 0, 0, 0, 0, 0, 50, 142,
	125, 0, 72, 0, 0, 60, 61, 0, 0, 0,
	64, 65, 0, 0, 0, 0, 19, 295, 296, 42,
	297, 0, 43, 66, 57, 53, 69, 136, 300, 0,
	0, 62, 44, 63, 22, 0, 0, 24, 23, 0,
	20, 0, 0, 0, 0, 0, 310, 70, 27, 0,
	28, 41, 0, 51, 0, 71, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 0, 72, 0, 0, 60,
	61, 0, 0, 0, 64, 65, 45, 19, 0, 0,
	42, 0, 0, 43, 66, 57, 53, 69, 0, 0,
	0, 0, 62, 44, 63, 22, 0, 0, 24, 23,
	0, 20, 0, 0, 0, 0, 0, 0, 70, 27,
	0, 28, 41, 0, 51, 0, 71, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 0, 72, 0, 0,
	60, 61, 0, 0, 0, 64, 65, 45, 42, 0,
	0, 43, 66, 57, 53, 69, 0, 0, 0, 0,
	62, 44, 63, 22, 0, 0, 24, 23, 0, 0,
	0, 0, 0, 0, 0, 0, 70, 27, 0, 28,
	41, 0, 51, 0, 71, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 0, 72, 0, 0, 60, 61,
	0, 0, 0, 64, 65, 45, 42, 0, 0, 43,
	66, 57, 53, 69, 0, 181, 0, 0, 62, 44,
	63, 0, 0, 0, 0, 0, 0, 185, 0, 226,
	0, 0, 42, 0, 70, 43, 66, 57, 53, 69,
	51, 0, 71, 0, 62, 44, 63, 0, 0, 50,
	0, 0, 0, 72, 0, 0, 60, 61, 0, 0,
	70, 64, 65, 0, 0, 0, 51, 0, 71, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 0, 72,
	0, 0, 60, 61, 0, 0, 42, 64, 65, 43,
	66, 57, 53, 69, 136, 0, 0, 0, 62, 44,
	63, 0, 0, 0, 42, 0, 0, 43, 66, 57,
	53, 69, 197, 0, 70, 0, 62, 44, 63, 0,
	51, 0, 71, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 70, 72, 0, 0, 60, 61, 51, 0,
	71, 64, 65, 0, 0, 0, 0, 50, 0, 0,
	0, 72, 0, 0, 60, 61, 0, 0, 42, 64,
	65, 43, 66, 57, 53, 69, 0, 0, 193, 0,
	62, 44, 63, 148, 0, 0, 42, 0, 0, 43,
	66, 57, 53, 69, 0, 0, 70, 0, 62, 44,
	63, 0, 51, 0, 71, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 70, 72, 0, 0, 60, 61,
	51, 0, 71, 64, 65, 0, 0, 0, 0, 50,
	0, 0, 0, 72, 0, 0, 60, 61, 0, 0,
	83, 64, 65, 42, 0, 0, 43, 66, 57, 53,
	69, 0, 0, 0, 0, 62, 44, 63, 0, 0,
	0, 42, 0, 0, 43, 66, 57, 53, 69, 0,
	0, 70, 0, 62, 44, 63, 0, 51, 0, 71,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 70,
	72, 0, 0, 60, 61, 51, 0, 71, 64, 65,
	0, 0, 0, 0, 50, 0, 0, 0, 72, 0,
	0, 60, 61, 0, 0, 42, 64, 65, 43, 66,
	57, 53, 231, 0, 0, 0, 0, 62, 44, 63,
	95, 98, 86, 87, 90, 91, 99, 97, 92, 0,
	93, 96, 0, 70, 0, 0, 0, 0, 0, 51,
	0, 71, 0, 0, 0, 0, 265, 0, 50, 0,
	203, 0, 72, 0, 0, 60, 61, 0, 0, 0,
	64, 65, 94, 0, 95, 98, 86, 87, 90, 91,
	99, 97, 92, 0, 93, 96, 0, 0, 0, 0,
	0, 89, 88, 94, 0, 95, 98, 86, 87, 90,
	91, 99, 97, 92, 254, 93, 96, 0, 0, 0,
	0, 0, 89, 88, 0, 0, 94, 0, 95, 98,
	86, 87, 90, 91, 99, 97, 92, 253, 93, 96,
	0, 0, 0, 0, 0, 89, 88, 250, 0, 94,
	0, 95, 98, 86, 87, 90, 91, 99, 97, 92,
	0, 93, 96, 0, 0, 0, 0, 0, 89, 88,
	248, 94, 0, 95, 98, 86, 87, 90, 91, 99,
	97, 92, 0, 93, 96, 0, 0, 0, 0, 0,
	89, 88, 241, 0, 94, 0, 95, 98, 86, 87,
	90, 91, 99, 97, 92, 227, 93, 96, 0, 0,
	0, 0, 0, 89, 88, 0, 94, 0, 95, 98,
	86, 87, 90, 91, 99, 97, 92, 146, 93, 96,
	0, 0, 0, 0, 0, 89, 88, 0, 0, 0,
	0, 0, 94, 0, 95, 98, 86, 87, 90, 91,
	99, 97, 92, 0, 93, 96, 0, 0, 0, 0,
	0, 89, 88, 0, 94, 0, 95, 98, 86, 87,
	90, 91, 99, 97, 92, 0, 93, 96, 0, 0,
	0, 0, 0, 89, 88, 94, 0, 95, 98, 86,
	87, 90, 91, 99, 97, 92, 0, 93, 96, 0,
	0, 0, 0, 0, 89, 88,
}

var yyPact = [...]int16{
	3, 227, 593, -1000, -1000, -1000, 651, 197, 156, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 248, -1000, -1000, -1000,
	-1000, -58, 936, -1000, -1000, 1234, 136, 142, 142, 187,
	64, 21, 67, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 142, 217, -1000, -1000, 954, -1000, -1000, -1000, -1000,
	954, 954, 139, 468, 107, -1000, 149, 954, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 231, 216, 789,
	209, -1000, -1000, 197, 156, -1000, -1000, 142, 103, -1000,
	954, 245, 1213, 879, 240, 181, 954, 954, 954, 954,
	954, 954, 954, 954, 954, 954, 954, 954, 954, 954,
	241, -1000, -1000, 147, 73, 92, 254, 954, 954, 100,
	954, 100, 709, 954, 954, 100, 221, 954, 423, 265,
	-1000, 987, -1000, 861, -1000, 14, -1000, 1234, -1000, 807,
	-1000, -1000, 789, 129, -1000, 954, -1000, 1031, 382, 156,
	49, -1000, -1000, 532, 423, 954, 735, 1191, 1008, -28,
	-28, 166, -6, -28, -28, -28, -28, 987, 109, 109,
	-1000, -1000, -1000, 24, -1000, 185, -1000, 954, 382, 382,
	-1000, 35, 34, 1234, 1165, 195, 152, 1234, 195, 152,
	126, -1000, 171, 1234, 52, -1000, 1234, 1143, 195, 152,
	142, 1120, -1000, -1000, 1234, 382, 65, -1000, 1098, 1075,
	-1000, 170, 1234, 954, 44, -1000, -1000, -1000, -1000, -1000,
	-1000, 382, -1000, -1000, -1000, -1000, -1000, -20, 382, 219,
	954, 382, 88, -1000, 423, 1052, 1008, 1008, 423, -1000,
	-1000, 532, 382, 7, 1234, -23, 103, 382, -1000, 382,
	954, -1000, -1000, 153, 954, -1000, -1000, 954, -1000, 33,
	-1000, -1000, 382, 954, 954, -1000, 1234, 382, 50, -1000,
	224, 1234, -32, -1000, -1000, 1008, 423, -1000, 423, -1000,
	-1000, 1031, -1000, 382, 954, -1000, 103, -33, 1234, -1000,
	1234, 1234, 382, 954, -1000, 1234, 1234, -1000, -1000, 186,
	-7, -1000, 31, 954, 423, -1000, -1000, -1000, -1000, 1234,
	-1000, 954, -35, 1234, 142, -16, 382, 954, 382, 1234,
	-1000, 1234, 954, -1000, 382, -1000, 1234, -40, 1234, -1000,
	954, 1234,
}

var yyPgo = [...]int16{
	0, 355, 271, 224, 273, 354, 353, 352, 351, 349,
	262, 347, 346, 340, 339, 337, 335, 333, 331, 148,
	329, 126, 67, 327, 326, 1, 324, 27, 323, 319,
	316, 315, 11, 6, 0, 314, 312, 311, 309, 304,
	299, 298, 297, 293, 3, 292, 291, 290, 283, 282,
	250, 2, 4,
}

var yyR1 = [...]int8{
	0, 51, 51, 51, 51, 50, 50, 50, 4, 4,
	4, 5, 5, 5, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 45, 21, 21, 21, 21, 21,
	21, 21, 23, 20, 20, 20, 20, 20, 22, 22,
	19, 25, 25, 25, 25, 26, 26, 35, 35, 35,
	35, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	24, 24, 16, 15, 13, 14, 14, 14, 14, 14,
	14, 14, 14, 17, 17, 6, 8, 8, 7, 2,
	2, 3, 18, 18, 18, 18, 9, 9, 9, 9,
	28, 28, 12, 12, 12, 12, 12, 12, 12, 12,
	11, 11, 11, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 30, 30, 30, 30, 30, 31, 31, 52,
	52, 32, 32, 32, 33, 33, 33, 33, 33, 33,
	38, 38, 38, 39, 39, 39, 39, 36, 36, 36,
	36, 37, 37, 37, 37, 40, 40, 40, 40, 40,
	41, 41, 42, 42, 43, 43, 44, 44, 27, 27,
	1, 1, 46, 46, 46, 46, 46, 47, 47, 47,
	49, 49, 49, 49, 48, 48, 48, 48, 48, 48,
	48, 48,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 2, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 1, 1, 1, 1, 1, 4, 5,
	5, 1, 3, 3, 5, 1, 3, 6, 5, 4,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 1, 5, 7, 6, 6, 5, 6,
	5, 5, 4, 1, 3, 3, 1, 2, 3, 1,
	3, 2, 4, 3, 5, 4, 3, 2, 1, 3,
	1, 1, 2, 4, 4, 6, 3, 5, 5, 7,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 1,
	2, 4, 4, 4, 3, 3, 3, 3, 3, 3,
	2, 3, 2, 2, 3, 3, 2, 2, 3, 1,
	2, 4, 5, 5, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 4, 6, 3, 5, 2, 2, 3, 3,
	5, 6, 3, 4, 4, 6, 3, 5, 6, 8,
	5, 7,
}

var yyChk = [...]int16{
	-1000, -50, 69, 2, 8, -4, -5, -10, -51, -17,
	-13, -14, -15, -16, -45, -47, -12, -49, -11, 4,
	28, -8, 22, 26, 25, -34, -46, 36, 38, -48,
	-32, -33, -27, -6, -40, -24, -38, -36, -31, -18,
	-28, 39, 7, 10, 20, 64, -41, -42, -43, -44,
	50, 41, -39, 13, -37, -3, -19, 12, -29, -30,
	57, 58, 19, 21, 62, 63, 11, -1, -22, 14,
	35, 43, 54, -10, -51, 4, 28, 5, 66, -7,
	65, -27, -34, 4, -33, -32, 45, 46, 61, 60,
	47, 48, 51, 53, 41, 43, 54, 50, 44, 49,
	5, 28, 15, -27, -27, 16, 5, 52, 13, 7,
	52, 7, 12, 52, 13, 7, -27, 13, -34, -27,
	-34, -34, 17, 5, 28, 52, 17, -34, 15, 5,
	28, -3, 14, -34, 11, 13, 15, -34, 13, -51,
	-27, -2, -3, 14, -34, 23, 4, -34, 4, -34,
	-34, -34, -34, -34, -34, -34, -34, -34, -34, -34,
	-34, -34, -34, -27, 15, 14, -3, 52, 29, 40,
	-2, 16, -27, -34, -34, -32, -27, -34, -32, -27,
	-9, 16, -52, -34, -27, 28, -34, -34, -32, -27,
	12, -34, -2, 17, -34, 17, -44, 15, -34, -34,
	16, -52, -34, 29, -21, -20, -22, -19, -27, -23,
	-35, 12, 31, 32, 33, 30, 37, 13, 50, 39,
	52, 29, -4, -2, -34, -34, 4, 4, -34, -2,
	-3, 14, 29, -27, -34, -21, -21, 40, -2, 29,
	52, 17, 16, -52, 5, 16, 28, 52, 17, -27,
	17, -21, 17, 29, 29, 16, -34, 17, -21, -21,
	12, -34, -21, 15, -2, 4, -34, -2, -34, -2,
	-2, -34, -21, 29, 52, -2, -21, -21, -34, 16,
	-34, -34, 29, 52, -21, -34, -34, -21, 16, -26,
	16, -25, -27, 52, -34, -2, -2, -2, -21, -34,
	-2, 52, -21, -34, 5, 16, 40, 52, 29, -34,
	-2, -34, 52, -25, 40, -21, -34, -21, -34, -21,
	52, -34,
}

var yyDef = [...]int16{
	0, -2, 0, 7, 6, 5, 9, 10, 12, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 1,
	2, 73, 0, 63, 62, 24, 0, 0, 0, 0,
	59, 58, 149, 76, 51, 52, 53, 54, 55, 56,
	57, 0, 0, 158, 159, 0, 145, 146, 147, 148,
	0, 0, 0, 0, 0, 139, 0, 0, 90, 91,
	150, 151, 152, 153, 154, 155, 156, 0, 0, 0,
	0, 160, 161, 8, 11, 3, 4, 0, 0, 77,
	0, 149, 0, 0, 58, 59, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 167, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	60, 61, 130, 0, 136, 0, 132, 133, 137, 0,
	144, 140, 0, 0, 157, 0, 81, 0, 0, 13,
	96, 74, 79, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 164, 168, 0, 169, 0, 0, 0,
	172, 0, 176, 100, 0, 126, 127, 101, 128, 129,
	0, 83, 0, 88, 149, 119, 102, 0, 124, 125,
	0, 0, 75, 131, 135, 0, 0, 138, 0, 0,
	117, 0, 134, 0, 0, 25, 26, 27, 28, 29,
	30, 0, 33, 34, 35, 36, 37, 0, 0, 0,
	0, 0, 0, 78, 0, 0, 0, 0, 0, 72,
	-2, 0, 0, 162, 93, 94, 0, 0, 173, 0,
	0, 123, 82, 0, 87, 85, 120, 0, 121, 174,
	122, 38, 0, 0, 0, 118, 141, 0, 0, 32,
	0, 97, 98, 80, 64, 0, 0, 70, 0, 68,
	71, 24, 165, 0, 0, 170, 0, 177, 180, 84,
	86, 89, 0, 0, 39, 143, 142, 40, 31, 0,
	50, 45, 41, 0, 0, 66, 69, 67, 163, 95,
	171, 0, 175, 178, 0, 49, 0, 0, 0, 99,
	65, 181, 0, 46, 0, 48, 42, 43, 179, 47,
	0, 44,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:146
		{
			yylex.(*parser).parseResult = yyDollar[2].aststmts
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:149
		{
			yylex.(*parser).unexpected("", "")
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:154
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:161
		{
			yyVAL.aststmts = plast.Stmts{yyDollar[1].node}
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:165
		{
			yyVAL.aststmts = plast.Stmts{yyDollar[1].node}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:167
		{
			yyVAL.aststmts = plast.Stmts{}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:169
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:199
		{
			yyVAL.node = yyDollar[2].node
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:205
		{
			yyVAL.node = yyDollar[2].node
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:212
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:216
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:220
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:224
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:228
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:235
		{
			yyVAL.node = yylex.(*parser).newListType(yyDollar[4].node)
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:239
		{
			yyVAL.node = yylex.(*parser).newListType(yyDollar[5].node)
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:245
		{
			yyVAL.node = yylex.(*parser).newMapType(yyDollar[3].node, yyDollar[5].node)
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:251
		{
			yyVAL.node = yyDollar[1].node
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:253
		{
			yyVAL.node = yyDollar[1].node
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:255
		{
			yyVAL.node = yyDollar[1].node
		}
	case 44:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:257
		{
			yyVAL.node = yyDollar[1].node
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:262
		{
			yyVAL.node = yyDollar[1].node
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:265
		{
			yyVAL.node = &ast.Node{}
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:267
		{
			yyVAL.node = &ast.Node{}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:269
		{
			yyVAL.node = &ast.Node{}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:271
		{
			yyVAL.node = &ast.Node{}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:282
		{
			yyVAL.node = yyDollar[2].node
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:284
		{
			yyVAL.node = yyDollar[2].node
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:289
		{
			yyVAL.node = yylex.(*parser).newBreakStmt(yyDollar[1].item.Pos)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:293
		{
			yyVAL.node = yylex.(*parser).newContinueStmt(yyDollar[1].item.Pos)
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:302
		{
			yyVAL.node = yylex.(*parser).newForInStmt(yyDollar[2].node, yyDollar[4].node, yyDollar[5].astblock, yyDollar[1].item, yyDollar[3].item)
		}
	case 65:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:313
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, yyDollar[4].node, yyDollar[6].node, yyDollar[7].astblock)
		}
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:315
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, yyDollar[4].node, nil, yyDollar[6].astblock)
		}
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:317
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, yyDollar[3].node, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:319
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, yyDollar[3].node, nil, yyDollar[5].astblock)
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:322
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, nil, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:324
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, nil, nil, yyDollar[5].astblock)
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:326
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, nil, yyDollar[4].node, yyDollar[5].astblock)
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:328
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, nil, nil, yyDollar[4].astblock)
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:332
		{
			yyVAL.node = yylex.(*parser).newIfElifStmt(yyDollar[1].iflist)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:336
		{
			yyVAL.node = yylex.(*parser).newIfElifelseStmt(yyDollar[1].iflist, yyDollar[2].item, yyDollar[3].astblock)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:342
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:346
		{
			yyVAL.iflist = []*plast.IfStmtElem{yyDollar[1].ifitem}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:348
		{
			yyVAL.iflist = append(yyDollar[1].iflist, yyDollar[2].ifitem)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:352
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:358
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, yyDollar[2].aststmts, yyDollar[3].item)
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:362
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, plast.Stmts{}, yyDollar[2].item)
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:367
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, yyDollar[3].nodes, yyDollar[2].item, yyDollar[4].item)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:371
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, nil, yyDollar[2].item, yyDollar[3].item)
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:375
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, yyDollar[3].nodes, yyDollar[2].item, yyDollar[5].item)
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:379
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, nil, yyDollar[2].item, yyDollar[4].item)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:386
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:391
		{
			yyVAL.nodes = []*plast.Node{yyDollar[1].node}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:393
		{
			yyVAL.nodes = []*plast.Node{yyDollar[1].node}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:400
		{
			yyVAL.node = yylex.(*parser).newVarbDeclStmt(yyDollar[1].item)
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[2].node, nil, nil)
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:405
		{
			yyVAL.node = yylex.(*parser).newVarbDeclStmt(yyDollar[1].item)
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[2].node, nil, yyDollar[4].node)
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:410
		{
			yyVAL.node = yylex.(*parser).newVarbDeclStmt(yyDollar[1].item)
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[2].node, yyDollar[4].node, nil)
		}
	case 95:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:415
		{
			yyVAL.node = yylex.(*parser).newVarbDeclStmt(yyDollar[1].item)
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[2].node, yyDollar[4].node, yyDollar[6].node)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:420
		{
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[3].node, nil, nil)
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:424
		{
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[3].node, nil, yyDollar[5].node)
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:428
		{
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[3].node, yyDollar[5].node, nil)
		}
	case 99:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:432
		{
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:439
		{
			yyVAL.node = yylex.(*parser).newAssignmentExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:441
		{
			yyVAL.node = yylex.(*parser).newAssignmentExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:443
		{
			yyVAL.node = yylex.(*parser).newAssignmentExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:447
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:449
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:451
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:453
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:455
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:457
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:459
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:461
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:463
		{
			yyVAL.node = yyDollar[1].node
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:470
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:472
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:474
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:476
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:478
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:483
		{
			yyVAL.node = yylex.(*parser).newParenExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[3].item)
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:485
		{
			yyVAL.node = yylex.(*parser).newParenExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[4].item)
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:494
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].item)
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:497
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(nil, yyDollar[2].item, yyDollar[3].node, yyDollar[4].item)
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:499
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].item)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:506
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:510
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:514
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:518
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:522
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:526
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:533
		{
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:537
		{
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:541
		{
			yyVAL.node = yylex.(*parser).newListInitStartExpr(yyDollar[1].item.Pos, nil)
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:548
		{
			yyVAL.node = yylex.(*parser).newListInitStartExpr(yyDollar[1].item.Pos, nil)
			yyVAL.node = yylex.(*parser).newListInitAppendExpr(yyVAL.node, yyDollar[2].node)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:553
		{
			yyVAL.node = yylex.(*parser).newListInitStartExpr(yyDollar[2].item.Pos, yyDollar[1].node)
			yyVAL.node = yylex.(*parser).newListInitAppendExpr(yyVAL.node, yyDollar[3].node)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:558
		{
			yyVAL.node = yylex.(*parser).newListInitAppendExpr(yyVAL.node, yyDollar[3].node)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:566
		{
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:570
		{
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[3].item.Pos)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:574
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[1].astblock.LBracePos.Pos, nil)
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[1].astblock.RBracePos.Pos)
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:579
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[2].astblock.LBracePos.Pos, yyDollar[1].node)
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[2].astblock.RBracePos.Pos)
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:586
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[1].item.Pos, nil)
			yyVAL.node = yylex.(*parser).newMapInitAppendExpr(yyVAL.node, yyDollar[2].node, yyDollar[4].node)
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:591
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[2].item.Pos, yyDollar[1].node)
			yyVAL.node = yylex.(*parser).newMapInitAppendExpr(yyVAL.node, yyDollar[3].node, yyDollar[5].node)
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:596
		{
			yyVAL.node = yylex.(*parser).newMapInitAppendExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:617
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, true)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:619
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, false)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:624
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:629
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteMultilineString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:637
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:639
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:645
		{
			yyVAL.node = yylex.(*parser).newNumberLiteral(yyDollar[1].item)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:647
		{
			num := yylex.(*parser).newNumberLiteral(yyDollar[2].item)
			switch yyDollar[1].item.Typ {
			case ADD: // pass
			case SUB:
				if num.NodeType == plast.TypeFloatLiteral {
					num.FloatLiteral.Val = -num.FloatLiteral.Val
					num.FloatLiteral.Start = yylex.(*parser).posCache.LnCol(yyDollar[1].item.Pos)
				} else {
					num.IntegerLiteral.Val = -num.IntegerLiteral.Val
					num.IntegerLiteral.Start = yylex.(*parser).posCache.LnCol(yyDollar[1].item.Pos)

				}
			}
			yyVAL.node = num
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:666
		{
			yyVAL.node = yylex.(*parser).newIdentifier(yyDollar[1].item)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:670
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newIdentifier(yyDollar[1].item)
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:680
		{
			yyVAL.node = yylex.(*parser).newStructTypeDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[4].node, nil)
		}
	case 163:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:685
		{
			yyVAL.node = yylex.(*parser).newStructTypeDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[4].node, yyDollar[6].node)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:690
		{
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[3].node, nil)
		}
	case 165:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:694
		{
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[3].node, yyDollar[5].node)
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:702
		{
			yyVAL.node = yyDollar[1].node
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:706
		{
			yyVAL.node = yyDollar[1].node
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:710
		{
			yyVAL.node = yylex.(*parser).newStructTypeDecl(yyDollar[2].node)
		}
	case 170:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:716
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenReturn(yyDollar[1].node, yyDollar[4].node)
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[5].astblock)
		}
	case 171:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:721
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenReturn(yyDollar[1].node, yyDollar[5].node)
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[6].astblock)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:726
		{
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[3].astblock)
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:730
		{
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[4].astblock)
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:736
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, nil, nil)
		}
	case 175:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:741
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, yyDollar[6].node, nil)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:746
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, nil, nil)
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:750
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, yyDollar[5].node, nil)
		}
	case 178:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:754
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, nil, yyDollar[6].node)
		}
	case 179:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:759
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, yyDollar[6].node, yyDollar[8].node)
		}
	case 180:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:764
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, nil, yyDollar[5].node)
		}
	case 181:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:768
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	}
	goto yystack /* stack new state and value */
}
