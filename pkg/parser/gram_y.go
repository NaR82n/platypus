// Code generated by goyacc -o gram_y.go gram.y. DO NOT EDIT.

//line gram.y:7
package parser

import __yyfmt__ "fmt"

//line gram.y:7

import (
	plast "github.com/GuanceCloud/platypus/pkg/ast"
	// pltoken "github.com/GuanceCloud/platypus/pkg/token"
)

//line gram.y:16
type yySymType struct {
	yys      int
	aststmts plast.Stmts
	astblock *plast.BlockStmt

	ifitem *plast.IfStmtElem
	iflist []*plast.IfStmtElem
	node   *plast.Node
	nodes  []*plast.Node
	item   Item
}

const SEMICOLON = 57346
const COMMA = 57347
const COMMENT = 57348
const DOT = 57349
const EOF = 57350
const ERROR = 57351
const ID = 57352
const NUMBER = 57353
const LEFT_PAREN = 57354
const LEFT_BRACKET = 57355
const LEFT_BRACE = 57356
const RIGHT_BRACE = 57357
const RIGHT_PAREN = 57358
const RIGHT_BRACKET = 57359
const SPACE = 57360
const STRING = 57361
const QUOTED_STRING = 57362
const MULTILINE_STRING = 57363
const FOR = 57364
const IN = 57365
const WHILE = 57366
const BREAK = 57367
const CONTINUE = 57368
const RETURN = 57369
const EOL = 57370
const COLON = 57371
const STR = 57372
const INT = 57373
const FLOAT = 57374
const BOOL = 57375
const LIST = 57376
const MAP = 57377
const STRUCT = 57378
const ANY = 57379
const LET = 57380
const FN = 57381
const RET_SYMB = 57382
const NOT = 57383
const BitwiseXOR = 57384
const BitwiseOR = 57385
const BitwiseNOT = 57386
const BitwiseAND = 57387
const CONST = 57388
const operatorsStart = 57389
const ADD = 57390
const DIV = 57391
const GTE = 57392
const GT = 57393
const LT = 57394
const LTE = 57395
const MOD = 57396
const MUL = 57397
const NEQ = 57398
const EQ = 57399
const EQEQ = 57400
const SUB = 57401
const operatorsEnd = 57402
const keywordsStart = 57403
const TRUE = 57404
const FALSE = 57405
const IDENTIFIER = 57406
const AND = 57407
const OR = 57408
const NIL = 57409
const NULL = 57410
const IF = 57411
const ELIF = 57412
const ELSE = 57413
const keywordsEnd = 57414
const startSymbolsStart = 57415
const START_STMTS = 57416
const startSymbolsEnd = 57417
const UMINUS = 57418

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SEMICOLON",
	"COMMA",
	"COMMENT",
	"DOT",
	"EOF",
	"ERROR",
	"ID",
	"NUMBER",
	"LEFT_PAREN",
	"LEFT_BRACKET",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"RIGHT_PAREN",
	"RIGHT_BRACKET",
	"SPACE",
	"STRING",
	"QUOTED_STRING",
	"MULTILINE_STRING",
	"FOR",
	"IN",
	"WHILE",
	"BREAK",
	"CONTINUE",
	"RETURN",
	"EOL",
	"COLON",
	"STR",
	"INT",
	"FLOAT",
	"BOOL",
	"LIST",
	"MAP",
	"STRUCT",
	"ANY",
	"LET",
	"FN",
	"RET_SYMB",
	"NOT",
	"BitwiseXOR",
	"BitwiseOR",
	"BitwiseNOT",
	"BitwiseAND",
	"CONST",
	"operatorsStart",
	"ADD",
	"DIV",
	"GTE",
	"GT",
	"LT",
	"LTE",
	"MOD",
	"MUL",
	"NEQ",
	"EQ",
	"EQEQ",
	"SUB",
	"operatorsEnd",
	"keywordsStart",
	"TRUE",
	"FALSE",
	"IDENTIFIER",
	"AND",
	"OR",
	"NIL",
	"NULL",
	"IF",
	"ELIF",
	"ELSE",
	"keywordsEnd",
	"startSymbolsStart",
	"START_STMTS",
	"startSymbolsEnd",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:835

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 246,
	1, 89,
	4, 89,
	8, 89,
	15, 89,
	28, 89,
	-2, 159,
}

const yyPrivate = 57344

const yyLast = 1877

var yyAct = [...]int16{
	26, 315, 35, 181, 66, 105, 150, 182, 8, 17,
	352, 131, 342, 17, 81, 79, 76, 95, 329, 336,
	98, 101, 309, 83, 321, 302, 102, 100, 106, 96,
	97, 99, 95, 3, 17, 98, 101, 87, 88, 91,
	92, 102, 100, 93, 86, 94, 99, 335, 123, 271,
	310, 249, 90, 89, 135, 200, 344, 334, 124, 125,
	126, 127, 128, 129, 270, 201, 137, 301, 140, 110,
	264, 144, 251, 141, 109, 108, 112, 272, 348, 248,
	280, 275, 152, 199, 147, 155, 157, 158, 159, 160,
	161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
	171, 172, 173, 174, 133, 2, 101, 175, 322, 180,
	185, 102, 100, 189, 190, 185, 132, 36, 188, 256,
	323, 184, 191, 77, 312, 151, 193, 134, 19, 96,
	97, 205, 95, 55, 209, 98, 101, 252, 211, 213,
	82, 102, 100, 56, 219, 69, 99, 78, 261, 218,
	197, 225, 20, 143, 240, 241, 221, 244, 17, 223,
	134, 63, 119, 120, 55, 54, 70, 65, 85, 299,
	192, 146, 296, 50, 56, 51, 278, 138, 247, 207,
	96, 206, 134, 95, 206, 252, 98, 101, 206, 74,
	206, 145, 102, 100, 254, 61, 253, 99, 62, 58,
	266, 116, 59, 262, 54, 225, 225, 263, 134, 57,
	210, 118, 332, 60, 255, 225, 48, 49, 122, 206,
	217, 52, 53, 333, 117, 179, 206, 186, 187, 121,
	216, 110, 186, 194, 195, 225, 109, 108, 112, 130,
	203, 55, 225, 286, 288, 283, 104, 153, 222, 291,
	55, 56, 294, 295, 225, 293, 314, 297, 4, 7,
	56, 298, 55, 1, 227, 115, 75, 276, 202, 225,
	114, 113, 56, 307, 257, 225, 225, 55, 176, 148,
	225, 107, 196, 18, 30, 225, 317, 56, 96, 97,
	103, 95, 226, 5, 98, 101, 87, 88, 91, 92,
	102, 100, 93, 327, 94, 99, 225, 46, 28, 43,
	15, 331, 34, 33, 225, 265, 32, 64, 227, 227,
	39, 67, 338, 40, 294, 229, 340, 339, 227, 38,
	341, 41, 42, 313, 343, 37, 346, 228, 224, 225,
	279, 225, 9, 350, 13, 110, 226, 226, 227, 225,
	109, 108, 112, 353, 14, 227, 226, 12, 11, 68,
	267, 268, 10, 29, 16, 21, 80, 227, 31, 6,
	274, 45, 0, 0, 0, 0, 226, 0, 0, 0,
	0, 0, 227, 226, 0, 0, 0, 0, 227, 227,
	281, 0, 0, 227, 0, 226, 111, 282, 227, 0,
	0, 316, 0, 204, 0, 0, 0, 0, 0, 292,
	226, 0, 0, 0, 0, 0, 226, 226, 0, 227,
	0, 226, 0, 0, 300, 0, 226, 227, 0, 142,
	304, 306, 239, 0, 0, 308, 245, 0, 0, 149,
	311, 0, 111, 0, 0, 0, 0, 226, 0, 0,
	316, 0, 227, 0, 227, 226, 0, 0, 0, 0,
	0, 326, 227, 0, 55, 0, 230, 236, 151, 330,
	0, 0, 0, 0, 56, 0, 0, 0, 0, 198,
	226, 269, 226, 149, 234, 231, 232, 233, 0, 74,
	226, 235, 0, 238, 345, 0, 347, 0, 0, 0,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 237,
	0, 0, 149, 0, 0, 0, 246, 0, 0, 0,
	284, 0, 287, 289, 290, 0, 63, 0, 0, 55,
	54, 70, 65, 85, 0, 183, 0, 0, 50, 56,
	51, 0, 0, 0, 0, 0, 111, 134, 303, 0,
	305, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	61, 149, 0, 62, 58, 318, 319, 59, 320, 0,
	0, 178, 0, 0, 57, 0, 0, 0, 60, 0,
	0, 48, 49, 0, 328, 0, 52, 53, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 337, 0, 0,
	149, 0, 246, 246, 149, 0, 0, 0, 96, 97,
	0, 95, 0, 0, 98, 101, 87, 88, 91, 92,
	102, 100, 93, 86, 94, 99, 0, 0, 149, 0,
	149, 90, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 19, 246, 149, 63, 149, 0,
	55, 54, 70, 65, 27, 104, 0, 0, 0, 50,
	56, 51, 22, 0, 149, 24, 23, 25, 20, 0,
	0, 0, 0, 0, 0, 74, 44, 149, 71, 73,
	0, 61, 0, 0, 62, 58, 72, 0, 59, 0,
	0, 0, 0, 0, 0, 57, 0, 0, 0, 60,
	0, 0, 48, 49, 0, 0, 0, 52, 53, 47,
	19, 0, 0, 63, 0, 0, 55, 54, 70, 65,
	27, 0, 0, 0, 0, 50, 56, 51, 22, 0,
	0, 24, 23, 25, 20, 0, 0, 0, 0, 0,
	0, 74, 44, 0, 71, 73, 0, 61, 0, 0,
	62, 58, 72, 0, 59, 0, 0, 0, 0, 0,
	0, 57, 0, 0, 0, 60, 0, 0, 48, 49,
	0, 0, 0, 52, 53, 47, 63, 0, 0, 55,
	54, 70, 65, 27, 0, 0, 0, 0, 50, 56,
	51, 22, 0, 0, 24, 23, 25, 0, 0, 0,
	0, 0, 0, 0, 74, 44, 0, 71, 73, 0,
	61, 0, 0, 62, 58, 72, 0, 59, 0, 0,
	0, 0, 0, 0, 57, 0, 0, 0, 60, 0,
	0, 48, 49, 0, 0, 0, 52, 53, 47, 63,
	0, 0, 55, 54, 70, 65, 85, 0, 0, 136,
	0, 50, 56, 51, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 61, 0, 0, 62, 58, 0, 0,
	59, 0, 0, 0, 0, 0, 0, 57, 0, 135,
	0, 60, 0, 0, 48, 49, 0, 0, 242, 52,
	53, 63, 0, 0, 55, 54, 70, 65, 85, 0,
	0, 0, 0, 50, 56, 51, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 61, 0, 0, 62, 58,
	0, 0, 59, 0, 0, 0, 0, 0, 0, 57,
	0, 0, 0, 60, 0, 0, 48, 49, 0, 0,
	63, 52, 53, 55, 54, 70, 65, 85, 104, 0,
	0, 0, 50, 56, 51, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 230, 236, 0, 0, 74, 0,
	0, 0, 56, 0, 61, 0, 0, 62, 58, 0,
	0, 59, 234, 231, 232, 233, 0, 74, 57, 235,
	0, 238, 60, 0, 0, 48, 49, 0, 0, 63,
	52, 53, 55, 54, 70, 65, 85, 237, 0, 212,
	0, 50, 56, 51, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 61, 0, 0, 62, 58, 0, 0,
	59, 0, 0, 0, 0, 0, 0, 57, 0, 0,
	0, 60, 0, 0, 48, 49, 0, 0, 63, 52,
	53, 55, 54, 70, 65, 85, 0, 0, 208, 0,
	50, 56, 51, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 61, 0, 0, 62, 58, 0, 0, 59,
	0, 0, 0, 0, 0, 0, 57, 0, 0, 0,
	60, 0, 0, 48, 49, 0, 0, 156, 52, 53,
	63, 0, 0, 55, 54, 70, 65, 85, 0, 0,
	0, 0, 50, 56, 51, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 61, 0, 0, 62, 58, 0,
	0, 59, 0, 0, 0, 0, 0, 0, 57, 0,
	0, 0, 60, 0, 0, 48, 49, 0, 0, 63,
	52, 53, 55, 54, 70, 65, 85, 139, 0, 0,
	0, 50, 56, 51, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 61, 0, 0, 62, 58, 0, 0,
	59, 0, 0, 0, 0, 0, 0, 57, 0, 0,
	0, 60, 0, 0, 48, 49, 0, 0, 84, 52,
	53, 63, 0, 0, 55, 54, 70, 65, 85, 0,
	0, 0, 0, 50, 56, 51, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 61, 0, 0, 62, 58,
	0, 0, 59, 0, 0, 0, 0, 0, 0, 57,
	0, 0, 0, 60, 0, 0, 48, 49, 0, 0,
	63, 52, 53, 55, 54, 70, 65, 85, 0, 0,
	0, 0, 50, 56, 51, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 61, 0, 0, 62, 58, 0,
	0, 59, 0, 0, 0, 0, 0, 0, 57, 0,
	0, 0, 60, 0, 0, 48, 49, 0, 0, 63,
	52, 53, 55, 54, 70, 65, 27, 0, 0, 0,
	0, 50, 56, 51, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 0, 0, 74, 0, 0,
	0, 0, 0, 61, 214, 0, 62, 58, 0, 0,
	59, 0, 0, 0, 0, 0, 0, 57, 177, 0,
	0, 60, 0, 0, 48, 49, 0, 0, 0, 52,
	53, 96, 97, 0, 95, 0, 0, 98, 101, 87,
	88, 91, 92, 102, 100, 93, 324, 94, 99, 0,
	0, 0, 0, 0, 90, 89, 0, 0, 325, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 97, 0, 95, 0, 0, 98, 101, 87,
	88, 91, 92, 102, 100, 93, 177, 94, 99, 0,
	0, 0, 0, 0, 90, 89, 0, 0, 0, 96,
	97, 0, 95, 0, 0, 98, 101, 87, 88, 91,
	92, 102, 100, 93, 259, 94, 99, 0, 0, 0,
	0, 0, 90, 89, 0, 0, 260, 0, 0, 0,
	258, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	97, 0, 95, 0, 0, 98, 101, 87, 88, 91,
	92, 102, 100, 93, 177, 94, 99, 0, 178, 0,
	0, 0, 90, 89, 0, 0, 0, 96, 97, 0,
	95, 0, 0, 98, 101, 87, 88, 91, 92, 102,
	100, 93, 177, 94, 99, 0, 0, 0, 220, 0,
	90, 89, 0, 0, 0, 96, 97, 0, 95, 0,
	134, 98, 101, 87, 88, 91, 92, 102, 100, 93,
	0, 94, 99, 0, 96, 97, 349, 95, 90, 89,
	98, 101, 87, 88, 91, 92, 102, 100, 93, 0,
	94, 99, 151, 0, 0, 0, 0, 90, 89, 0,
	0, 96, 97, 0, 95, 0, 0, 98, 101, 87,
	88, 91, 92, 102, 100, 93, 285, 94, 99, 0,
	96, 97, 0, 95, 90, 89, 98, 101, 87, 88,
	91, 92, 102, 100, 93, 0, 94, 99, 0, 0,
	0, 0, 0, 90, 89, 0, 0, 0, 273, 0,
	0, 0, 0, 0, 96, 97, 0, 95, 0, 0,
	98, 101, 87, 88, 91, 92, 102, 100, 93, 0,
	94, 99, 0, 96, 97, 250, 95, 90, 89, 98,
	101, 87, 88, 91, 92, 102, 100, 93, 243, 94,
	99, 0, 0, 0, 0, 0, 90, 89, 0, 0,
	96, 97, 0, 95, 0, 0, 98, 101, 87, 88,
	91, 92, 102, 100, 93, 154, 94, 99, 0, 0,
	0, 0, 0, 90, 89, 0, 96, 97, 0, 95,
	0, 0, 98, 101, 87, 88, 91, 92, 102, 100,
	93, 0, 94, 99, 0, 0, 0, 0, 0, 90,
	89, 0, 0, 96, 97, 0, 95, 0, 0, 98,
	101, 87, 88, 91, 92, 102, 100, 93, 0, 94,
	99, 0, 96, 97, 0, 95, 90, 89, 98, 101,
	87, 88, 91, 92, 102, 100, 93, 0, 94, 99,
	0, 96, 97, 0, 95, 90, 89, 98, 101, 87,
	88, 91, 92, 102, 100, 93, 0, 94, 99, 96,
	97, 0, 95, 0, 90, 98, 101, 87, 88, 91,
	92, 102, 100, 0, 0, 0, 99,
}

var yyPact = [...]int16{
	31, 250, 706, -1000, -1000, -1000, 769, 124, 119, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -56, 1254, -1000, -1000, -1000, -13, 640, -1000, 276,
	-1000, -1000, -1000, -1000, -1000, -1000, 338, -1000, 258, -1000,
	-1000, -1000, -1000, 196, 123, 123, 213, 1313, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1313, 1313, 1313,
	1313, 1313, 1313, 226, 99, 832, 164, 1192, -1000, 139,
	1313, -1000, -1000, 123, 158, 124, 119, -1000, -1000, 111,
	-1000, 1313, 224, 1761, 1133, 953, 1313, 1313, 1313, 1313,
	1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
	1313, 1313, 1313, 92, -1000, 273, 566, 123, 1313, 519,
	123, -1000, 953, 1313, 154, 123, 267, -1000, -1000, 136,
	26, 25, 252, 1628, -1000, -1000, -1000, -1000, -1000, -1000,
	1313, 162, -1000, 1071, -1000, 193, -1000, 1780, 1012, -1000,
	1399, 215, -1000, 953, 1582, 236, 972, 119, -1000, -1000,
	-1000, 640, 1628, 1313, 894, 1734, 1372, 1563, 1780, 87,
	87, 1799, 246, 87, 87, 1817, 1817, -28, 138, 87,
	57, 57, -1000, -1000, -1000, -1000, -1000, 1313, -1000, 22,
	1708, 43, 180, -1000, 198, 1780, 62, -1000, 269, 1535,
	1507, 132, -1000, 191, -1000, 41, -1000, 231, -1000, 1313,
	972, 454, 24, 20, -1000, 1681, -1000, -1000, -1000, 1780,
	972, 64, -1000, 1780, -1000, -1000, -1000, -1000, 262, 1467,
	-1000, 160, 123, 63, -1000, -1000, -1000, -1000, -1000, -1000,
	972, -1000, -1000, -1000, -1000, -1000, -3, 972, 233, -1000,
	1628, 1662, 1372, 1372, 1628, -1000, -1000, 1780, 1313, 972,
	-1000, 1313, 1313, -1000, 156, -1000, 1313, -1000, -1000, -1000,
	1313, -1000, 153, -1000, 972, 38, 1780, -32, 111, -1000,
	454, 972, 1313, -1000, -1000, 972, -1000, -1000, -1000, -7,
	972, 108, -1000, 240, -1000, 1372, 1628, -1000, 1628, -1000,
	-1000, 1780, -33, 91, 1780, 1780, -1000, 1780, 1439, -1000,
	-1000, 972, 1313, -1000, 111, -1000, -39, 1780, -1000, 972,
	1313, -1000, -1000, 207, 17, -1000, -10, 1628, -1000, -1000,
	-1000, 1313, -1000, 1313, -1000, 1313, -1000, 1780, -1000, 1313,
	-45, 1780, 123, 16, 972, 1313, 972, -1000, 1780, 61,
	1609, 1780, 1313, -1000, 972, -1000, 1780, -47, -1000, -1000,
	1780, -1000, 1313, 1780,
}

var yyPgo = [...]int16{
	0, 371, 279, 359, 6, 290, 369, 368, 366, 365,
	7, 259, 364, 363, 362, 358, 357, 354, 344, 342,
	0, 3, 145, 338, 159, 4, 337, 335, 1, 333,
	117, 332, 331, 329, 325, 323, 5, 321, 320, 317,
	316, 313, 312, 2, 310, 309, 308, 307, 284, 283,
	263, 8, 11,
}

var yyR1 = [...]int8{
	0, 51, 51, 51, 51, 50, 50, 50, 5, 5,
	5, 6, 6, 6, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 49, 49, 49, 44, 24, 24,
	24, 24, 24, 24, 24, 26, 23, 23, 23, 23,
	23, 25, 25, 22, 28, 28, 28, 28, 29, 29,
	34, 34, 34, 34, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 27, 27, 27, 27, 27,
	27, 18, 16, 17, 14, 15, 15, 15, 15, 15,
	15, 15, 15, 19, 19, 7, 9, 9, 8, 2,
	2, 4, 3, 10, 10, 10, 10, 1, 1, 13,
	13, 13, 13, 13, 13, 13, 13, 12, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 32, 32, 52, 52, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 21, 21, 38, 38, 38,
	38, 38, 39, 39, 39, 36, 35, 35, 35, 35,
	35, 35, 37, 37, 37, 37, 37, 37, 37, 37,
	40, 40, 41, 41, 42, 42, 43, 30, 30, 45,
	45, 45, 45, 45, 46, 46, 46, 48, 48, 48,
	48, 47, 47, 47, 47, 47, 47, 47, 47,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 2, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 1, 1, 1, 1,
	1, 4, 5, 5, 1, 3, 3, 5, 1, 3,
	6, 5, 4, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 5, 7, 6, 6, 5, 6,
	5, 5, 4, 1, 3, 3, 1, 2, 3, 1,
	1, 3, 2, 3, 2, 1, 3, 1, 1, 2,
	4, 4, 6, 3, 5, 5, 7, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 1, 2, 4, 4,
	4, 6, 8, 3, 3, 5, 4, 4, 4, 6,
	8, 3, 3, 5, 4, 1, 0, 3, 2, 3,
	2, 3, 2, 3, 3, 3, 2, 3, 3, 1,
	2, 2, 3, 3, 4, 4, 4, 4, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	6, 3, 5, 2, 2, 3, 3, 5, 6, 4,
	5, 4, 6, 3, 5, 6, 8, 5, 7,
}

var yyChk = [...]int16{
	-1000, -50, 74, 2, 8, -5, -6, -11, -51, -19,
	-14, -15, -16, -18, -17, -44, -12, -4, -49, 4,
	28, -9, 22, 26, 25, 27, -20, 14, -46, -13,
	-48, -7, -40, -41, -42, -43, -30, -27, -33, -38,
	-35, -32, -31, -45, 36, -1, -47, 69, 62, 63,
	19, 21, 67, 68, 11, 10, 20, 55, 45, 48,
	59, 41, 44, 7, -39, 13, -25, -37, -3, -22,
	12, 38, 46, 39, 35, -11, -51, 4, 28, 71,
	-8, 70, -30, -20, 4, 14, 57, 50, 51, 66,
	65, 52, 53, 56, 58, 45, 42, 43, 48, 59,
	55, 49, 54, -5, 15, -36, -20, 5, 13, 12,
	7, -3, 14, 13, 12, 7, 5, 28, 15, -30,
	-30, 16, 5, -20, -20, -20, -20, -20, -20, -20,
	13, -52, 17, 5, 28, 57, 17, -20, 13, 15,
	-20, -36, -3, 14, -20, -30, 13, -51, -2, -3,
	-4, 14, -20, 23, 4, -20, 4, -20, -20, -20,
	-20, -20, -20, -20, -20, -20, -20, -20, -20, -20,
	-20, -20, -20, -20, -20, 15, 5, 29, 5, -30,
	-20, -21, -10, 16, -52, -20, -30, -30, -36, -20,
	-20, -10, 16, -52, -30, -30, 15, 14, -3, 57,
	29, 40, 16, -30, -2, -20, 28, 17, 17, -20,
	17, -43, 17, -20, 15, 5, 15, 5, -36, -20,
	16, -52, 12, -24, -23, -25, -22, -30, -26, -34,
	12, 31, 32, 33, 30, 37, 13, 55, 39, -2,
	-20, -20, 4, 4, -20, -2, -3, -20, 57, 29,
	17, 29, 5, 16, -52, 16, 57, 5, 5, 17,
	29, 16, -52, 16, 29, -30, -20, -24, -24, -2,
	40, 29, 57, 17, -24, 17, 5, 5, 16, -30,
	17, -24, -24, 12, -2, 4, -20, -2, -20, -2,
	-2, -20, -24, -21, -20, -20, 16, -20, -20, 16,
	-24, 29, 57, -2, -24, -2, -24, -20, -24, 29,
	57, -24, 16, -29, 16, -28, -30, -20, -2, -2,
	-2, 57, 17, 29, 17, 29, -24, -20, -2, 57,
	-24, -20, 5, 16, 40, 57, 29, -2, -20, -21,
	-20, -20, 57, -28, 40, -24, -20, -24, 17, 17,
	-20, -24, 57, -20,
}

var yyDef = [...]int16{
	0, -2, 0, 7, 6, 5, 9, 10, 12, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 1,
	2, 83, 0, 72, 71, 73, 27, 0, 24, 25,
	26, 86, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 0, 0, 0, 0, 0, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 159, 0,
	0, 97, 98, 0, 0, 8, 11, 3, 4, 0,
	87, 0, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 0, 27, 0, 146, 0,
	0, 161, 0, 0, 0, 0, 0, 183, 184, 0,
	99, 0, 0, 0, 65, 66, 67, 68, 69, 70,
	0, 0, 148, 0, 126, 0, 150, 152, 0, 156,
	0, 0, 160, 0, 0, 0, 0, 13, 84, 89,
	90, 0, 0, 0, 0, 0, 0, 0, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 91, 162, 0, 163, 103,
	145, 0, 0, 134, 0, 95, 58, 133, 0, 0,
	0, 0, 142, 0, 141, 181, 185, 0, 186, 0,
	0, 0, 0, 193, 85, 0, 127, 147, 149, 154,
	0, 0, 151, 153, 157, 169, 158, 168, 0, 0,
	124, 0, 0, 0, 28, 29, 30, 31, 32, 33,
	0, 36, 37, 38, 39, 40, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 82, -2, 155, 0, 0,
	128, 146, 94, 129, 0, 136, 0, 166, 167, 137,
	0, 138, 0, 144, 0, 179, 100, 101, 0, 189,
	0, 0, 0, 130, 41, 0, 164, 165, 125, 191,
	0, 0, 35, 0, 74, 0, 0, 78, 0, 80,
	81, 104, 105, 0, 145, 93, 135, 96, 0, 143,
	182, 0, 0, 187, 0, 190, 194, 197, 42, 0,
	0, 43, 34, 0, 53, 48, 44, 0, 76, 77,
	79, 0, 131, 146, 139, 0, 180, 102, 188, 0,
	192, 195, 0, 52, 0, 0, 0, 75, 106, 0,
	0, 198, 0, 49, 0, 51, 45, 46, 132, 140,
	196, 50, 0, 47,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:152
		{
			yylex.(*parser).parseResult = yyDollar[2].aststmts
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:155
		{
			yylex.(*parser).unexpected("", "")
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:160
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:167
		{
			yyVAL.aststmts = plast.Stmts{yyDollar[1].node}
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:171
		{
			yyVAL.aststmts = plast.Stmts{yyDollar[1].node}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:173
		{
			yyVAL.aststmts = plast.Stmts{}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:175
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:209
		{
			yyVAL.node = yyDollar[2].node
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:215
		{
			yyVAL.node = yyDollar[2].node
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:222
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:226
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:230
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:234
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:238
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:245
		{
			yyVAL.node = yylex.(*parser).newListType(yyDollar[4].node)
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:249
		{
			yyVAL.node = yylex.(*parser).newListType(yyDollar[5].node)
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:255
		{
			yyVAL.node = yylex.(*parser).newMapType(yyDollar[3].node, yyDollar[5].node)
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:261
		{
			yyVAL.node = yyDollar[1].node
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:263
		{
			yyVAL.node = yyDollar[1].node
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:265
		{
			yyVAL.node = yyDollar[1].node
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:267
		{
			yyVAL.node = yyDollar[1].node
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:272
		{
			yyVAL.node = yyDollar[1].node
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:275
		{
			yyVAL.node = &ast.Node{}
		}
	case 51:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:277
		{
			yyVAL.node = &ast.Node{}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:279
		{
			yyVAL.node = &ast.Node{}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:281
		{
			yyVAL.node = &ast.Node{}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:298
		{
			yyVAL.node = yyDollar[2].node
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:300
		{
			yyVAL.node = yyDollar[2].node
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:302
		{
			yyVAL.node = yyDollar[2].node
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:304
		{
			yyVAL.node = yyDollar[2].node
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:306
		{
			yyVAL.node = yyDollar[2].node
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:308
		{
			yyVAL.node = yyDollar[2].node
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:312
		{
			yyVAL.node = yylex.(*parser).newBreakStmt(yyDollar[1].item.Pos)
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:316
		{
			yyVAL.node = yylex.(*parser).newContinueStmt(yyDollar[1].item.Pos)
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:320
		{
			yyVAL.node = &ast.Node{}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:329
		{
			yyVAL.node = yylex.(*parser).newForInStmt(yyDollar[2].node, yyDollar[4].node, yyDollar[5].node, yyDollar[1].item, yyDollar[3].item)
		}
	case 75:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:338
		{
			yyVAL.node = &ast.Node{}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:340
		{
			yyVAL.node = &ast.Node{}
		}
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:342
		{
			yyVAL.node = &ast.Node{}
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:344
		{
			yyVAL.node = &ast.Node{}
		}
	case 79:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:346
		{
			yyVAL.node = &ast.Node{}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:348
		{
			yyVAL.node = &ast.Node{}
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:350
		{
			yyVAL.node = &ast.Node{}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:352
		{
			yyVAL.node = &ast.Node{}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:356
		{
			yyVAL.node = yylex.(*parser).newIfElifStmt(yyDollar[1].iflist)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:360
		{
			yyVAL.node = yylex.(*parser).newIfElifelseStmt(yyDollar[1].iflist, yyDollar[2].item, yyDollar[3].node)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:366
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].node)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:370
		{
			yyVAL.iflist = []*plast.IfStmtElem{yyDollar[1].ifitem}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:372
		{
			yyVAL.iflist = append(yyDollar[1].iflist, yyDollar[2].ifitem)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:376
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].node)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:385
		{
			yyVAL.node = yylex.(*parser).newBlockStmt(yyDollar[1].item, yyDollar[2].aststmts, yyDollar[3].item)
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:389
		{
			yyVAL.node = yylex.(*parser).newBlockStmt(yyDollar[1].item, plast.Stmts{}, yyDollar[2].item)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:394
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:399
		{
			yyVAL.nodes = []*plast.Node{yyDollar[1].node}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:401
		{
			yyVAL.nodes = []*plast.Node{yyDollar[1].node}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:409
		{
			yyVAL.node = yylex.(*parser).newVarbDeclStmt(yyDollar[1].item)
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[2].node, nil, nil)
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:414
		{
			yyVAL.node = yylex.(*parser).newVarbDeclStmt(yyDollar[1].item)
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[2].node, nil, yyDollar[4].node)
		}
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:419
		{
			yyVAL.node = yylex.(*parser).newVarbDeclStmt(yyDollar[1].item)
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[2].node, yyDollar[4].node, nil)
		}
	case 102:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:424
		{
			yyVAL.node = yylex.(*parser).newVarbDeclStmt(yyDollar[1].item)
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[2].node, yyDollar[4].node, yyDollar[6].node)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:429
		{
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[3].node, nil, nil)
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:433
		{
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[3].node, nil, yyDollar[5].node)
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:437
		{
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[3].node, yyDollar[5].node, nil)
		}
	case 106:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:441
		{
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:453
		{
			yyVAL.node = yylex.(*parser).newAssignmentExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:457
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:459
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:461
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:463
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:465
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:467
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:469
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:471
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:473
		{
			yyVAL.node = yyDollar[1].node
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:475
		{
			yyVAL.node = yyDollar[1].node
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:477
		{
			yyVAL.node = yyDollar[1].node
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:479
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:481
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:483
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:485
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:487
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:492
		{
			yyVAL.node = yylex.(*parser).newParenExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[3].item)
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:494
		{
			yyVAL.node = yylex.(*parser).newParenExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[4].item)
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:506
		{
			yyVAL.node = &ast.Node{}
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:508
		{
			yyVAL.node = &ast.Node{}
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:510
		{
			yyVAL.node = &ast.Node{}
		}
	case 131:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:513
		{
			yyVAL.node = &ast.Node{}
		}
	case 132:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:515
		{
			yyVAL.node = &ast.Node{}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:518
		{
			yyVAL.node = &ast.Node{}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:521
		{
			yyVAL.node = &ast.Node{}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:523
		{
			yyVAL.node = &ast.Node{}
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:525
		{
			yyVAL.node = &ast.Node{}
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:528
		{
			yyVAL.node = &ast.Node{}
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:530
		{
			yyVAL.node = &ast.Node{}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:533
		{
			yyVAL.node = &ast.Node{}
		}
	case 140:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:535
		{
			yyVAL.node = &ast.Node{}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:538
		{
			yyVAL.node = &ast.Node{}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:541
		{
			yyVAL.node = &ast.Node{}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:543
		{
			yyVAL.node = &ast.Node{}
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:545
		{
			yyVAL.node = &ast.Node{}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:550
		{
			yyVAL.node = nil
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:554
		{
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[3].item.Pos)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:558
		{
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:562
		{
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:566
		{
			yyVAL.node = yylex.(*parser).newListInitStartExpr(yyDollar[1].item.Pos, nil)
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:571
		{
			yyVAL.node = yylex.(*parser).newListInitStartExpr(yyDollar[2].item.Pos, nil)
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[3].item.Pos)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:578
		{
			yyVAL.node = yylex.(*parser).newListInitStartExpr(yyDollar[1].item.Pos, nil)
			yyVAL.node = yylex.(*parser).newListInitAppendExpr(yyVAL.node, yyDollar[2].node)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:583
		{
			yyVAL.node = yylex.(*parser).newListInitStartExpr(yyDollar[2].item.Pos, yyDollar[1].node)
			yyVAL.node = yylex.(*parser).newListInitAppendExpr(yyVAL.node, yyDollar[3].node)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:588
		{
			yyVAL.node = yylex.(*parser).newListInitAppendExpr(yyVAL.node, yyDollar[3].node)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:597
		{
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:601
		{
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[3].item.Pos)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:605
		{
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[3].item.Pos)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:609
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[1].node.LBracePos.Pos, nil)
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[1].node.RBracePos.Pos)
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:614
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[2].node.LBracePos.Pos, yyDollar[1].node)
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[2].node.RBracePos.Pos)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:619
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[2].node.LBracePos.Pos, yyDollar[1].node)
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[2].node.RBracePos.Pos)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:626
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[1].item.Pos, nil)
			// $$ = yylex.(*parser).newMapInitAppendExpr($$, $2, $4)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:631
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[2].node.Pos, yyDollar[1].item)
			// $$ = yylex.(*parser).newMapInitAppendExpr($$, $3, $5)
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:636
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[1].node.Pos, nil)
			// $$ = yylex.(*parser).newMapInitAppendExpr($$, $2, $4)
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:641
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[2].item.Pos, yyDollar[1].node)
			// $$ = yylex.(*parser).newMapInitAppendExpr($$, $3, $5)
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:646
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[1].node.Pos, nil)
			// $$ = yylex.(*parser).newMapInitAppendExpr($$, $2, $4)
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:651
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[2].item.Pos, yyDollar[1].node)
			// $$ = yylex.(*parser).newMapInitAppendExpr($$, $3, $5)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:656
		{
			yyVAL.node = yylex.(*parser).newMapInitAppendExpr(yyDollar[1].node, nil, nil)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:660
		{
			yyVAL.node = yylex.(*parser).newMapInitAppendExpr(yyDollar[1].node, nil, nil)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:680
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, true)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:682
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, false)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:687
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:692
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteMultilineString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:700
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:702
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:708
		{
			yyVAL.node = yylex.(*parser).newNumberLiteral(yyDollar[1].item)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:729
		{
			yyVAL.node = yylex.(*parser).newIdentifier(yyDollar[1].item)
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:733
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newIdentifier(yyDollar[1].item)
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:743
		{
			yyVAL.node = yylex.(*parser).newStructTypeDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[4].node, nil)
		}
	case 180:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:748
		{
			yyVAL.node = yylex.(*parser).newStructTypeDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[4].node, yyDollar[6].node)
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:753
		{
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[3].node, nil)
		}
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:757
		{
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[3].node, yyDollar[5].node)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:765
		{
			yyVAL.node = yyDollar[1].node
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:769
		{
			yyVAL.node = yyDollar[1].node
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:773
		{
			yyVAL.node = yylex.(*parser).newStructTypeDecl(yyDollar[2].node)
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:779
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenReturn(yyDollar[1].node, yyDollar[4].node)
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[5].node)
		}
	case 188:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:784
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenReturn(yyDollar[1].node, yyDollar[5].node)
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[6].node)
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:789
		{
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[4].node)
		}
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:793
		{
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[5].node)
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:799
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, nil, nil)
		}
	case 192:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:804
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, yyDollar[6].node, nil)
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:809
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, nil, nil)
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:813
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, yyDollar[5].node, nil)
		}
	case 195:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:817
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, nil, yyDollar[6].node)
		}
	case 196:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:822
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, yyDollar[6].node, yyDollar[8].node)
		}
	case 197:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:827
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, nil, yyDollar[5].node)
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:831
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	}
	goto yystack /* stack new state and value */
}
