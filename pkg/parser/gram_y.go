// Code generated by goyacc -o gram_y.go gram.y. DO NOT EDIT.

//line gram.y:7
package parser

import __yyfmt__ "fmt"

//line gram.y:7

import (
	plast "github.com/GuanceCloud/platypus/pkg/ast"
	// pltoken "github.com/GuanceCloud/platypus/pkg/token"
)

//line gram.y:16
type yySymType struct {
	yys      int
	aststmts plast.Stmts
	astblock *plast.BlockStmt

	ifitem *plast.IfStmtElem
	iflist []*plast.IfStmtElem
	node   *plast.Node
	nodes  []*plast.Node
	item   Item
}

const SEMICOLON = 57346
const COMMA = 57347
const COMMENT = 57348
const DOT = 57349
const EOF = 57350
const ERROR = 57351
const ID = 57352
const NUMBER = 57353
const LEFT_PAREN = 57354
const LEFT_BRACKET = 57355
const LEFT_BRACE = 57356
const RIGHT_BRACE = 57357
const RIGHT_PAREN = 57358
const RIGHT_BRACKET = 57359
const SPACE = 57360
const STRING = 57361
const QUOTED_STRING = 57362
const MULTILINE_STRING = 57363
const FOR = 57364
const IN = 57365
const WHILE = 57366
const BREAK = 57367
const CONTINUE = 57368
const RETURN = 57369
const EOL = 57370
const COLON = 57371
const STR = 57372
const INT = 57373
const FLOAT = 57374
const BOOL = 57375
const LIST = 57376
const MAP = 57377
const STRUCT = 57378
const ANY = 57379
const LET = 57380
const FN = 57381
const RET_SYMB = 57382
const operatorsStart = 57383
const ADD = 57384
const DIV = 57385
const GTE = 57386
const GT = 57387
const LT = 57388
const LTE = 57389
const MOD = 57390
const MUL = 57391
const NEQ = 57392
const EQ = 57393
const EQEQ = 57394
const SUB = 57395
const operatorsEnd = 57396
const keywordsStart = 57397
const TRUE = 57398
const FALSE = 57399
const IDENTIFIER = 57400
const AND = 57401
const OR = 57402
const NIL = 57403
const NULL = 57404
const IF = 57405
const ELIF = 57406
const ELSE = 57407
const keywordsEnd = 57408
const startSymbolsStart = 57409
const START_STMTS = 57410
const startSymbolsEnd = 57411

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SEMICOLON",
	"COMMA",
	"COMMENT",
	"DOT",
	"EOF",
	"ERROR",
	"ID",
	"NUMBER",
	"LEFT_PAREN",
	"LEFT_BRACKET",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"RIGHT_PAREN",
	"RIGHT_BRACKET",
	"SPACE",
	"STRING",
	"QUOTED_STRING",
	"MULTILINE_STRING",
	"FOR",
	"IN",
	"WHILE",
	"BREAK",
	"CONTINUE",
	"RETURN",
	"EOL",
	"COLON",
	"STR",
	"INT",
	"FLOAT",
	"BOOL",
	"LIST",
	"MAP",
	"STRUCT",
	"ANY",
	"LET",
	"FN",
	"RET_SYMB",
	"operatorsStart",
	"ADD",
	"DIV",
	"GTE",
	"GT",
	"LT",
	"LTE",
	"MOD",
	"MUL",
	"NEQ",
	"EQ",
	"EQEQ",
	"SUB",
	"operatorsEnd",
	"keywordsStart",
	"TRUE",
	"FALSE",
	"IDENTIFIER",
	"AND",
	"OR",
	"NIL",
	"NULL",
	"IF",
	"ELIF",
	"ELSE",
	"keywordsEnd",
	"startSymbolsStart",
	"START_STMTS",
	"startSymbolsEnd",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:695

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 212,
	1, 51,
	4, 51,
	8, 51,
	15, 51,
	28, 51,
	-2, 107,
}

const yyPrivate = 57344

const yyLast = 1149

var yyAct = [...]int16{
	25, 190, 196, 8, 3, 180, 78, 76, 104, 276,
	270, 71, 107, 262, 182, 66, 252, 40, 106, 113,
	257, 113, 222, 80, 110, 112, 110, 112, 91, 94,
	83, 84, 87, 88, 95, 93, 89, 135, 90, 92,
	203, 47, 258, 109, 223, 86, 85, 232, 91, 94,
	118, 133, 103, 122, 95, 93, 105, 250, 51, 92,
	259, 94, 202, 111, 79, 111, 95, 93, 127, 98,
	2, 100, 230, 131, 128, 129, 164, 220, 214, 134,
	216, 72, 137, 108, 139, 140, 141, 142, 143, 144,
	145, 146, 147, 148, 149, 150, 151, 133, 163, 240,
	176, 156, 234, 229, 169, 73, 172, 173, 64, 228,
	189, 181, 183, 184, 230, 230, 188, 130, 65, 120,
	226, 195, 170, 165, 198, 174, 199, 19, 197, 119,
	133, 185, 182, 191, 102, 132, 206, 207, 152, 210,
	115, 162, 121, 64, 168, 101, 171, 112, 126, 175,
	154, 20, 114, 65, 74, 186, 64, 155, 55, 162,
	132, 64, 167, 116, 217, 106, 65, 64, 132, 82,
	193, 65, 16, 125, 123, 166, 16, 65, 99, 124,
	191, 191, 4, 177, 227, 75, 1, 160, 158, 159,
	157, 7, 28, 132, 161, 64, 215, 212, 70, 18,
	153, 236, 237, 238, 30, 65, 162, 162, 205, 243,
	245, 96, 211, 204, 248, 15, 5, 26, 225, 191,
	14, 97, 46, 45, 256, 44, 132, 43, 32, 260,
	191, 48, 191, 34, 261, 50, 191, 35, 191, 39,
	36, 221, 54, 263, 53, 162, 38, 37, 191, 9,
	13, 12, 11, 268, 10, 17, 162, 33, 162, 272,
	178, 21, 162, 273, 162, 132, 191, 212, 212, 132,
	77, 275, 31, 191, 162, 218, 219, 277, 132, 6,
	241, 63, 244, 246, 247, 64, 0, 192, 0, 0,
	0, 0, 162, 253, 0, 65, 0, 0, 0, 162,
	0, 212, 132, 16, 132, 160, 158, 159, 157, 0,
	0, 0, 161, 132, 239, 0, 264, 265, 0, 266,
	0, 0, 132, 0, 0, 249, 0, 251, 269, 0,
	0, 254, 0, 255, 192, 192, 0, 274, 0, 55,
	0, 0, 64, 62, 52, 49, 67, 0, 179, 0,
	0, 58, 65, 59, 0, 0, 0, 0, 0, 0,
	182, 267, 0, 0, 0, 0, 0, 28, 271, 0,
	0, 0, 0, 192, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 16, 192, 69, 192, 0, 56, 57,
	192, 0, 192, 60, 61, 0, 0, 19, 0, 0,
	55, 0, 192, 64, 62, 52, 49, 67, 126, 0,
	0, 0, 58, 65, 59, 22, 0, 0, 24, 23,
	192, 20, 0, 0, 0, 0, 0, 192, 28, 27,
	0, 29, 41, 0, 0, 68, 0, 91, 94, 83,
	84, 87, 88, 95, 93, 89, 69, 90, 92, 56,
	57, 0, 0, 0, 60, 61, 42, 19, 0, 0,
	55, 0, 0, 64, 62, 52, 49, 67, 0, 0,
	0, 0, 58, 65, 59, 22, 0, 0, 24, 23,
	0, 20, 0, 0, 0, 0, 0, 0, 28, 27,
	0, 29, 41, 0, 0, 68, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 56,
	57, 0, 0, 0, 60, 61, 42, 55, 0, 0,
	64, 62, 52, 49, 67, 0, 0, 0, 0, 58,
	65, 59, 22, 0, 0, 24, 23, 0, 0, 0,
	0, 0, 0, 0, 0, 28, 27, 0, 29, 41,
	0, 0, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 56, 57, 0, 0,
	0, 60, 61, 42, 208, 0, 0, 55, 0, 0,
	64, 62, 52, 49, 67, 0, 0, 0, 0, 58,
	65, 59, 0, 0, 55, 0, 0, 64, 62, 52,
	49, 67, 194, 0, 0, 28, 58, 65, 59, 0,
	0, 0, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 28, 69, 0, 0, 56, 57, 0, 68,
	0, 60, 61, 0, 133, 0, 0, 0, 0, 0,
	69, 0, 0, 56, 57, 0, 0, 55, 60, 61,
	64, 62, 52, 49, 67, 0, 0, 187, 0, 58,
	65, 59, 91, 94, 83, 84, 87, 88, 95, 93,
	89, 0, 90, 92, 0, 28, 0, 0, 0, 86,
	85, 0, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 56, 57, 0, 0,
	138, 60, 61, 55, 0, 0, 64, 62, 52, 49,
	67, 0, 0, 0, 0, 58, 65, 59, 0, 0,
	55, 0, 0, 64, 62, 52, 49, 67, 126, 0,
	0, 28, 58, 65, 59, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 28, 69,
	242, 0, 56, 57, 0, 68, 0, 60, 61, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 56,
	57, 0, 0, 55, 60, 61, 64, 62, 52, 49,
	67, 0, 0, 117, 0, 58, 65, 59, 91, 94,
	83, 84, 87, 88, 95, 93, 89, 0, 90, 92,
	0, 28, 0, 0, 0, 86, 85, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 56, 57, 0, 0, 81, 60, 61, 55,
	0, 0, 64, 62, 52, 49, 67, 0, 0, 0,
	0, 58, 65, 59, 0, 0, 55, 0, 0, 64,
	62, 52, 49, 67, 0, 0, 0, 28, 58, 65,
	59, 0, 0, 0, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 28, 69, 0, 0, 56, 57,
	0, 68, 0, 60, 61, 0, 0, 0, 0, 235,
	0, 0, 69, 0, 0, 56, 57, 0, 0, 55,
	60, 61, 64, 62, 52, 49, 213, 0, 0, 0,
	0, 58, 65, 59, 91, 94, 83, 84, 87, 88,
	95, 93, 89, 0, 90, 92, 0, 28, 0, 0,
	0, 86, 85, 0, 68, 0, 0, 0, 0, 0,
	0, 0, 200, 0, 0, 69, 0, 0, 56, 57,
	0, 0, 0, 60, 61, 91, 94, 83, 84, 87,
	88, 95, 93, 89, 233, 90, 92, 0, 0, 0,
	0, 231, 86, 85, 0, 0, 0, 91, 94, 83,
	84, 87, 88, 95, 93, 89, 0, 90, 92, 0,
	224, 0, 0, 0, 86, 85, 91, 94, 83, 84,
	87, 88, 95, 93, 89, 209, 90, 92, 0, 0,
	0, 0, 0, 86, 85, 91, 94, 83, 84, 87,
	88, 95, 93, 89, 0, 90, 92, 0, 0, 0,
	0, 0, 86, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 94, 83, 84, 87, 88, 95,
	93, 89, 201, 90, 92, 136, 0, 0, 0, 0,
	86, 85, 0, 0, 0, 91, 94, 83, 84, 87,
	88, 95, 93, 89, 0, 90, 92, 0, 0, 0,
	0, 0, 86, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 94, 83, 84, 87, 88, 95,
	93, 89, 0, 90, 92, 0, 0, 0, 0, 0,
	86, 85, 91, 94, 83, 84, 87, 88, 95, 93,
	89, 0, 90, 92, 0, 0, 0, 0, 0, 86,
	85, 91, 94, 83, 84, 87, 88, 95, 93, 89,
	0, 90, 92, 0, 0, 0, 0, 0, 86,
}

var yyPact = [...]int16{
	2, 174, 453, -1000, -1000, -1000, 510, 123, 77, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 140, 180, -1000, -1000,
	-1000, -58, 822, -1000, -1000, 1070, 206, 98, 165, 98,
	129, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1,
	5, 98, 839, -1000, -1000, -1000, -1000, 12, 135, 766,
	114, -1000, 839, -1000, -1000, 161, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 168, -1000, -1000, 160, 713, -1000, -1000,
	123, 77, -1000, -1000, 839, 98, 116, -1000, 839, 14,
	1051, 696, 140, 839, 839, 839, 839, 839, 839, 839,
	839, 839, 839, 839, 839, 839, 185, -1000, 136, 275,
	47, 83, 146, 839, 151, 839, 839, 151, 88, 620,
	332, 839, 839, 151, -1000, 640, -1000, 157, 1070, -1000,
	587, -1000, -14, 839, -1000, 839, -1000, 913, 77, 1023,
	11, -1000, -1000, 393, 620, 839, 570, 1001, 892, 6,
	6, 1089, 395, 6, 6, 6, 6, 18, 18, -1000,
	-1000, -1000, 49, -1000, 133, -1000, 63, -1000, -1000, -1000,
	-1000, -1000, -1000, 839, 157, 157, -1000, 37, -7, 1070,
	152, 134, 1070, 973, 152, 134, 98, -1000, 104, -1000,
	87, 1070, -1000, 1070, 954, 152, 134, -1000, 1070, -1000,
	-1000, -1000, -1000, 30, -1000, 935, -1000, 86, 872, 1070,
	839, 839, 839, 157, 84, -1000, 620, 746, 892, 892,
	620, -1000, -1000, 393, 157, 28, 157, 1070, -35, 116,
	157, -1000, 157, 839, -1000, -9, -1000, 44, 839, -1000,
	-1000, -1000, 157, 839, -1000, -1000, 1070, 1070, 1070, -38,
	-1000, -1000, 892, 620, -1000, 620, -1000, -1000, 913, -1000,
	157, -1000, 839, -1000, 116, -41, 1070, 157, 839, -1000,
	1070, 1070, 839, 620, -1000, -1000, -1000, -1000, 1070, -1000,
	839, -42, 1070, 1070, -1000, 1070, 839, 1070,
}

var yyPgo = [...]int16{
	0, 281, 73, 58, 213, 279, 272, 270, 261, 260,
	191, 257, 255, 254, 252, 251, 250, 249, 247, 169,
	15, 1, 110, 41, 246, 244, 242, 240, 17, 239,
	0, 237, 235, 233, 231, 228, 227, 225, 223, 222,
	220, 217, 215, 204, 199, 186, 3, 5,
}

var yyR1 = [...]int8{
	0, 46, 46, 46, 46, 45, 45, 45, 4, 4,
	4, 5, 5, 5, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 40, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 16, 15, 13, 14, 14, 14,
	14, 14, 14, 14, 14, 17, 17, 6, 8, 8,
	7, 2, 2, 3, 18, 18, 18, 18, 9, 9,
	9, 24, 24, 12, 12, 12, 12, 12, 12, 11,
	11, 11, 25, 25, 25, 25, 25, 25, 25, 25,
	26, 26, 26, 26, 26, 27, 27, 47, 47, 28,
	28, 28, 29, 29, 29, 29, 29, 29, 33, 33,
	33, 34, 34, 34, 34, 31, 31, 31, 32, 32,
	32, 32, 35, 35, 35, 35, 35, 36, 36, 37,
	37, 38, 38, 39, 39, 23, 23, 1, 1, 22,
	22, 22, 21, 21, 21, 21, 21, 21, 20, 19,
	41, 41, 41, 41, 42, 42, 42, 44, 44, 44,
	44, 43, 43, 43, 43, 43, 43, 43, 43,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 2, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 5, 7, 6, 6,
	5, 6, 5, 5, 4, 1, 3, 3, 1, 2,
	3, 1, 3, 2, 4, 3, 5, 4, 3, 2,
	1, 1, 1, 2, 4, 6, 3, 5, 7, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 1, 2, 4,
	4, 4, 3, 3, 3, 3, 3, 3, 2, 3,
	2, 2, 3, 3, 2, 2, 3, 1, 4, 5,
	5, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	4, 6, 3, 5, 2, 3, 3, 5, 6, 3,
	4, 4, 6, 3, 5, 6, 8, 5, 7,
}

var yyChk = [...]int16{
	-1000, -45, 68, 2, 8, -4, -5, -10, -46, -17,
	-13, -14, -15, -16, -40, -42, -19, -12, -44, 4,
	28, -8, 22, 26, 25, -30, -41, 36, 35, 38,
	-43, -6, -35, -11, -33, -31, -27, -18, -24, -29,
	-28, 39, 63, -36, -37, -38, -39, -23, -34, 13,
	-32, -3, 12, -25, -26, 7, 56, 57, 19, 21,
	61, 62, 11, -1, 10, 20, -20, 14, 42, 53,
	-10, -46, 4, 28, 14, 5, 65, -7, 64, -23,
	-30, 4, -19, 44, 45, 60, 59, 46, 47, 50,
	52, 42, 53, 49, 43, 48, 5, 15, -23, 13,
	-23, 16, 5, 51, 7, 51, 13, 7, -23, -30,
	12, 51, 13, 7, 17, 5, 28, 17, -30, 15,
	5, 28, -30, 13, 11, 13, 15, -30, -46, -30,
	-23, -2, -3, 14, -30, 23, 4, -30, 4, -30,
	-30, -30, -30, -30, -30, -30, -30, -30, -30, -30,
	-30, -30, -23, 15, 14, -3, -21, 33, 31, 32,
	30, 37, -23, 51, 29, 40, -2, 16, -23, -30,
	-28, -23, -30, -30, -28, -23, 12, -2, -9, 16,
	-47, -30, 28, -30, -30, -28, -23, 17, -30, -22,
	-21, -20, -19, 13, 15, -30, 16, -47, -30, -30,
	29, 29, 51, 29, -4, -2, -30, -30, 4, 4,
	-30, -2, -3, 14, 29, -23, 17, -30, -22, -22,
	40, -2, 29, 51, 17, -23, 16, -47, 5, 16,
	28, 17, 17, 29, 16, 17, -30, -30, -30, -22,
	15, -2, 4, -30, -2, -30, -2, -2, -30, -22,
	29, -22, 51, -2, -22, -22, -30, 29, 51, 16,
	-30, -30, 51, -30, -2, -2, -2, -22, -30, -2,
	51, -22, -30, -30, -2, -30, 51, -30,
}

var yyDef = [...]int16{
	0, -2, 0, 7, 6, 5, 9, 10, 12, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 1,
	2, 45, 0, 35, 34, 24, 0, 0, 0, 0,
	0, 48, 25, 26, 27, 28, 29, 30, 31, 32,
	33, 0, 0, 112, 113, 114, 115, 116, 0, 0,
	0, 107, 0, 61, 62, 0, 117, 118, 119, 120,
	121, 122, 123, 0, 125, 126, 0, 0, 127, 128,
	8, 11, 3, 4, 0, 0, 0, 49, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 0, 0,
	63, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 0, 104, 100, 101, 105,
	0, 111, 0, 0, 124, 0, 53, 0, 13, 0,
	66, 46, 51, 0, 0, 0, 0, 0, 0, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
	83, 84, 142, 145, 0, 146, 0, 132, 133, 134,
	135, 136, 137, 0, 0, 0, 149, 0, 153, 70,
	96, 97, 69, 0, 94, 95, 0, 47, 0, 55,
	0, 60, 87, 71, 0, 92, 93, 99, 103, 138,
	129, 130, 131, 0, 106, 0, 85, 0, 0, 102,
	0, 0, 0, 0, 0, 50, 0, 0, 0, 0,
	0, 44, -2, 0, 0, 140, 0, 64, 0, 0,
	0, 150, 0, 0, 91, 151, 54, 0, 59, 57,
	88, 89, 0, 0, 86, 90, 108, 109, 67, 0,
	52, 36, 0, 0, 42, 0, 40, 43, 24, 143,
	0, 139, 0, 147, 0, 154, 157, 0, 0, 56,
	58, 110, 0, 0, 38, 41, 39, 141, 65, 148,
	0, 152, 155, 68, 37, 158, 0, 156,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:139
		{
			yylex.(*parser).parseResult = yyDollar[2].aststmts
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:142
		{
			yylex.(*parser).unexpected("", "")
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:147
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:154
		{
			yyVAL.aststmts = plast.Stmts{yyDollar[1].node}
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:158
		{
			yyVAL.aststmts = plast.Stmts{yyDollar[1].node}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:160
		{
			yyVAL.aststmts = plast.Stmts{}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:162
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:190
		{
			yyVAL.node = yylex.(*parser).newBreakStmt(yyDollar[1].item.Pos)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:194
		{
			yyVAL.node = yylex.(*parser).newContinueStmt(yyDollar[1].item.Pos)
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:203
		{
			yyVAL.node = yylex.(*parser).newForInStmt(yyDollar[2].node, yyDollar[4].node, yyDollar[5].astblock, yyDollar[1].item, yyDollar[3].item)
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:214
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, yyDollar[4].node, yyDollar[6].node, yyDollar[7].astblock)
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:216
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, yyDollar[4].node, nil, yyDollar[6].astblock)
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:218
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, yyDollar[3].node, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:220
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, yyDollar[3].node, nil, yyDollar[5].astblock)
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:223
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, nil, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:225
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, nil, nil, yyDollar[5].astblock)
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:227
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, nil, yyDollar[4].node, yyDollar[5].astblock)
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:229
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, nil, nil, yyDollar[4].astblock)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:233
		{
			yyVAL.node = yylex.(*parser).newIfElifStmt(yyDollar[1].iflist)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:237
		{
			yyVAL.node = yylex.(*parser).newIfElifelseStmt(yyDollar[1].iflist, yyDollar[2].item, yyDollar[3].astblock)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:243
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:247
		{
			yyVAL.iflist = []*plast.IfStmtElem{yyDollar[1].ifitem}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:249
		{
			yyVAL.iflist = append(yyDollar[1].iflist, yyDollar[2].ifitem)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:253
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:259
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, yyDollar[2].aststmts, yyDollar[3].item)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:263
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, plast.Stmts{}, yyDollar[2].item)
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:268
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, yyDollar[3].nodes, yyDollar[2].item, yyDollar[4].item)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:272
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, nil, yyDollar[2].item, yyDollar[3].item)
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:276
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, yyDollar[3].nodes, yyDollar[2].item, yyDollar[5].item)
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:280
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, nil, yyDollar[2].item, yyDollar[4].item)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:287
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:292
		{
			yyVAL.nodes = []*plast.Node{yyDollar[1].node}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:299
		{
			yyVAL.node = yylex.(*parser).newVarbDeclStmt(yyDollar[1].item)
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[2].node, nil, nil)
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:304
		{
			yyVAL.node = yylex.(*parser).newVarbDeclStmt(yyDollar[1].item)
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[2].node, nil, yyDollar[4].node)
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:309
		{
			yyVAL.node = yylex.(*parser).newVarbDeclStmt(yyDollar[1].item)
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[2].node, yyDollar[4].node, yyDollar[6].node)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:314
		{
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[3].node, nil, nil)
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:318
		{
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[3].node, nil, yyDollar[5].node)
		}
	case 68:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:322
		{
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:329
		{
			yyVAL.node = yylex.(*parser).newAssignmentExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:331
		{
			yyVAL.node = yylex.(*parser).newAssignmentExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:333
		{
			yyVAL.node = yylex.(*parser).newAssignmentExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:337
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:339
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:341
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:343
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:345
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:347
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:349
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:351
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:356
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:358
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:360
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:362
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:364
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:369
		{
			yyVAL.node = yylex.(*parser).newParenExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[3].item)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:371
		{
			yyVAL.node = yylex.(*parser).newParenExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[4].item)
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:380
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].item)
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:383
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(nil, yyDollar[2].item, yyDollar[3].node, yyDollar[4].item)
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:385
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].item)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:392
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:396
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:400
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:404
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:408
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:412
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:419
		{
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:423
		{
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:427
		{
			yyVAL.node = yylex.(*parser).newListInitStartExpr(yyDollar[1].item.Pos, nil)
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:434
		{
			yyVAL.node = yylex.(*parser).newListInitStartExpr(yyDollar[1].item.Pos, nil)
			yyVAL.node = yylex.(*parser).newListInitAppendExpr(yyVAL.node, yyDollar[2].node)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:439
		{
			yyVAL.node = yylex.(*parser).newListInitStartExpr(yyDollar[2].item.Pos, yyDollar[1].node)
			yyVAL.node = yylex.(*parser).newListInitAppendExpr(yyVAL.node, yyDollar[3].node)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:444
		{
			yyVAL.node = yylex.(*parser).newListInitAppendExpr(yyVAL.node, yyDollar[3].node)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:452
		{
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:456
		{
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[3].item.Pos)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:460
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[1].astblock.LBracePos.Pos, nil)
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[1].astblock.RBracePos.Pos)
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:467
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[1].item.Pos, nil)
			yyVAL.node = yylex.(*parser).newMapInitAppendExpr(yyVAL.node, yyDollar[2].node, yyDollar[4].node)
		}
	case 109:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:472
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[2].item.Pos, yyDollar[1].node)
			yyVAL.node = yylex.(*parser).newMapInitAppendExpr(yyVAL.node, yyDollar[3].node, yyDollar[5].node)
		}
	case 110:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:477
		{
			yyVAL.node = yylex.(*parser).newMapInitAppendExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:498
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, true)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:500
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, false)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:505
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:510
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteMultilineString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:518
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:520
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:526
		{
			yyVAL.node = yylex.(*parser).newNumberLiteral(yyDollar[1].item)
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:528
		{
			num := yylex.(*parser).newNumberLiteral(yyDollar[2].item)
			switch yyDollar[1].item.Typ {
			case ADD: // pass
			case SUB:
				if num.NodeType == plast.TypeFloatLiteral {
					num.FloatLiteral.Val = -num.FloatLiteral.Val
					num.FloatLiteral.Start = yylex.(*parser).posCache.LnCol(yyDollar[1].item.Pos)
				} else {
					num.IntegerLiteral.Val = -num.IntegerLiteral.Val
					num.IntegerLiteral.Start = yylex.(*parser).posCache.LnCol(yyDollar[1].item.Pos)

				}
			}
			yyVAL.node = num
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:547
		{
			yyVAL.node = yylex.(*parser).newIdentifier(yyDollar[1].item)
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:551
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newIdentifier(yyDollar[1].item)
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:564
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:568
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:572
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:576
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:580
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:584
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].node.Identifier.Name, 0)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:591
		{
			yyVAL.node = yylex.(*parser).newListType(yyDollar[3].node)
		}
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:597
		{
			yyVAL.node = yylex.(*parser).newMapType(yyDollar[3].node, yyDollar[5].node)
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:604
		{
			yyVAL.node = yylex.(*parser).newStructTypeDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[4].node, nil)
		}
	case 141:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:609
		{
			yyVAL.node = yylex.(*parser).newStructTypeDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[4].node, yyDollar[6].node)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:614
		{
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[3].node, nil)
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:618
		{
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[3].node, yyDollar[5].node)
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:625
		{
			yyVAL.node = yyDollar[1].node
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:629
		{
			yyVAL.node = yyDollar[1].node
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:633
		{
			yyVAL.node = yylex.(*parser).newStructTypeDecl(yyDollar[2].node)
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:639
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenReturn(yyDollar[1].node, yyDollar[4].node)
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[5].astblock)
		}
	case 148:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:644
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenReturn(yyDollar[1].node, yyDollar[5].node)
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[6].astblock)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:649
		{
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[3].astblock)
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:653
		{
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[4].astblock)
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:659
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, nil, nil)
		}
	case 152:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:664
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, yyDollar[6].node, nil)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:669
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, nil, nil)
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:673
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, yyDollar[5].node, nil)
		}
	case 155:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:677
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, nil, yyDollar[6].node)
		}
	case 156:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:682
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, yyDollar[6].node, yyDollar[8].node)
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:687
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, nil, yyDollar[5].node)
		}
	case 158:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:691
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	}
	goto yystack /* stack new state and value */
}
