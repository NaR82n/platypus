// Code generated by goyacc -o gram_y.go gram.y. DO NOT EDIT.

//line gram.y:7
package parser

import __yyfmt__ "fmt"

//line gram.y:7

import (
	plast "github.com/GuanceCloud/platypus/pkg/ast"
	// pltoken "github.com/GuanceCloud/platypus/pkg/token"
)

//line gram.y:16
type yySymType struct {
	yys      int
	aststmts plast.Stmts
	astblock *plast.BlockStmt

	ifitem *plast.IfStmtElem
	iflist []*plast.IfStmtElem
	node   *plast.Node
	nodes  []*plast.Node
	item   Item
}

const SEMICOLON = 57346
const COMMA = 57347
const COMMENT = 57348
const DOT = 57349
const EOF = 57350
const ERROR = 57351
const ID = 57352
const NUMBER = 57353
const LEFT_PAREN = 57354
const LEFT_BRACKET = 57355
const LEFT_BRACE = 57356
const RIGHT_BRACE = 57357
const RIGHT_PAREN = 57358
const RIGHT_BRACKET = 57359
const SPACE = 57360
const STRING = 57361
const QUOTED_STRING = 57362
const MULTILINE_STRING = 57363
const FOR = 57364
const IN = 57365
const WHILE = 57366
const BREAK = 57367
const CONTINUE = 57368
const RETURN = 57369
const EOL = 57370
const COLON = 57371
const STR = 57372
const INT = 57373
const FLOAT = 57374
const BOOL = 57375
const LIST = 57376
const MAP = 57377
const STRUCT = 57378
const ANY = 57379
const LET = 57380
const FN = 57381
const RET_SYMB = 57382
const BitwiseAND = 57383
const operatorsStart = 57384
const ADD = 57385
const DIV = 57386
const GTE = 57387
const GT = 57388
const LT = 57389
const LTE = 57390
const MOD = 57391
const MUL = 57392
const NEQ = 57393
const EQ = 57394
const EQEQ = 57395
const SUB = 57396
const operatorsEnd = 57397
const keywordsStart = 57398
const TRUE = 57399
const FALSE = 57400
const IDENTIFIER = 57401
const AND = 57402
const OR = 57403
const NIL = 57404
const NULL = 57405
const IF = 57406
const ELIF = 57407
const ELSE = 57408
const keywordsEnd = 57409
const startSymbolsStart = 57410
const START_STMTS = 57411
const startSymbolsEnd = 57412

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SEMICOLON",
	"COMMA",
	"COMMENT",
	"DOT",
	"EOF",
	"ERROR",
	"ID",
	"NUMBER",
	"LEFT_PAREN",
	"LEFT_BRACKET",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"RIGHT_PAREN",
	"RIGHT_BRACKET",
	"SPACE",
	"STRING",
	"QUOTED_STRING",
	"MULTILINE_STRING",
	"FOR",
	"IN",
	"WHILE",
	"BREAK",
	"CONTINUE",
	"RETURN",
	"EOL",
	"COLON",
	"STR",
	"INT",
	"FLOAT",
	"BOOL",
	"LIST",
	"MAP",
	"STRUCT",
	"ANY",
	"LET",
	"FN",
	"RET_SYMB",
	"BitwiseAND",
	"operatorsStart",
	"ADD",
	"DIV",
	"GTE",
	"GT",
	"LT",
	"LTE",
	"MOD",
	"MUL",
	"NEQ",
	"EQ",
	"EQEQ",
	"SUB",
	"operatorsEnd",
	"keywordsStart",
	"TRUE",
	"FALSE",
	"IDENTIFIER",
	"AND",
	"OR",
	"NIL",
	"NULL",
	"IF",
	"ELIF",
	"ELSE",
	"keywordsEnd",
	"startSymbolsStart",
	"START_STMTS",
	"startSymbolsEnd",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:839

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 250,
	1, 80,
	4, 80,
	8, 80,
	15, 80,
	28, 80,
	-2, 146,
}

const yyPrivate = 57344

const yyLast = 1437

var yyAct = [...]int16{
	25, 312, 169, 126, 85, 8, 50, 31, 3, 86,
	142, 31, 30, 75, 40, 345, 30, 81, 79, 331,
	336, 111, 324, 83, 314, 305, 260, 110, 101, 297,
	130, 68, 338, 123, 113, 329, 32, 209, 117, 319,
	32, 101, 330, 114, 116, 119, 296, 122, 306, 261,
	241, 320, 124, 125, 253, 132, 82, 135, 96, 99,
	139, 105, 106, 72, 100, 98, 109, 136, 252, 97,
	342, 143, 99, 240, 73, 2, 120, 100, 98, 112,
	145, 176, 150, 267, 76, 153, 279, 274, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 170, 206, 175, 149, 309, 285, 77, 149,
	181, 182, 146, 186, 205, 193, 195, 196, 192, 149,
	201, 183, 203, 187, 287, 55, 185, 197, 189, 208,
	200, 258, 199, 101, 212, 177, 171, 210, 173, 219,
	138, 282, 180, 221, 302, 184, 278, 188, 194, 218,
	58, 198, 244, 245, 31, 248, 205, 110, 205, 30,
	101, 95, 102, 96, 99, 87, 88, 91, 92, 100,
	98, 93, 104, 94, 97, 19, 255, 144, 228, 133,
	90, 89, 121, 32, 43, 103, 202, 44, 68, 59,
	54, 70, 265, 191, 264, 140, 64, 45, 65, 20,
	4, 266, 111, 263, 113, 129, 44, 254, 110, 128,
	228, 228, 71, 205, 275, 129, 45, 1, 52, 117,
	72, 127, 276, 44, 114, 116, 119, 51, 141, 224,
	7, 73, 129, 45, 62, 63, 271, 74, 327, 66,
	67, 283, 269, 228, 44, 222, 78, 288, 290, 328,
	311, 17, 293, 170, 45, 294, 31, 44, 29, 231,
	237, 30, 301, 44, 115, 228, 303, 45, 304, 179,
	226, 44, 228, 45, 15, 228, 172, 235, 232, 233,
	234, 45, 71, 26, 236, 32, 239, 228, 315, 108,
	114, 116, 228, 43, 228, 227, 44, 238, 322, 14,
	107, 49, 226, 226, 117, 48, 45, 326, 228, 114,
	116, 119, 217, 228, 242, 332, 313, 5, 57, 47,
	151, 170, 216, 334, 34, 335, 147, 227, 227, 337,
	228, 340, 53, 37, 56, 226, 117, 343, 38, 228,
	230, 114, 116, 119, 39, 61, 346, 60, 41, 35,
	310, 118, 36, 229, 225, 9, 13, 226, 12, 11,
	227, 313, 10, 228, 226, 228, 16, 226, 18, 190,
	21, 80, 228, 33, 6, 69, 0, 137, 0, 226,
	0, 0, 227, 0, 226, 0, 226, 0, 0, 227,
	0, 0, 227, 0, 0, 0, 0, 0, 148, 0,
	226, 118, 0, 0, 227, 226, 256, 257, 0, 227,
	0, 227, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 0, 174, 227, 148, 0, 0, 0,
	227, 226, 0, 0, 178, 0, 0, 0, 0, 273,
	0, 148, 118, 0, 0, 0, 0, 227, 0, 204,
	0, 0, 0, 0, 0, 226, 227, 226, 0, 0,
	0, 280, 0, 0, 226, 0, 0, 0, 281, 148,
	0, 284, 0, 250, 0, 0, 215, 243, 0, 0,
	227, 249, 227, 295, 101, 0, 214, 0, 299, 227,
	300, 0, 0, 0, 0, 0, 0, 0, 148, 0,
	213, 0, 0, 0, 307, 0, 259, 0, 0, 308,
	0, 0, 95, 118, 96, 99, 87, 88, 91, 92,
	100, 98, 93, 0, 94, 97, 321, 0, 0, 0,
	0, 90, 89, 0, 0, 325, 43, 0, 0, 44,
	68, 59, 54, 70, 0, 0, 131, 0, 64, 45,
	65, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 341, 0, 148, 71, 250, 250, 148, 344, 0,
	52, 286, 72, 289, 291, 292, 148, 0, 0, 51,
	0, 130, 0, 73, 298, 0, 62, 63, 0, 0,
	0, 66, 67, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 250, 148, 0, 148,
	0, 0, 0, 0, 316, 317, 0, 318, 148, 0,
	0, 0, 19, 0, 0, 43, 323, 0, 44, 68,
	59, 54, 70, 141, 148, 0, 0, 64, 45, 65,
	22, 0, 333, 24, 23, 0, 20, 0, 0, 0,
	0, 0, 0, 71, 27, 0, 28, 42, 0, 52,
	0, 72, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 0, 73, 0, 0, 62, 63, 0, 0, 0,
	66, 67, 46, 19, 0, 0, 43, 0, 0, 44,
	68, 59, 54, 70, 0, 0, 0, 0, 64, 45,
	65, 22, 0, 0, 24, 23, 0, 20, 0, 0,
	0, 0, 0, 0, 71, 27, 0, 28, 42, 0,
	52, 0, 72, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 0, 73, 0, 0, 62, 63, 0, 0,
	0, 66, 67, 46, 43, 0, 0, 44, 68, 59,
	54, 70, 0, 0, 0, 0, 64, 45, 65, 22,
	0, 0, 24, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 27, 0, 28, 42, 0, 52, 0,
	72, 0, 0, 0, 0, 0, 0, 51, 0, 0,
	0, 73, 0, 0, 62, 63, 0, 0, 0, 66,
	67, 46, 246, 0, 0, 43, 0, 0, 44, 68,
	59, 54, 70, 0, 0, 0, 0, 64, 45, 65,
	0, 0, 0, 43, 0, 0, 44, 68, 59, 54,
	70, 141, 0, 71, 0, 64, 45, 65, 0, 52,
	0, 72, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 71, 73, 0, 0, 62, 63, 52, 0, 72,
	66, 67, 101, 0, 0, 0, 51, 0, 0, 0,
	73, 0, 0, 62, 63, 0, 0, 43, 66, 67,
	44, 68, 59, 54, 70, 0, 0, 211, 0, 64,
	45, 65, 96, 99, 87, 88, 91, 92, 100, 98,
	93, 0, 94, 97, 0, 71, 0, 0, 0, 0,
	0, 52, 0, 72, 0, 0, 0, 0, 0, 0,
	51, 0, 0, 0, 73, 0, 0, 62, 63, 0,
	0, 43, 66, 67, 44, 68, 59, 54, 70, 0,
	0, 207, 0, 64, 45, 65, 154, 0, 0, 43,
	0, 0, 44, 68, 59, 54, 70, 0, 0, 71,
	0, 64, 45, 65, 0, 52, 0, 72, 0, 0,
	0, 0, 0, 0, 51, 0, 0, 71, 73, 0,
	0, 62, 63, 52, 0, 72, 66, 67, 0, 0,
	0, 0, 51, 0, 0, 0, 73, 0, 0, 62,
	63, 0, 0, 43, 66, 67, 44, 68, 59, 54,
	70, 134, 0, 0, 0, 64, 45, 65, 84, 0,
	0, 43, 0, 0, 44, 68, 59, 54, 70, 0,
	0, 71, 0, 64, 45, 65, 0, 52, 0, 72,
	0, 0, 0, 0, 0, 0, 51, 0, 0, 71,
	73, 0, 0, 62, 63, 52, 0, 72, 66, 67,
	0, 0, 0, 0, 51, 0, 0, 0, 73, 0,
	0, 62, 63, 0, 0, 43, 66, 67, 44, 68,
	59, 54, 70, 0, 0, 0, 0, 64, 45, 65,
	0, 0, 0, 43, 0, 0, 44, 68, 59, 54,
	251, 0, 0, 71, 0, 64, 45, 65, 0, 52,
	0, 72, 0, 0, 0, 223, 0, 0, 51, 0,
	0, 71, 73, 101, 0, 62, 63, 52, 0, 72,
	66, 67, 0, 0, 0, 0, 51, 0, 277, 213,
	73, 0, 0, 62, 63, 0, 101, 0, 66, 67,
	0, 95, 0, 96, 99, 87, 88, 91, 92, 100,
	98, 93, 213, 94, 97, 270, 0, 0, 0, 0,
	90, 89, 0, 101, 95, 0, 96, 99, 87, 88,
	91, 92, 100, 98, 93, 0, 94, 97, 0, 213,
	0, 0, 0, 90, 89, 0, 0, 101, 0, 0,
	220, 95, 0, 96, 99, 87, 88, 91, 92, 100,
	98, 93, 129, 94, 97, 0, 0, 0, 101, 149,
	90, 89, 0, 0, 0, 95, 0, 96, 99, 87,
	88, 91, 92, 100, 98, 93, 0, 94, 97, 101,
	0, 0, 0, 272, 90, 89, 95, 0, 96, 99,
	87, 88, 91, 92, 100, 98, 93, 0, 94, 97,
	101, 0, 0, 0, 268, 90, 89, 95, 0, 96,
	99, 87, 88, 91, 92, 100, 98, 93, 0, 94,
	97, 101, 0, 0, 0, 262, 90, 89, 95, 0,
	96, 99, 87, 88, 91, 92, 100, 98, 93, 0,
	94, 97, 0, 0, 0, 101, 0, 90, 89, 95,
	0, 96, 99, 87, 88, 91, 92, 100, 98, 93,
	0, 94, 97, 247, 0, 0, 0, 0, 90, 89,
	0, 0, 101, 95, 0, 96, 99, 87, 88, 91,
	92, 100, 98, 93, 152, 94, 97, 0, 0, 0,
	0, 0, 90, 101, 0, 0, 0, 0, 0, 0,
	95, 0, 96, 99, 87, 88, 91, 92, 100, 98,
	93, 0, 94, 97, 101, 0, 0, 0, 0, 90,
	89, 95, 0, 96, 99, 87, 88, 91, 92, 100,
	98, 93, 0, 94, 97, 101, 0, 0, 0, 0,
	90, 89, 95, 0, 96, 99, 87, 88, 91, 92,
	100, 98, 93, 0, 94, 97, 0, 0, 0, 0,
	0, 90, 89, 95, 0, 96, 99, 87, 88, 91,
	92, 100, 98, 93, 0, 94, 97,
}

var yyPact = [...]int16{
	6, 192, 679, -1000, -1000, -1000, 737, 171, 80, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 241, -1000, -1000, -1000,
	-1000, -48, 1014, -1000, -1000, 1361, 157, 196, 196, 284,
	14, 27, 212, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 196, 169, -1000, -1000, 1068, -1000, -1000, -1000,
	-1000, 1068, 1068, 204, 529, 166, 996, -1000, 126, 1068,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 184,
	816, 164, -1000, -1000, 171, 80, -1000, -1000, 196, 105,
	-1000, 1068, 297, 1340, 942, 197, 195, 1068, 1068, 1068,
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
	1068, 1068, 261, -1000, -1000, 124, 52, 95, 253, 1068,
	1068, 286, 1068, 286, 177, 1068, 1068, 286, -1000, 816,
	174, 1068, 1205, 329, 147, 849, 86, -1000, 924, -1000,
	20, -1000, 1361, 870, -1000, 471, 307, -1000, 816, 1184,
	-1000, -1000, 240, 1110, 247, 80, 21, -1000, -1000, 618,
	1205, 1068, 798, 1319, 1086, 15, 15, 1292, 1382, 15,
	15, 15, 15, 849, 28, 28, 147, 147, 147, 39,
	1361, 25, -1000, 213, -1000, 1068, 247, 247, -1000, 91,
	-3, 1361, 1268, 144, 278, -1000, 1361, 144, 278, -1000,
	187, -1000, 185, 1361, 31, 1361, 1247, 144, 278, -1000,
	237, 1160, 196, 1226, -1000, -1000, -1000, -1000, 1361, 247,
	70, -1000, 1361, 1068, -1000, -1000, -1000, -1000, 217, 1133,
	-1000, 130, -1000, -1000, 69, -1000, -1000, -1000, -1000, -1000,
	-1000, 247, -1000, -1000, -1000, -1000, -1000, -22, 247, 129,
	1068, 247, 92, -1000, 1205, 120, 1086, 1086, 1205, -1000,
	-1000, 618, 1068, 247, 17, 1361, -23, 105, 247, -1000,
	247, 1068, -1000, -1000, 128, 1068, -1000, 1068, -1000, -1000,
	-1000, -4, -1000, -1000, 247, 1361, -1000, -1000, -1000, 247,
	90, -1000, 234, 1361, -28, -1000, -1000, 1086, 1205, -1000,
	1205, -1000, -1000, 1110, 22, -1000, 247, 1068, -1000, 105,
	-30, 1361, -1000, 1361, 1361, 247, 1068, -1000, -1000, -1000,
	233, -5, -1000, -10, 1068, 1205, -1000, -1000, -1000, -1000,
	1068, -1000, 1361, -1000, 1068, -32, 1361, 196, -8, 247,
	1068, 247, 1361, -1000, 53, 1361, 1068, -1000, 247, -1000,
	1361, -37, -1000, 1361, -1000, 1068, 1361,
}

var yyPgo = [...]int16{
	0, 375, 326, 318, 314, 374, 373, 371, 370, 369,
	230, 368, 366, 362, 359, 358, 356, 355, 2, 14,
	150, 354, 229, 125, 353, 352, 1, 350, 349, 33,
	348, 347, 345, 344, 9, 4, 0, 340, 338, 10,
	334, 333, 332, 324, 319, 305, 301, 6, 299, 283,
	274, 258, 251, 217, 5, 3,
}

var yyR1 = [...]int8{
	0, 54, 54, 54, 54, 53, 53, 53, 4, 4,
	4, 5, 5, 5, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 48, 22, 22, 22, 22, 22,
	22, 22, 24, 21, 21, 21, 21, 21, 23, 23,
	20, 26, 26, 26, 26, 27, 27, 37, 37, 37,
	37, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 25, 25, 16, 15, 13, 14, 14, 14, 14,
	14, 14, 14, 14, 17, 17, 6, 8, 8, 7,
	2, 2, 3, 19, 19, 19, 19, 9, 9, 9,
	9, 30, 30, 12, 12, 12, 12, 12, 12, 12,
	12, 11, 11, 11, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 32, 32, 32, 32, 32, 33, 33,
	55, 55, 34, 34, 34, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 41, 41, 41, 41, 41, 42,
	42, 42, 39, 38, 38, 38, 38, 38, 38, 40,
	40, 40, 40, 40, 40, 40, 40, 18, 18, 28,
	28, 43, 43, 43, 43, 43, 44, 44, 45, 45,
	46, 46, 47, 47, 29, 29, 1, 1, 49, 49,
	49, 49, 49, 50, 50, 50, 52, 52, 52, 52,
	51, 51, 51, 51, 51, 51, 51, 51,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 2, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 1, 1, 1, 1, 1, 4, 5,
	5, 1, 3, 3, 5, 1, 3, 6, 5, 4,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 1, 5, 7, 6, 6, 5,
	6, 5, 5, 4, 1, 3, 3, 1, 2, 3,
	1, 3, 2, 4, 3, 5, 4, 3, 2, 1,
	3, 1, 1, 2, 4, 4, 6, 3, 5, 5,
	7, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	1, 2, 4, 4, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 3, 2, 3, 2,
	3, 3, 3, 2, 3, 3, 1, 2, 2, 3,
	3, 4, 4, 4, 4, 3, 3, 1, 0, 6,
	8, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 4, 6,
	3, 5, 2, 2, 3, 3, 5, 6, 3, 4,
	4, 6, 3, 5, 6, 8, 5, 7,
}

var yyChk = [...]int16{
	-1000, -53, 69, 2, 8, -4, -5, -10, -54, -17,
	-13, -14, -15, -16, -48, -50, -12, -52, -11, 4,
	28, -8, 22, 26, 25, -36, -49, 36, 38, -51,
	-34, -35, -29, -6, -43, -28, -25, -41, -38, -33,
	-19, -30, 39, 7, 10, 20, 64, -44, -45, -46,
	-47, 50, 41, -42, 13, -23, -40, -3, -20, 12,
	-31, -32, 57, 58, 19, 21, 62, 63, 11, -1,
	14, 35, 43, 54, -10, -54, 4, 28, 5, 66,
	-7, 65, -29, -36, 4, -35, -34, 45, 46, 61,
	60, 47, 48, 51, 53, 41, 43, 54, 50, 44,
	49, 13, 5, 28, 15, -29, -29, 16, 5, 52,
	13, 7, 52, 7, 12, 52, 13, 7, -3, 14,
	-29, 13, -36, -29, -36, -36, -55, 17, 5, 28,
	52, 17, -36, 13, 15, -36, -39, -3, 14, -36,
	11, 15, -39, -36, 13, -54, -29, -2, -3, 14,
	-36, 23, 4, -36, 4, -36, -36, -36, -36, -36,
	-36, -36, -36, -36, -36, -36, -36, -36, -36, -18,
	-36, -29, 15, 14, -3, 52, 29, 40, -2, 16,
	-29, -36, -36, -34, -29, -19, -36, -34, -29, -19,
	-9, 16, -55, -36, -29, -36, -36, -34, -29, -19,
	-39, -36, 12, -36, -2, 28, 17, 17, -36, 17,
	-47, 17, -36, 29, 15, 5, 15, 5, -39, -36,
	16, -55, 5, 5, -22, -21, -23, -20, -29, -24,
	-37, 12, 31, 32, 33, 30, 37, 13, 50, 39,
	52, 29, -4, -2, -36, -36, 4, 4, -36, -2,
	-3, 14, 29, 29, -29, -36, -22, -22, 40, -2,
	29, 52, 17, 16, -55, 5, 16, 52, 17, 5,
	5, -29, 17, -22, 17, -36, 5, 5, 16, 17,
	-22, -22, 12, -36, -22, 15, -2, 4, -36, -2,
	-36, -2, -2, -36, -18, -22, 29, 52, -2, -22,
	-22, -36, 16, -36, -36, 29, 52, -22, -22, 16,
	-27, 16, -26, -29, 52, -36, -2, -2, -2, 17,
	29, -22, -36, -2, 52, -22, -36, 5, 16, 40,
	52, 29, -36, -2, -18, -36, 52, -26, 40, -22,
	-36, -22, 17, -36, -22, 52, -36,
}

var yyDef = [...]int16{
	0, -2, 0, 7, 6, 5, 9, 10, 12, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 1,
	2, 74, 0, 64, 63, 24, 0, 0, 0, 0,
	60, 59, 165, 77, 51, 52, 53, 54, 55, 56,
	57, 58, 0, 0, 174, 175, 0, 161, 162, 163,
	164, 0, 0, 0, 0, 0, 0, 146, 0, 0,
	91, 92, 166, 167, 168, 169, 170, 171, 172, 0,
	0, 0, 176, 177, 8, 11, 3, 4, 0, 0,
	78, 0, 165, 0, 0, 59, 60, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 158, 0, 182, 183, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 0,
	0, 0, 0, 165, 61, 62, 0, 135, 0, 120,
	0, 137, 139, 0, 143, 0, 0, 147, 0, 0,
	173, 82, 0, 0, 0, 13, 97, 75, 80, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 0,
	157, 180, 184, 0, 185, 0, 0, 0, 188, 0,
	192, 101, 0, 128, 129, 130, 102, 131, 132, 133,
	0, 84, 0, 89, 165, 103, 0, 125, 126, 127,
	0, 0, 0, 0, 76, 121, 134, 136, 141, 0,
	0, 138, 140, 0, 144, 156, 145, 155, 0, 0,
	118, 0, 149, 150, 0, 25, 26, 27, 28, 29,
	30, 0, 33, 34, 35, 36, 37, 0, 0, 0,
	0, 0, 0, 79, 0, 0, 0, 0, 0, 73,
	-2, 0, 158, 0, 178, 94, 95, 0, 0, 189,
	0, 0, 124, 83, 0, 88, 86, 0, 122, 153,
	154, 190, 123, 38, 0, 142, 151, 152, 119, 0,
	0, 32, 0, 98, 99, 81, 65, 0, 0, 71,
	0, 69, 72, 24, 0, 181, 0, 0, 186, 0,
	193, 196, 85, 87, 90, 0, 0, 39, 40, 31,
	0, 50, 45, 41, 0, 0, 67, 70, 68, 159,
	158, 179, 96, 187, 0, 191, 194, 0, 49, 0,
	0, 0, 100, 66, 0, 197, 0, 46, 0, 48,
	42, 43, 160, 195, 47, 0, 44,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:149
		{
			yylex.(*parser).parseResult = yyDollar[2].aststmts
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:152
		{
			yylex.(*parser).unexpected("", "")
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:157
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:164
		{
			yyVAL.aststmts = plast.Stmts{yyDollar[1].node}
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:168
		{
			yyVAL.aststmts = plast.Stmts{yyDollar[1].node}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:170
		{
			yyVAL.aststmts = plast.Stmts{}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:172
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:202
		{
			yyVAL.node = yyDollar[2].node
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:208
		{
			yyVAL.node = yyDollar[2].node
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:215
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:219
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:223
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:227
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:231
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:238
		{
			yyVAL.node = yylex.(*parser).newListType(yyDollar[4].node)
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:242
		{
			yyVAL.node = yylex.(*parser).newListType(yyDollar[5].node)
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:248
		{
			yyVAL.node = yylex.(*parser).newMapType(yyDollar[3].node, yyDollar[5].node)
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:254
		{
			yyVAL.node = yyDollar[1].node
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:256
		{
			yyVAL.node = yyDollar[1].node
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:258
		{
			yyVAL.node = yyDollar[1].node
		}
	case 44:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:260
		{
			yyVAL.node = yyDollar[1].node
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:265
		{
			yyVAL.node = yyDollar[1].node
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:268
		{
			yyVAL.node = &ast.Node{}
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:270
		{
			yyVAL.node = &ast.Node{}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:272
		{
			yyVAL.node = &ast.Node{}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:274
		{
			yyVAL.node = &ast.Node{}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:285
		{
			yyVAL.node = yyDollar[2].node
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:287
		{
			yyVAL.node = yyDollar[2].node
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:292
		{
			yyVAL.node = yylex.(*parser).newBreakStmt(yyDollar[1].item.Pos)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:296
		{
			yyVAL.node = yylex.(*parser).newContinueStmt(yyDollar[1].item.Pos)
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:305
		{
			yyVAL.node = yylex.(*parser).newForInStmt(yyDollar[2].node, yyDollar[4].node, yyDollar[5].astblock, yyDollar[1].item, yyDollar[3].item)
		}
	case 66:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:316
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, yyDollar[4].node, yyDollar[6].node, yyDollar[7].astblock)
		}
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:318
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, yyDollar[4].node, nil, yyDollar[6].astblock)
		}
	case 68:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:320
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, yyDollar[3].node, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:322
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, yyDollar[3].node, nil, yyDollar[5].astblock)
		}
	case 70:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:325
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, nil, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:327
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, nil, nil, yyDollar[5].astblock)
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:329
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, nil, yyDollar[4].node, yyDollar[5].astblock)
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:331
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, nil, nil, yyDollar[4].astblock)
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:335
		{
			yyVAL.node = yylex.(*parser).newIfElifStmt(yyDollar[1].iflist)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:339
		{
			yyVAL.node = yylex.(*parser).newIfElifelseStmt(yyDollar[1].iflist, yyDollar[2].item, yyDollar[3].astblock)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:345
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:349
		{
			yyVAL.iflist = []*plast.IfStmtElem{yyDollar[1].ifitem}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:351
		{
			yyVAL.iflist = append(yyDollar[1].iflist, yyDollar[2].ifitem)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:355
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:361
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, yyDollar[2].aststmts, yyDollar[3].item)
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:365
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, plast.Stmts{}, yyDollar[2].item)
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:370
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, yyDollar[3].nodes, yyDollar[2].item, yyDollar[4].item)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:374
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, nil, yyDollar[2].item, yyDollar[3].item)
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:378
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, yyDollar[3].nodes, yyDollar[2].item, yyDollar[5].item)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:382
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, nil, yyDollar[2].item, yyDollar[4].item)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:389
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:394
		{
			yyVAL.nodes = []*plast.Node{yyDollar[1].node}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:396
		{
			yyVAL.nodes = []*plast.Node{yyDollar[1].node}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:403
		{
			yyVAL.node = yylex.(*parser).newVarbDeclStmt(yyDollar[1].item)
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[2].node, nil, nil)
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:408
		{
			yyVAL.node = yylex.(*parser).newVarbDeclStmt(yyDollar[1].item)
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[2].node, nil, yyDollar[4].node)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:413
		{
			yyVAL.node = yylex.(*parser).newVarbDeclStmt(yyDollar[1].item)
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[2].node, yyDollar[4].node, nil)
		}
	case 96:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:418
		{
			yyVAL.node = yylex.(*parser).newVarbDeclStmt(yyDollar[1].item)
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[2].node, yyDollar[4].node, yyDollar[6].node)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:423
		{
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[3].node, nil, nil)
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:427
		{
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[3].node, nil, yyDollar[5].node)
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:431
		{
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[3].node, yyDollar[5].node, nil)
		}
	case 100:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:435
		{
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:442
		{
			yyVAL.node = yylex.(*parser).newAssignmentExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:444
		{
			yyVAL.node = yylex.(*parser).newAssignmentExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:446
		{
			yyVAL.node = yylex.(*parser).newAssignmentExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:450
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:452
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:454
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:456
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:458
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:460
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:462
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:464
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:466
		{
			yyVAL.node = yyDollar[1].node
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:473
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:475
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:477
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:479
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:481
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:486
		{
			yyVAL.node = yylex.(*parser).newParenExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[3].item)
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:488
		{
			yyVAL.node = yylex.(*parser).newParenExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[4].item)
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:497
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].item)
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:500
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(nil, yyDollar[2].item, yyDollar[3].node, yyDollar[4].item)
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:502
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].item)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:509
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:513
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:517
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:521
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:525
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:529
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:533
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:537
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:541
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:547
		{
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[3].item.Pos)
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:551
		{
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:555
		{
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:559
		{
			yyVAL.node = yylex.(*parser).newListInitStartExpr(yyDollar[1].item.Pos, nil)
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:564
		{
			yyVAL.node = yylex.(*parser).newListInitStartExpr(yyDollar[2].item.Pos, nil)
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[3].item.Pos)
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:571
		{
			yyVAL.node = yylex.(*parser).newListInitStartExpr(yyDollar[1].item.Pos, nil)
			yyVAL.node = yylex.(*parser).newListInitAppendExpr(yyVAL.node, yyDollar[2].node)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:576
		{
			yyVAL.node = yylex.(*parser).newListInitStartExpr(yyDollar[2].item.Pos, yyDollar[1].node)
			yyVAL.node = yylex.(*parser).newListInitAppendExpr(yyVAL.node, yyDollar[3].node)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:581
		{
			yyVAL.node = yylex.(*parser).newListInitAppendExpr(yyVAL.node, yyDollar[3].node)
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:590
		{
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:594
		{
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[3].item.Pos)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:598
		{
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[3].item.Pos)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:602
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[1].astblock.LBracePos.Pos, nil)
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[1].astblock.RBracePos.Pos)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:607
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[2].astblock.LBracePos.Pos, yyDollar[1].node)
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[2].astblock.RBracePos.Pos)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:612
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[2].astblock.LBracePos.Pos, yyDollar[1].node)
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[2].astblock.RBracePos.Pos)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:619
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[1].item.Pos, nil)
			// $$ = yylex.(*parser).newMapInitAppendExpr($$, $2, $4)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:624
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[2].node.Pos, yyDollar[1].item)
			// $$ = yylex.(*parser).newMapInitAppendExpr($$, $3, $5)
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:629
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[1].node.Pos, nil)
			// $$ = yylex.(*parser).newMapInitAppendExpr($$, $2, $4)
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:634
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[2].item.Pos, yyDollar[1].node)
			// $$ = yylex.(*parser).newMapInitAppendExpr($$, $3, $5)
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:639
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[1].node.Pos, nil)
			// $$ = yylex.(*parser).newMapInitAppendExpr($$, $2, $4)
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:644
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[2].item.Pos, yyDollar[1].node)
			// $$ = yylex.(*parser).newMapInitAppendExpr($$, $3, $5)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:649
		{
			yyVAL.node = yylex.(*parser).newMapInitAppendExpr(yyDollar[1].node, nil, nil)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:653
		{
			yyVAL.node = yylex.(*parser).newMapInitAppendExpr(yyDollar[1].node, nil, nil)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:661
		{
			yyVAL.node = nil
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:665
		{
			yyVAL.node = &ast.Node{}
		}
	case 160:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:667
		{
			yyVAL.node = &ast.Node{}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:684
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, true)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:686
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, false)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:691
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:696
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteMultilineString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:704
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:706
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:712
		{
			yyVAL.node = yylex.(*parser).newNumberLiteral(yyDollar[1].item)
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:714
		{
			num := yylex.(*parser).newNumberLiteral(yyDollar[2].item)
			switch yyDollar[1].item.Typ {
			case ADD: // pass
			case SUB:
				if num.NodeType == plast.TypeFloatLiteral {
					num.FloatLiteral.Val = -num.FloatLiteral.Val
					num.FloatLiteral.Start = yylex.(*parser).posCache.LnCol(yyDollar[1].item.Pos)
				} else {
					num.IntegerLiteral.Val = -num.IntegerLiteral.Val
					num.IntegerLiteral.Start = yylex.(*parser).posCache.LnCol(yyDollar[1].item.Pos)

				}
			}
			yyVAL.node = num
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:733
		{
			yyVAL.node = yylex.(*parser).newIdentifier(yyDollar[1].item)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:737
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newIdentifier(yyDollar[1].item)
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:747
		{
			yyVAL.node = yylex.(*parser).newStructTypeDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[4].node, nil)
		}
	case 179:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:752
		{
			yyVAL.node = yylex.(*parser).newStructTypeDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[4].node, yyDollar[6].node)
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:757
		{
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[3].node, nil)
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:761
		{
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[3].node, yyDollar[5].node)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:769
		{
			yyVAL.node = yyDollar[1].node
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:773
		{
			yyVAL.node = yyDollar[1].node
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:777
		{
			yyVAL.node = yylex.(*parser).newStructTypeDecl(yyDollar[2].node)
		}
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:783
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenReturn(yyDollar[1].node, yyDollar[4].node)
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[5].astblock)
		}
	case 187:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:788
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenReturn(yyDollar[1].node, yyDollar[5].node)
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[6].astblock)
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:793
		{
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[3].astblock)
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:797
		{
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[4].astblock)
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:803
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, nil, nil)
		}
	case 191:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:808
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, yyDollar[6].node, nil)
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:813
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, nil, nil)
		}
	case 193:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:817
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, yyDollar[5].node, nil)
		}
	case 194:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:821
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, nil, yyDollar[6].node)
		}
	case 195:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:826
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, yyDollar[6].node, yyDollar[8].node)
		}
	case 196:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:831
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, nil, yyDollar[5].node)
		}
	case 197:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:835
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	}
	goto yystack /* stack new state and value */
}
