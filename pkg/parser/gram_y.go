// Code generated by goyacc -o gram_y.go gram.y. DO NOT EDIT.

//line gram.y:7
package parser

import __yyfmt__ "fmt"

//line gram.y:7

import (
	plast "github.com/GuanceCloud/platypus/pkg/ast"
	// pltoken "github.com/GuanceCloud/platypus/pkg/token"
)

//line gram.y:16
type yySymType struct {
	yys      int
	aststmts plast.Stmts
	astblock *plast.BlockStmt

	ifitem *plast.IfStmtElem
	iflist []*plast.IfStmtElem
	node   *plast.Node
	nodes  []*plast.Node
	item   Item
}

const SEMICOLON = 57346
const COMMA = 57347
const COMMENT = 57348
const DOT = 57349
const EOF = 57350
const ERROR = 57351
const ID = 57352
const NUMBER = 57353
const LEFT_PAREN = 57354
const LEFT_BRACKET = 57355
const LEFT_BRACE = 57356
const RIGHT_BRACE = 57357
const RIGHT_PAREN = 57358
const RIGHT_BRACKET = 57359
const SPACE = 57360
const STRING = 57361
const QUOTED_STRING = 57362
const MULTILINE_STRING = 57363
const FOR = 57364
const IN = 57365
const WHILE = 57366
const BREAK = 57367
const CONTINUE = 57368
const RETURN = 57369
const EOL = 57370
const COLON = 57371
const STR = 57372
const INT = 57373
const FLOAT = 57374
const BOOL = 57375
const LIST = 57376
const MAP = 57377
const STRUCT = 57378
const ANY = 57379
const LET = 57380
const FN = 57381
const RET_SYMB = 57382
const NOT = 57383
const BitwiseXOR = 57384
const BitwiseOR = 57385
const BitwiseNOT = 57386
const BitwiseAND = 57387
const operatorsStart = 57388
const ADD = 57389
const DIV = 57390
const GTE = 57391
const GT = 57392
const LT = 57393
const LTE = 57394
const MOD = 57395
const MUL = 57396
const NEQ = 57397
const EQ = 57398
const EQEQ = 57399
const SUB = 57400
const operatorsEnd = 57401
const keywordsStart = 57402
const TRUE = 57403
const FALSE = 57404
const IDENTIFIER = 57405
const AND = 57406
const OR = 57407
const NIL = 57408
const NULL = 57409
const IF = 57410
const ELIF = 57411
const ELSE = 57412
const keywordsEnd = 57413
const startSymbolsStart = 57414
const START_STMTS = 57415
const startSymbolsEnd = 57416
const UMINUS = 57417

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SEMICOLON",
	"COMMA",
	"COMMENT",
	"DOT",
	"EOF",
	"ERROR",
	"ID",
	"NUMBER",
	"LEFT_PAREN",
	"LEFT_BRACKET",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"RIGHT_PAREN",
	"RIGHT_BRACKET",
	"SPACE",
	"STRING",
	"QUOTED_STRING",
	"MULTILINE_STRING",
	"FOR",
	"IN",
	"WHILE",
	"BREAK",
	"CONTINUE",
	"RETURN",
	"EOL",
	"COLON",
	"STR",
	"INT",
	"FLOAT",
	"BOOL",
	"LIST",
	"MAP",
	"STRUCT",
	"ANY",
	"LET",
	"FN",
	"RET_SYMB",
	"NOT",
	"BitwiseXOR",
	"BitwiseOR",
	"BitwiseNOT",
	"BitwiseAND",
	"operatorsStart",
	"ADD",
	"DIV",
	"GTE",
	"GT",
	"LT",
	"LTE",
	"MOD",
	"MUL",
	"NEQ",
	"EQ",
	"EQEQ",
	"SUB",
	"operatorsEnd",
	"keywordsStart",
	"TRUE",
	"FALSE",
	"IDENTIFIER",
	"AND",
	"OR",
	"NIL",
	"NULL",
	"IF",
	"ELIF",
	"ELSE",
	"keywordsEnd",
	"startSymbolsStart",
	"START_STMTS",
	"startSymbolsEnd",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:818

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 243,
	1, 85,
	4, 85,
	8, 85,
	15, 85,
	28, 85,
	-2, 153,
}

const yyPrivate = 57344

const yyLast = 1762

var yyAct = [...]int16{
	25, 312, 36, 188, 80, 139, 8, 30, 3, 349,
	180, 30, 76, 74, 70, 124, 333, 339, 322, 90,
	91, 305, 89, 78, 92, 95, 81, 82, 85, 86,
	96, 94, 87, 90, 88, 93, 89, 314, 92, 95,
	293, 84, 83, 332, 96, 94, 128, 116, 306, 93,
	341, 252, 331, 325, 234, 118, 119, 120, 121, 122,
	123, 292, 130, 304, 133, 326, 111, 137, 140, 134,
	262, 110, 109, 113, 173, 198, 142, 147, 253, 2,
	150, 233, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 107, 146,
	245, 172, 309, 106, 105, 178, 179, 183, 282, 186,
	187, 183, 146, 346, 194, 260, 196, 117, 126, 193,
	31, 189, 182, 62, 31, 250, 191, 201, 95, 65,
	125, 203, 205, 96, 94, 276, 300, 212, 174, 271,
	77, 127, 211, 275, 265, 100, 101, 104, 198, 237,
	238, 30, 241, 214, 146, 198, 198, 170, 90, 91,
	114, 89, 136, 92, 95, 81, 82, 85, 86, 96,
	94, 256, 43, 247, 93, 44, 53, 66, 61, 67,
	259, 190, 263, 53, 49, 45, 50, 141, 199, 202,
	256, 143, 198, 127, 127, 89, 258, 92, 95, 198,
	68, 257, 131, 96, 94, 264, 58, 272, 93, 59,
	55, 111, 56, 127, 71, 168, 110, 109, 113, 54,
	97, 177, 19, 57, 184, 185, 47, 48, 184, 192,
	99, 51, 52, 329, 280, 115, 103, 217, 72, 279,
	285, 287, 345, 98, 330, 290, 20, 102, 195, 30,
	273, 4, 44, 266, 297, 215, 298, 299, 311, 221,
	108, 301, 45, 303, 31, 219, 302, 90, 91, 73,
	89, 220, 92, 95, 81, 82, 85, 86, 96, 94,
	87, 235, 88, 93, 5, 315, 44, 1, 246, 84,
	83, 221, 221, 17, 320, 7, 45, 219, 219, 29,
	144, 15, 69, 220, 220, 90, 91, 328, 89, 44,
	92, 95, 44, 268, 138, 334, 96, 94, 176, 45,
	221, 93, 45, 336, 26, 337, 219, 303, 210, 111,
	338, 340, 220, 343, 110, 109, 113, 14, 209, 35,
	347, 44, 221, 34, 33, 148, 169, 60, 219, 221,
	350, 45, 221, 38, 220, 219, 63, 39, 219, 223,
	40, 220, 31, 221, 220, 41, 111, 64, 221, 219,
	221, 110, 109, 113, 219, 220, 219, 310, 107, 37,
	220, 222, 220, 106, 105, 218, 9, 13, 12, 221,
	11, 10, 16, 18, 221, 219, 21, 313, 75, 112,
	219, 220, 32, 175, 6, 0, 220, 0, 0, 0,
	221, 248, 249, 0, 0, 0, 219, 197, 0, 0,
	0, 0, 220, 221, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 135, 0, 220, 0, 0, 0, 0,
	270, 0, 145, 0, 0, 112, 0, 313, 236, 221,
	0, 221, 242, 0, 0, 219, 0, 219, 216, 221,
	0, 220, 277, 220, 0, 219, 0, 0, 171, 278,
	145, 220, 281, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 206, 291, 145, 112, 0, 0, 295, 0,
	296, 0, 0, 0, 0, 90, 91, 0, 89, 0,
	92, 95, 81, 82, 85, 86, 96, 94, 87, 307,
	88, 93, 0, 0, 308, 145, 0, 84, 83, 243,
	0, 43, 0, 0, 44, 53, 66, 61, 67, 0,
	319, 129, 0, 49, 45, 50, 0, 0, 283, 0,
	286, 288, 289, 327, 145, 0, 0, 0, 0, 68,
	294, 0, 112, 0, 0, 58, 0, 0, 59, 55,
	0, 56, 0, 0, 0, 0, 0, 0, 54, 342,
	128, 344, 57, 0, 0, 47, 48, 0, 0, 348,
	51, 52, 0, 0, 0, 316, 317, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 321, 0, 0, 0,
	0, 0, 0, 0, 0, 145, 0, 243, 243, 145,
	0, 0, 0, 0, 0, 0, 335, 145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 19, 0, 0,
	43, 0, 0, 44, 53, 66, 61, 67, 138, 0,
	0, 0, 49, 45, 50, 22, 0, 0, 24, 23,
	0, 20, 243, 145, 0, 145, 0, 0, 68, 27,
	0, 28, 42, 145, 58, 0, 0, 59, 55, 0,
	56, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	0, 57, 0, 145, 47, 48, 0, 0, 0, 51,
	52, 46, 19, 0, 0, 43, 0, 0, 44, 53,
	66, 61, 67, 0, 0, 0, 0, 49, 45, 50,
	22, 0, 0, 24, 23, 0, 20, 0, 0, 0,
	0, 0, 0, 68, 27, 0, 28, 42, 0, 58,
	0, 0, 59, 55, 0, 56, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 0, 57, 0, 0, 47,
	48, 0, 0, 0, 51, 52, 46, 43, 0, 0,
	44, 53, 66, 61, 67, 0, 0, 0, 0, 49,
	45, 50, 22, 0, 0, 24, 23, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 27, 0, 28, 42,
	0, 58, 0, 0, 59, 55, 0, 56, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 0, 57, 0,
	0, 47, 48, 0, 0, 0, 51, 52, 46, 43,
	0, 0, 44, 53, 66, 61, 67, 0, 181, 0,
	0, 49, 45, 50, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	0, 0, 0, 58, 0, 0, 59, 55, 0, 56,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 0,
	57, 0, 0, 47, 48, 0, 0, 239, 51, 52,
	43, 0, 0, 44, 53, 66, 61, 67, 0, 0,
	0, 0, 49, 45, 50, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 224, 230, 0, 68, 0,
	0, 0, 0, 45, 58, 0, 0, 59, 55, 0,
	56, 0, 0, 228, 225, 226, 227, 54, 68, 0,
	229, 57, 232, 0, 47, 48, 0, 0, 43, 51,
	52, 44, 53, 66, 61, 67, 138, 231, 0, 0,
	49, 45, 50, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 0, 0,
	0, 0, 58, 0, 0, 59, 55, 0, 56, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 0, 57,
	0, 0, 47, 48, 0, 0, 43, 51, 52, 44,
	53, 66, 61, 67, 0, 0, 204, 0, 49, 45,
	50, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 0, 0, 0,
	58, 0, 0, 59, 55, 0, 56, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 0, 57, 0, 0,
	47, 48, 0, 0, 43, 51, 52, 44, 53, 66,
	61, 67, 0, 0, 200, 0, 49, 45, 50, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 0, 0, 0, 0, 0, 58, 0,
	0, 59, 55, 0, 56, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 0, 57, 0, 0, 47, 48,
	0, 0, 151, 51, 52, 43, 0, 0, 44, 53,
	66, 61, 67, 0, 0, 0, 0, 49, 45, 50,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 0, 0, 0, 0, 0, 58,
	0, 0, 59, 55, 0, 56, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 0, 57, 0, 0, 47,
	48, 0, 0, 43, 51, 52, 44, 53, 66, 61,
	67, 132, 0, 0, 0, 49, 45, 50, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 0, 0, 0, 0, 0, 58, 0, 0,
	59, 55, 0, 56, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 0, 57, 0, 0, 47, 48, 0,
	0, 79, 51, 52, 43, 0, 0, 44, 53, 66,
	61, 67, 0, 0, 0, 0, 49, 45, 50, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 0, 0, 0, 0, 0, 58, 0,
	0, 59, 55, 0, 56, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 0, 57, 0, 0, 47, 48,
	0, 0, 43, 51, 52, 44, 53, 66, 61, 67,
	0, 0, 0, 0, 49, 45, 50, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 0, 0, 0, 0, 58, 0, 0, 59,
	55, 0, 56, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 0, 57, 0, 0, 47, 48, 0, 0,
	43, 51, 52, 44, 53, 66, 61, 244, 0, 0,
	0, 0, 49, 45, 50, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 68, 0,
	0, 0, 0, 0, 58, 207, 0, 59, 55, 0,
	56, 0, 0, 0, 0, 0, 0, 54, 0, 206,
	0, 57, 0, 0, 47, 48, 0, 0, 0, 51,
	52, 0, 90, 91, 323, 89, 0, 92, 95, 81,
	82, 85, 86, 96, 94, 87, 324, 88, 93, 274,
	0, 0, 0, 0, 84, 83, 0, 0, 0, 90,
	91, 0, 89, 0, 92, 95, 81, 82, 85, 86,
	96, 94, 87, 206, 88, 93, 267, 0, 0, 0,
	0, 84, 83, 0, 0, 0, 90, 91, 0, 89,
	0, 92, 95, 81, 82, 85, 86, 96, 94, 87,
	206, 88, 93, 0, 0, 0, 0, 0, 84, 83,
	0, 0, 0, 90, 91, 254, 89, 0, 92, 95,
	81, 82, 85, 86, 96, 94, 87, 255, 88, 93,
	0, 0, 0, 0, 0, 84, 83, 0, 0, 0,
	90, 91, 213, 89, 0, 92, 95, 81, 82, 85,
	86, 96, 94, 87, 127, 88, 93, 0, 0, 0,
	0, 0, 84, 83, 146, 0, 0, 0, 90, 91,
	0, 89, 0, 92, 95, 81, 82, 85, 86, 96,
	94, 87, 284, 88, 93, 0, 0, 0, 0, 0,
	84, 83, 90, 91, 0, 89, 0, 92, 95, 81,
	82, 85, 86, 96, 94, 87, 0, 88, 93, 0,
	0, 0, 0, 0, 84, 83, 0, 0, 0, 269,
	90, 91, 0, 89, 0, 92, 95, 81, 82, 85,
	86, 96, 94, 87, 0, 88, 93, 0, 0, 0,
	0, 0, 84, 83, 90, 91, 261, 89, 0, 92,
	95, 81, 82, 85, 86, 96, 94, 87, 240, 88,
	93, 0, 0, 0, 0, 0, 84, 83, 0, 0,
	0, 90, 91, 0, 89, 0, 92, 95, 81, 82,
	85, 86, 96, 94, 87, 149, 88, 93, 0, 0,
	0, 0, 0, 84, 83, 0, 90, 91, 0, 89,
	0, 92, 95, 81, 82, 85, 86, 96, 94, 87,
	0, 88, 93, 0, 0, 0, 0, 0, 84, 83,
	0, 0, 0, 90, 91, 0, 89, 0, 92, 95,
	81, 82, 85, 86, 96, 94, 87, 0, 88, 93,
	0, 0, 0, 0, 0, 84, 83, 90, 91, 0,
	89, 0, 92, 95, 81, 82, 85, 86, 96, 94,
	87, 0, 88, 93, 0, 90, 91, 0, 89, 84,
	92, 95, 81, 82, 85, 86, 96, 94, 87, 0,
	88, 93,
}

var yyPact = [...]int16{
	6, 243, 688, -1000, -1000, -1000, 750, 218, 210, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 264, -1000, -1000, -1000,
	-1000, -57, 1227, -1000, -1000, -23, 215, 276, 276, 231,
	91, 204, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 276, 222, -1000, -1000, 1285, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1285, 1285, 1285, 1285, 1285, 1285,
	113, 514, 189, 1166, -1000, 148, 1285, 931, 174, 218,
	210, -1000, -1000, 276, 140, -1000, 1285, 322, 1661, 1108,
	371, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
	1285, 1285, 1285, 1285, 1285, 1285, 1285, 331, -1000, -1000,
	143, 45, 98, 302, 1285, 1285, 812, 276, 1285, 1285,
	165, 276, -1000, 931, 236, 1285, 1530, 359, -1000, -1000,
	-1000, -1000, -1000, -1000, 171, -1000, 1047, -1000, 172, -1000,
	-23, 989, -1000, 1370, 323, -1000, 931, 1506, -1000, 250,
	453, 893, 210, 25, -1000, -1000, 623, 1530, 1285, 873,
	1634, 1343, 263, 263, 1685, 1703, 263, 263, 116, 116,
	150, -9, 263, 80, 80, -1000, -1000, -1000, 71, -1000,
	299, -1000, 1285, 893, 893, -1000, 85, 22, -23, 1478,
	185, -1000, 164, -23, 59, -1000, -23, 1609, 41, 166,
	-1000, 128, -1000, 248, 1451, 276, 1582, -1000, -1000, -1000,
	-1000, -23, 893, 122, -1000, -23, 1285, -1000, -1000, -1000,
	-1000, 245, 1424, -1000, 127, -1000, -1000, 118, -1000, -1000,
	-1000, -1000, -1000, -1000, 893, -1000, -1000, -1000, -1000, -1000,
	-10, 893, 227, 1285, 893, 93, -1000, 1530, 1558, 1343,
	1343, 1530, -1000, -1000, 623, 893, 32, -23, -16, 140,
	893, -1000, 893, 1285, -1000, 1285, 1285, -1000, 120, -1000,
	1285, -1000, 1285, -1000, 47, -1000, -1000, -1000, -8, -1000,
	-1000, 893, -23, -1000, -1000, -1000, 893, 86, -1000, 242,
	-23, -19, -1000, -1000, 1343, 1530, -1000, 1530, -1000, -1000,
	453, -1000, 893, 1285, -1000, 140, -38, -23, 1397, -23,
	-1000, -23, 36, -23, -1000, 893, 1285, -1000, -1000, -1000,
	228, 12, -1000, -13, 1285, 1530, -1000, -1000, -1000, -1000,
	-23, -1000, 1285, -1000, 1285, -1000, 1285, -39, -23, 276,
	10, 893, 1285, 893, -23, -1000, -23, 225, 96, 1285,
	-1000, 893, -1000, -23, -47, -1000, -1000, -23, -1000, 1285,
	-23,
}

var yyPgo = [...]int16{
	0, 300, 367, 281, 404, 402, 398, 396, 10, 295,
	393, 392, 391, 390, 388, 387, 386, 0, 3, 129,
	385, 237, 123, 381, 379, 1, 377, 117, 365, 360,
	4, 359, 357, 5, 356, 353, 347, 344, 343, 339,
	2, 337, 324, 301, 299, 293, 287, 6, 15,
}

var yyR1 = [...]int8{
	0, 47, 47, 47, 47, 46, 46, 46, 3, 3,
	3, 4, 4, 4, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 41, 21, 21, 21, 21, 21,
	21, 21, 23, 20, 20, 20, 20, 20, 22, 22,
	19, 25, 25, 25, 25, 26, 26, 31, 31, 31,
	31, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 24, 24, 24, 24, 24, 24, 15, 14,
	12, 13, 13, 13, 13, 13, 13, 13, 13, 16,
	16, 5, 7, 7, 6, 1, 1, 2, 8, 8,
	8, 8, 11, 11, 11, 11, 11, 11, 11, 11,
	10, 10, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 29, 29,
	48, 48, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 18,
	18, 35, 35, 35, 35, 35, 36, 36, 36, 33,
	32, 32, 32, 32, 32, 32, 34, 34, 34, 34,
	34, 34, 34, 34, 37, 37, 38, 38, 39, 39,
	40, 27, 27, 42, 42, 42, 42, 42, 43, 43,
	43, 45, 45, 45, 45, 44, 44, 44, 44, 44,
	44, 44, 44,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 2, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 1, 1, 1, 1, 1, 4, 5,
	5, 1, 3, 3, 5, 1, 3, 6, 5, 4,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 2, 1, 1,
	5, 7, 6, 6, 5, 6, 5, 5, 4, 1,
	3, 3, 1, 2, 3, 1, 3, 2, 3, 2,
	1, 3, 2, 4, 4, 6, 3, 5, 5, 7,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	1, 2, 4, 4, 4, 6, 8, 3, 3, 5,
	4, 4, 4, 6, 8, 3, 3, 5, 4, 1,
	0, 3, 2, 3, 2, 3, 2, 3, 3, 3,
	2, 3, 3, 1, 2, 2, 3, 3, 4, 4,
	4, 4, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 3, 5, 2, 2, 3,
	3, 5, 6, 3, 4, 4, 6, 3, 5, 6,
	8, 5, 7,
}

var yyChk = [...]int16{
	-1000, -46, 73, 2, 8, -3, -4, -9, -47, -16,
	-12, -13, -14, -15, -41, -43, -11, -45, -10, 4,
	28, -7, 22, 26, 25, -17, -42, 36, 38, -44,
	-30, -27, -5, -37, -38, -39, -40, -24, -35, -32,
	-29, -28, 39, 7, 10, 20, 68, 61, 62, 19,
	21, 66, 67, 11, 54, 45, 47, 58, 41, 44,
	-36, 13, -22, -34, -2, -19, 12, 14, 35, -9,
	-47, 4, 28, 5, 70, -6, 69, -27, -17, 4,
	-30, 49, 50, 65, 64, 51, 52, 55, 57, 45,
	42, 43, 47, 58, 54, 48, 53, 5, 28, 15,
	-27, -27, 16, 5, 56, 13, 12, 7, 56, 13,
	12, 7, -2, 14, -27, 13, -17, -27, -17, -17,
	-17, -17, -17, -17, -48, 17, 5, 28, 56, 17,
	-17, 13, 15, -17, -33, -2, 14, -17, 15, -33,
	-17, 13, -47, -27, -1, -2, 14, -17, 23, 4,
	-17, 4, -17, -17, -17, -17, -17, -17, -17, -17,
	-17, -17, -17, -17, -17, -17, -17, -17, -27, 15,
	14, -2, 56, 29, 40, -1, 16, -27, -17, -17,
	-8, 16, -48, -17, -27, -27, -17, -17, -18, -8,
	16, -48, -27, -33, -17, 12, -17, -1, 28, 17,
	17, -17, 17, -40, 17, -17, 29, 15, 5, 15,
	5, -33, -17, 16, -48, 5, 5, -21, -20, -22,
	-19, -27, -23, -31, 12, 31, 32, 33, 30, 37,
	13, 54, 39, 56, 29, -3, -1, -17, -17, 4,
	4, -17, -1, -2, 14, 29, -27, -17, -21, -21,
	40, -1, 29, 56, 17, 29, 5, 16, -48, 16,
	56, 17, 29, 16, -48, 16, 5, 5, -27, 17,
	-21, 17, -17, 5, 5, 16, 17, -21, -21, 12,
	-17, -21, 15, -1, 4, -17, -1, -17, -1, -1,
	-17, -21, 29, 56, -1, -21, -21, -17, -17, -17,
	16, -17, -18, -17, 16, 29, 56, -21, -21, 16,
	-26, 16, -25, -27, 56, -17, -1, -1, -1, -21,
	-17, -1, 56, 17, 29, 17, 29, -21, -17, 5,
	16, 40, 56, 29, -17, -1, -17, -17, -18, 56,
	-25, 40, -21, -17, -21, 17, 17, -17, -21, 56,
	-17,
}

var yyDef = [...]int16{
	0, -2, 0, 7, 6, 5, 9, 10, 12, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 1,
	2, 79, 0, 69, 68, 24, 0, 0, 0, 0,
	57, 55, 82, 51, 52, 53, 54, 56, 58, 59,
	60, 61, 0, 0, 171, 172, 0, 164, 165, 166,
	167, 168, 169, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 153, 0, 0, 0, 0, 8,
	11, 3, 4, 0, 0, 83, 0, 55, 0, 0,
	57, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 178,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 140,
	0, 0, 155, 0, 0, 0, 0, 55, 62, 63,
	64, 65, 66, 67, 0, 142, 0, 120, 0, 144,
	146, 0, 150, 0, 0, 154, 0, 0, 87, 0,
	0, 0, 13, 96, 80, 85, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 175, 179,
	0, 180, 0, 0, 0, 183, 0, 187, 100, 0,
	0, 136, 0, 90, 55, 135, 101, 139, 0, 0,
	128, 0, 127, 0, 0, 0, 0, 81, 121, 141,
	143, 148, 0, 0, 145, 147, 0, 151, 163, 152,
	162, 0, 0, 118, 0, 156, 157, 0, 25, 26,
	27, 28, 29, 30, 0, 33, 34, 35, 36, 37,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 78, -2, 0, 0, 173, 93, 94, 0,
	0, 184, 0, 0, 131, 0, 89, 132, 0, 138,
	0, 122, 140, 123, 0, 130, 160, 161, 185, 124,
	38, 0, 149, 158, 159, 119, 0, 0, 32, 0,
	97, 98, 86, 70, 0, 0, 76, 0, 74, 77,
	24, 176, 0, 0, 181, 0, 188, 191, 0, 88,
	137, 91, 0, 139, 129, 0, 0, 39, 40, 31,
	0, 50, 45, 41, 0, 0, 72, 75, 73, 174,
	95, 182, 0, 133, 0, 125, 140, 186, 189, 0,
	49, 0, 0, 0, 99, 71, 192, 0, 0, 0,
	46, 0, 48, 42, 43, 134, 126, 190, 47, 0,
	44,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:150
		{
			yylex.(*parser).parseResult = yyDollar[2].aststmts
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:153
		{
			yylex.(*parser).unexpected("", "")
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:158
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:165
		{
			yyVAL.aststmts = plast.Stmts{yyDollar[1].node}
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:169
		{
			yyVAL.aststmts = plast.Stmts{yyDollar[1].node}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:171
		{
			yyVAL.aststmts = plast.Stmts{}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:173
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:203
		{
			yyVAL.node = yyDollar[2].node
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:209
		{
			yyVAL.node = yyDollar[2].node
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:216
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:220
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:224
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:228
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:232
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:239
		{
			yyVAL.node = yylex.(*parser).newListType(yyDollar[4].node)
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:243
		{
			yyVAL.node = yylex.(*parser).newListType(yyDollar[5].node)
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:249
		{
			yyVAL.node = yylex.(*parser).newMapType(yyDollar[3].node, yyDollar[5].node)
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:255
		{
			yyVAL.node = yyDollar[1].node
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:257
		{
			yyVAL.node = yyDollar[1].node
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:259
		{
			yyVAL.node = yyDollar[1].node
		}
	case 44:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:261
		{
			yyVAL.node = yyDollar[1].node
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:266
		{
			yyVAL.node = yyDollar[1].node
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:269
		{
			yyVAL.node = &ast.Node{}
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:271
		{
			yyVAL.node = &ast.Node{}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:273
		{
			yyVAL.node = &ast.Node{}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:275
		{
			yyVAL.node = &ast.Node{}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:292
		{
			yyVAL.node = yyDollar[2].node
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:294
		{
			yyVAL.node = yyDollar[2].node
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:296
		{
			yyVAL.node = yyDollar[2].node
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:298
		{
			yyVAL.node = yyDollar[2].node
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:300
		{
			yyVAL.node = yyDollar[2].node
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:302
		{
			yyVAL.node = yyDollar[2].node
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:306
		{
			yyVAL.node = yylex.(*parser).newBreakStmt(yyDollar[1].item.Pos)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:310
		{
			yyVAL.node = yylex.(*parser).newContinueStmt(yyDollar[1].item.Pos)
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:319
		{
			yyVAL.node = yylex.(*parser).newForInStmt(yyDollar[2].node, yyDollar[4].node, yyDollar[5].astblock, yyDollar[1].item, yyDollar[3].item)
		}
	case 71:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:330
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, yyDollar[4].node, yyDollar[6].node, yyDollar[7].astblock)
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:332
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, yyDollar[4].node, nil, yyDollar[6].astblock)
		}
	case 73:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:334
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, yyDollar[3].node, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:336
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, yyDollar[3].node, nil, yyDollar[5].astblock)
		}
	case 75:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:339
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, nil, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:341
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, nil, nil, yyDollar[5].astblock)
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:343
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, nil, yyDollar[4].node, yyDollar[5].astblock)
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:345
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, nil, nil, yyDollar[4].astblock)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:349
		{
			yyVAL.node = yylex.(*parser).newIfElifStmt(yyDollar[1].iflist)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:353
		{
			yyVAL.node = yylex.(*parser).newIfElifelseStmt(yyDollar[1].iflist, yyDollar[2].item, yyDollar[3].astblock)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:359
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:363
		{
			yyVAL.iflist = []*plast.IfStmtElem{yyDollar[1].ifitem}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:365
		{
			yyVAL.iflist = append(yyDollar[1].iflist, yyDollar[2].ifitem)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:369
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:375
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, yyDollar[2].aststmts, yyDollar[3].item)
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:379
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, plast.Stmts{}, yyDollar[2].item)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:384
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:389
		{
			yyVAL.nodes = []*plast.Node{yyDollar[1].node}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:391
		{
			yyVAL.nodes = []*plast.Node{yyDollar[1].node}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:395
		{
			yyVAL.node = yylex.(*parser).newVarbDeclStmt(yyDollar[1].item)
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[2].node, nil, nil)
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:400
		{
			yyVAL.node = yylex.(*parser).newVarbDeclStmt(yyDollar[1].item)
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[2].node, nil, yyDollar[4].node)
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:405
		{
			yyVAL.node = yylex.(*parser).newVarbDeclStmt(yyDollar[1].item)
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[2].node, yyDollar[4].node, nil)
		}
	case 95:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:410
		{
			yyVAL.node = yylex.(*parser).newVarbDeclStmt(yyDollar[1].item)
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[2].node, yyDollar[4].node, yyDollar[6].node)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:415
		{
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[3].node, nil, nil)
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:419
		{
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[3].node, nil, yyDollar[5].node)
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:423
		{
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[3].node, yyDollar[5].node, nil)
		}
	case 99:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:427
		{
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:434
		{
			yyVAL.node = yylex.(*parser).newAssignmentExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:436
		{
			yyVAL.node = yylex.(*parser).newAssignmentExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:440
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:442
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:444
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:446
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:448
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:450
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:452
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:454
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:456
		{
			yyVAL.node = yyDollar[1].node
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:458
		{
			yyVAL.node = yyDollar[1].node
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:460
		{
			yyVAL.node = yyDollar[1].node
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:462
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:464
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:466
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:468
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:470
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:475
		{
			yyVAL.node = yylex.(*parser).newParenExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[3].item)
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:477
		{
			yyVAL.node = yylex.(*parser).newParenExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[4].item)
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:489
		{
			yyVAL.node = &ast.Node{}
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:491
		{
			yyVAL.node = &ast.Node{}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:493
		{
			yyVAL.node = &ast.Node{}
		}
	case 125:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:496
		{
			yyVAL.node = &ast.Node{}
		}
	case 126:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:498
		{
			yyVAL.node = &ast.Node{}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:501
		{
			yyVAL.node = &ast.Node{}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:504
		{
			yyVAL.node = &ast.Node{}
		}
	case 129:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:506
		{
			yyVAL.node = &ast.Node{}
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:508
		{
			yyVAL.node = &ast.Node{}
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:511
		{
			yyVAL.node = &ast.Node{}
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:513
		{
			yyVAL.node = &ast.Node{}
		}
	case 133:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:516
		{
			yyVAL.node = &ast.Node{}
		}
	case 134:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:518
		{
			yyVAL.node = &ast.Node{}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:521
		{
			yyVAL.node = &ast.Node{}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:524
		{
			yyVAL.node = &ast.Node{}
		}
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:526
		{
			yyVAL.node = &ast.Node{}
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:528
		{
			yyVAL.node = &ast.Node{}
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:533
		{
			yyVAL.node = nil
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:537
		{
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[3].item.Pos)
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:541
		{
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:545
		{
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:549
		{
			yyVAL.node = yylex.(*parser).newListInitStartExpr(yyDollar[1].item.Pos, nil)
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:554
		{
			yyVAL.node = yylex.(*parser).newListInitStartExpr(yyDollar[2].item.Pos, nil)
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[3].item.Pos)
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:561
		{
			yyVAL.node = yylex.(*parser).newListInitStartExpr(yyDollar[1].item.Pos, nil)
			yyVAL.node = yylex.(*parser).newListInitAppendExpr(yyVAL.node, yyDollar[2].node)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:566
		{
			yyVAL.node = yylex.(*parser).newListInitStartExpr(yyDollar[2].item.Pos, yyDollar[1].node)
			yyVAL.node = yylex.(*parser).newListInitAppendExpr(yyVAL.node, yyDollar[3].node)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:571
		{
			yyVAL.node = yylex.(*parser).newListInitAppendExpr(yyVAL.node, yyDollar[3].node)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:580
		{
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:584
		{
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[3].item.Pos)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:588
		{
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[3].item.Pos)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:592
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[1].astblock.LBracePos.Pos, nil)
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[1].astblock.RBracePos.Pos)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:597
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[2].astblock.LBracePos.Pos, yyDollar[1].node)
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[2].astblock.RBracePos.Pos)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:602
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[2].astblock.LBracePos.Pos, yyDollar[1].node)
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[2].astblock.RBracePos.Pos)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:609
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[1].item.Pos, nil)
			// $$ = yylex.(*parser).newMapInitAppendExpr($$, $2, $4)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:614
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[2].node.Pos, yyDollar[1].item)
			// $$ = yylex.(*parser).newMapInitAppendExpr($$, $3, $5)
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:619
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[1].node.Pos, nil)
			// $$ = yylex.(*parser).newMapInitAppendExpr($$, $2, $4)
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:624
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[2].item.Pos, yyDollar[1].node)
			// $$ = yylex.(*parser).newMapInitAppendExpr($$, $3, $5)
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:629
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[1].node.Pos, nil)
			// $$ = yylex.(*parser).newMapInitAppendExpr($$, $2, $4)
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:634
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[2].item.Pos, yyDollar[1].node)
			// $$ = yylex.(*parser).newMapInitAppendExpr($$, $3, $5)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:639
		{
			yyVAL.node = yylex.(*parser).newMapInitAppendExpr(yyDollar[1].node, nil, nil)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:643
		{
			yyVAL.node = yylex.(*parser).newMapInitAppendExpr(yyDollar[1].node, nil, nil)
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:663
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, true)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:665
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, false)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:670
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:675
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteMultilineString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:683
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:685
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:691
		{
			yyVAL.node = yylex.(*parser).newNumberLiteral(yyDollar[1].item)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:712
		{
			yyVAL.node = yylex.(*parser).newIdentifier(yyDollar[1].item)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:716
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newIdentifier(yyDollar[1].item)
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:726
		{
			yyVAL.node = yylex.(*parser).newStructTypeDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[4].node, nil)
		}
	case 174:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:731
		{
			yyVAL.node = yylex.(*parser).newStructTypeDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[4].node, yyDollar[6].node)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:736
		{
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[3].node, nil)
		}
	case 176:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:740
		{
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[3].node, yyDollar[5].node)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:748
		{
			yyVAL.node = yyDollar[1].node
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:752
		{
			yyVAL.node = yyDollar[1].node
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:756
		{
			yyVAL.node = yylex.(*parser).newStructTypeDecl(yyDollar[2].node)
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:762
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenReturn(yyDollar[1].node, yyDollar[4].node)
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[5].astblock)
		}
	case 182:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:767
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenReturn(yyDollar[1].node, yyDollar[5].node)
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[6].astblock)
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:772
		{
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[3].astblock)
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:776
		{
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[4].astblock)
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:782
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, nil, nil)
		}
	case 186:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:787
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, yyDollar[6].node, nil)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:792
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, nil, nil)
		}
	case 188:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:796
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, yyDollar[5].node, nil)
		}
	case 189:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:800
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, nil, yyDollar[6].node)
		}
	case 190:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:805
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, yyDollar[6].node, yyDollar[8].node)
		}
	case 191:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:810
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, nil, yyDollar[5].node)
		}
	case 192:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:814
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	}
	goto yystack /* stack new state and value */
}
