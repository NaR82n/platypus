// Code generated by goyacc -o gram_y.go gram.y. DO NOT EDIT.

//line gram.y:7
package parser

import __yyfmt__ "fmt"

//line gram.y:7

import (
	plast "github.com/GuanceCloud/platypus/pkg/ast"
	// pltoken "github.com/GuanceCloud/platypus/pkg/token"
)

//line gram.y:16
type yySymType struct {
	yys      int
	aststmts plast.Stmts
	astblock *plast.BlockStmt
	node     *plast.Node
	item     Item
}

const SEMICOLON = 57346
const COMMA = 57347
const COMMENT = 57348
const DOT = 57349
const EOF = 57350
const ERROR = 57351
const ID = 57352
const NUMBER = 57353
const LEFT_PAREN = 57354
const LEFT_BRACKET = 57355
const LEFT_BRACE = 57356
const RIGHT_BRACE = 57357
const RIGHT_PAREN = 57358
const RIGHT_BRACKET = 57359
const SPACE = 57360
const STRING = 57361
const QUOTED_STRING = 57362
const MULTILINE_STRING = 57363
const FOR = 57364
const IN = 57365
const WHILE = 57366
const BREAK = 57367
const CONTINUE = 57368
const RETURN = 57369
const EOL = 57370
const COLON = 57371
const STR = 57372
const INT = 57373
const FLOAT = 57374
const BOOL = 57375
const LIST = 57376
const MAP = 57377
const STRUCT = 57378
const ANY = 57379
const LET = 57380
const FN = 57381
const RET_SYMB = 57382
const NOT = 57383
const BitwiseXOR = 57384
const BitwiseOR = 57385
const BitwiseNOT = 57386
const BitwiseAND = 57387
const CONST = 57388
const TRY = 57389
const CATCH = 57390
const operatorsStart = 57391
const ADD = 57392
const DIV = 57393
const GTE = 57394
const GT = 57395
const LT = 57396
const LTE = 57397
const MOD = 57398
const MUL = 57399
const NEQ = 57400
const EQ = 57401
const EQEQ = 57402
const SUB = 57403
const operatorsEnd = 57404
const keywordsStart = 57405
const TRUE = 57406
const FALSE = 57407
const IDENTIFIER = 57408
const AND = 57409
const OR = 57410
const NIL = 57411
const NULL = 57412
const IF = 57413
const ELIF = 57414
const ELSE = 57415
const keywordsEnd = 57416
const startSymbolsStart = 57417
const START_STMTS = 57418
const startSymbolsEnd = 57419
const UMINUS = 57420

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SEMICOLON",
	"COMMA",
	"COMMENT",
	"DOT",
	"EOF",
	"ERROR",
	"ID",
	"NUMBER",
	"LEFT_PAREN",
	"LEFT_BRACKET",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"RIGHT_PAREN",
	"RIGHT_BRACKET",
	"SPACE",
	"STRING",
	"QUOTED_STRING",
	"MULTILINE_STRING",
	"FOR",
	"IN",
	"WHILE",
	"BREAK",
	"CONTINUE",
	"RETURN",
	"EOL",
	"COLON",
	"STR",
	"INT",
	"FLOAT",
	"BOOL",
	"LIST",
	"MAP",
	"STRUCT",
	"ANY",
	"LET",
	"FN",
	"RET_SYMB",
	"NOT",
	"BitwiseXOR",
	"BitwiseOR",
	"BitwiseNOT",
	"BitwiseAND",
	"CONST",
	"TRY",
	"CATCH",
	"operatorsStart",
	"ADD",
	"DIV",
	"GTE",
	"GT",
	"LT",
	"LTE",
	"MOD",
	"MUL",
	"NEQ",
	"EQ",
	"EQEQ",
	"SUB",
	"operatorsEnd",
	"keywordsStart",
	"TRUE",
	"FALSE",
	"IDENTIFIER",
	"AND",
	"OR",
	"NIL",
	"NULL",
	"IF",
	"ELIF",
	"ELSE",
	"keywordsEnd",
	"startSymbolsStart",
	"START_STMTS",
	"startSymbolsEnd",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:629

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 119,
	5, 139,
	15, 139,
	-2, 61,
	-1, 271,
	1, 38,
	4, 38,
	8, 38,
	28, 38,
	-2, 135,
}

const yyPrivate = 57344

const yyLast = 1696

var yyAct = [...]int16{
	27, 244, 253, 247, 179, 174, 105, 115, 104, 17,
	118, 176, 8, 17, 121, 77, 75, 324, 286, 125,
	71, 285, 192, 238, 78, 103, 169, 82, 3, 74,
	106, 93, 94, 301, 92, 17, 98, 325, 316, 95,
	98, 99, 97, 119, 106, 99, 97, 124, 302, 17,
	96, 284, 191, 290, 264, 127, 306, 72, 234, 131,
	303, 133, 134, 135, 136, 137, 138, 295, 47, 139,
	280, 47, 170, 329, 328, 245, 317, 47, 144, 47,
	146, 73, 149, 141, 150, 151, 152, 153, 154, 155,
	156, 157, 158, 159, 160, 161, 162, 163, 164, 165,
	166, 143, 2, 55, 197, 260, 20, 184, 149, 173,
	196, 47, 181, 17, 167, 171, 114, 168, 149, 7,
	177, 287, 256, 70, 47, 183, 129, 185, 187, 200,
	21, 149, 194, 204, 109, 34, 315, 109, 201, 110,
	108, 107, 110, 108, 107, 101, 224, 293, 227, 230,
	195, 279, 93, 148, 241, 92, 235, 258, 57, 80,
	95, 98, 232, 304, 186, 106, 99, 97, 193, 130,
	223, 96, 112, 228, 140, 305, 132, 113, 111, 120,
	122, 123, 128, 236, 263, 231, 190, 142, 93, 94,
	243, 92, 249, 4, 313, 309, 95, 98, 84, 85,
	88, 89, 99, 97, 90, 289, 91, 96, 283, 93,
	94, 206, 92, 87, 86, 276, 242, 95, 98, 84,
	85, 88, 89, 99, 97, 237, 266, 268, 96, 188,
	119, 102, 1, 6, 5, 275, 17, 18, 122, 277,
	274, 278, 29, 68, 208, 175, 180, 31, 182, 180,
	282, 267, 269, 270, 251, 288, 272, 92, 252, 15,
	35, 56, 95, 98, 36, 294, 297, 117, 99, 97,
	37, 281, 212, 96, 39, 38, 210, 41, 222, 178,
	246, 40, 211, 207, 9, 310, 13, 312, 14, 12,
	11, 298, 299, 10, 300, 30, 208, 16, 22, 209,
	208, 76, 33, 28, 275, 307, 321, 19, 44, 320,
	0, 0, 0, 0, 180, 0, 0, 208, 0, 0,
	0, 0, 0, 318, 208, 332, 248, 0, 210, 254,
	0, 0, 210, 0, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 327, 0, 0, 0, 0, 331, 210,
	0, 209, 0, 0, 334, 209, 210, 0, 0, 0,
	208, 0, 0, 0, 208, 0, 0, 273, 208, 0,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 248, 0, 208, 0, 0, 0, 254, 208,
	0, 0, 210, 0, 208, 0, 210, 0, 0, 248,
	210, 0, 0, 0, 250, 208, 0, 0, 255, 0,
	208, 0, 0, 0, 0, 209, 210, 0, 0, 209,
	208, 210, 0, 209, 0, 261, 210, 0, 0, 208,
	0, 0, 262, 0, 0, 0, 0, 210, 0, 209,
	0, 0, 210, 0, 209, 0, 0, 0, 0, 209,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 213, 219, 0, 209, 0, 0, 291, 0,
	47, 0, 292, 0, 0, 209, 296, 0, 0, 0,
	217, 214, 215, 216, 209, 69, 0, 218, 0, 221,
	0, 0, 308, 0, 0, 0, 0, 311, 0, 0,
	0, 0, 314, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 319, 0, 0, 0, 20, 322, 0,
	59, 0, 0, 0, 48, 58, 54, 42, 326, 0,
	0, 0, 49, 47, 50, 23, 0, 333, 25, 24,
	26, 21, 0, 0, 0, 0, 0, 0, 69, 45,
	0, 66, 43, 0, 64, 0, 0, 65, 61, 67,
	32, 0, 0, 62, 0, 0, 0, 0, 0, 0,
	60, 0, 0, 0, 63, 0, 0, 51, 52, 0,
	0, 59, 53, 0, 46, 48, 58, 54, 42, 271,
	0, 0, 0, 49, 47, 50, 23, 0, 0, 25,
	24, 26, 0, 0, 0, 0, 0, 0, 0, 69,
	45, 0, 66, 43, 0, 64, 0, 0, 65, 61,
	67, 32, 0, 0, 62, 0, 0, 0, 0, 0,
	0, 60, 0, 0, 0, 63, 0, 0, 51, 52,
	0, 0, 59, 53, 0, 46, 48, 58, 54, 42,
	170, 0, 0, 0, 49, 47, 50, 23, 0, 0,
	25, 24, 26, 0, 0, 0, 0, 0, 0, 0,
	69, 45, 0, 66, 43, 0, 64, 0, 0, 65,
	61, 67, 32, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 60, 0, 0, 0, 63, 0, 0, 51,
	52, 0, 0, 59, 53, 0, 46, 48, 58, 54,
	42, 116, 0, 0, 0, 49, 47, 50, 23, 0,
	0, 25, 24, 26, 0, 0, 0, 0, 0, 0,
	0, 69, 45, 0, 66, 43, 0, 64, 0, 0,
	65, 61, 67, 32, 0, 0, 62, 0, 0, 0,
	0, 0, 0, 60, 0, 0, 0, 63, 0, 0,
	51, 52, 0, 0, 59, 53, 0, 46, 48, 58,
	54, 42, 100, 0, 0, 0, 49, 47, 50, 23,
	0, 0, 25, 24, 26, 0, 0, 0, 0, 0,
	0, 0, 69, 45, 0, 66, 43, 0, 64, 0,
	0, 65, 61, 67, 32, 0, 0, 62, 0, 0,
	0, 0, 0, 0, 60, 0, 0, 0, 63, 0,
	0, 51, 52, 0, 0, 59, 53, 0, 46, 48,
	58, 54, 42, 0, 0, 0, 0, 49, 47, 50,
	23, 0, 0, 25, 24, 26, 0, 0, 0, 0,
	0, 0, 0, 69, 45, 0, 66, 43, 0, 64,
	0, 0, 65, 61, 67, 32, 0, 0, 62, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 0, 63,
	0, 0, 51, 52, 0, 0, 59, 53, 0, 46,
	48, 58, 54, 81, 93, 94, 126, 92, 49, 47,
	50, 0, 95, 98, 84, 85, 88, 89, 99, 97,
	90, 0, 91, 96, 69, 0, 0, 0, 225, 87,
	64, 59, 0, 65, 61, 48, 58, 54, 81, 62,
	0, 0, 0, 49, 47, 50, 60, 0, 125, 0,
	63, 0, 0, 51, 52, 0, 0, 0, 53, 69,
	0, 0, 0, 0, 0, 64, 0, 0, 65, 61,
	0, 0, 0, 0, 62, 0, 0, 0, 0, 0,
	0, 60, 0, 0, 0, 63, 0, 0, 51, 52,
	59, 0, 0, 53, 48, 58, 54, 81, 202, 0,
	0, 0, 49, 47, 50, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	0, 0, 0, 0, 64, 59, 0, 65, 61, 48,
	58, 54, 81, 62, 0, 199, 0, 49, 47, 50,
	60, 0, 0, 0, 63, 0, 0, 51, 52, 0,
	0, 0, 53, 69, 0, 0, 0, 0, 0, 64,
	0, 0, 65, 61, 0, 0, 0, 0, 62, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 0, 63,
	0, 0, 51, 52, 59, 0, 0, 53, 48, 58,
	54, 81, 172, 0, 0, 0, 49, 47, 50, 0,
	0, 0, 59, 0, 0, 0, 48, 58, 54, 81,
	116, 0, 69, 0, 49, 47, 50, 0, 64, 0,
	0, 65, 61, 0, 0, 0, 0, 62, 0, 0,
	69, 0, 0, 0, 60, 0, 64, 0, 63, 65,
	61, 51, 52, 0, 0, 62, 53, 0, 0, 0,
	0, 0, 60, 0, 0, 0, 63, 0, 147, 51,
	52, 59, 0, 0, 53, 48, 58, 54, 81, 0,
	0, 0, 0, 49, 47, 50, 79, 0, 0, 59,
	0, 0, 0, 48, 58, 54, 81, 0, 0, 69,
	0, 49, 47, 50, 0, 64, 0, 0, 65, 61,
	0, 0, 0, 0, 62, 0, 0, 69, 0, 0,
	0, 60, 0, 64, 0, 63, 65, 61, 51, 52,
	0, 0, 62, 53, 0, 0, 0, 0, 0, 60,
	0, 0, 0, 63, 0, 0, 51, 52, 59, 0,
	0, 53, 48, 58, 54, 81, 0, 0, 0, 0,
	49, 47, 50, 0, 0, 0, 59, 0, 0, 0,
	48, 58, 54, 229, 0, 0, 69, 0, 49, 47,
	50, 0, 64, 0, 0, 65, 61, 0, 0, 0,
	0, 62, 0, 0, 69, 0, 0, 0, 60, 0,
	64, 239, 63, 65, 61, 51, 52, 0, 0, 62,
	53, 0, 0, 240, 0, 0, 60, 0, 0, 0,
	63, 0, 0, 51, 52, 0, 93, 94, 53, 92,
	0, 0, 0, 189, 95, 98, 84, 85, 88, 89,
	99, 97, 90, 0, 91, 96, 93, 94, 330, 92,
	0, 87, 86, 0, 95, 98, 84, 85, 88, 89,
	99, 97, 90, 83, 91, 96, 106, 0, 0, 0,
	0, 87, 86, 93, 94, 0, 92, 265, 0, 0,
	0, 95, 98, 84, 85, 88, 89, 99, 97, 90,
	0, 91, 96, 0, 93, 94, 0, 92, 87, 86,
	0, 0, 95, 98, 84, 85, 88, 89, 99, 97,
	90, 259, 91, 96, 0, 93, 94, 0, 92, 87,
	86, 0, 0, 95, 98, 84, 85, 88, 89, 99,
	97, 90, 257, 91, 96, 0, 93, 94, 0, 92,
	87, 86, 0, 0, 95, 98, 84, 85, 88, 89,
	99, 97, 90, 0, 91, 96, 0, 0, 0, 0,
	0, 87, 86, 0, 233, 0, 0, 0, 0, 93,
	94, 0, 92, 0, 0, 0, 0, 95, 98, 84,
	85, 88, 89, 99, 97, 90, 0, 91, 96, 93,
	94, 226, 92, 0, 87, 86, 189, 95, 98, 84,
	85, 88, 89, 99, 97, 90, 0, 91, 96, 93,
	94, 0, 92, 205, 87, 86, 0, 95, 98, 84,
	85, 88, 89, 99, 97, 90, 0, 91, 96, 93,
	94, 0, 92, 0, 87, 86, 0, 95, 98, 84,
	85, 88, 89, 99, 97, 90, 0, 91, 96, 0,
	93, 94, 203, 92, 87, 86, 0, 0, 95, 98,
	84, 85, 88, 89, 99, 97, 90, 0, 91, 96,
	198, 0, 0, 0, 0, 87, 86, 0, 93, 94,
	0, 92, 0, 0, 0, 0, 95, 98, 84, 85,
	88, 89, 99, 97, 90, 0, 91, 96, 145, 0,
	0, 0, 0, 87, 86, 0, 0, 93, 94, 0,
	92, 0, 0, 0, 0, 95, 98, 84, 85, 88,
	89, 99, 97, 90, 0, 91, 96, 0, 0, 0,
	0, 0, 87, 86, 0, 0, 93, 94, 0, 92,
	0, 0, 0, 0, 95, 98, 84, 85, 88, 89,
	99, 97, 90, 0, 91, 96, 93, 94, 0, 92,
	0, 87, 86, 0, 95, 98, 84, 85, 88, 89,
	99, 97, 90, 83, 91, 96, 93, 94, 0, 92,
	0, 87, 86, 0, 95, 98, 84, 85, 88, 89,
	99, 97, 90, 0, 91, 96, 93, 94, 0, 92,
	0, 87, 86, 0, 95, 98, 84, 85, 88, 89,
	99, 97, 90, 0, 91, 96,
}

var yyPact = [...]int16{
	26, 185, 513, -1000, -1000, -1000, 818, 102, 53, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -19,
	-1000, -1000, -57, 1162, -1000, -1000, 1221, 1594, 757, -1000,
	226, -1000, 151, -1000, 127, -1000, -1000, -1000, -1000, 165,
	-1000, -1000, 696, 48, 48, 48, 1221, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 879, 169, 109, 155, 1221, 163,
	1221, 1221, 1221, 1221, 1221, 1221, -1000, -1000, 1221, 161,
	102, 53, -1000, -1000, 175, 151, -1000, 1221, 1574, 1144,
	130, 1085, 1614, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
	1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
	-1000, 102, 48, -22, -1000, -1000, 635, 1067, 1221, 48,
	104, 1221, 48, 91, 102, 149, -1000, 1221, 224, 1284,
	174, -1000, -7, 154, 1332, 93, -1000, 1545, 1008, -1000,
	973, 1516, 1221, -1000, -1000, -1000, -1000, -1000, -1000, 1488,
	450, 53, 48, -1000, 1332, 914, 1467, 1239, 1221, 1447,
	1614, -11, -11, 852, 1634, -11, -11, 167, 167, 212,
	110, -11, -15, -15, -1000, -1000, -1000, 53, -1000, 173,
	-1000, 147, -1000, 1427, 29, -1000, 140, -1000, 48, 220,
	-36, 1264, -1000, 138, -1000, 53, -1000, 211, -1000, 1221,
	59, 1221, 450, 57, -1000, -1000, 450, 105, -1000, -1000,
	1407, 142, -1000, -1000, 1374, -1000, 88, -1000, -1000, -1000,
	-1000, -1000, -1000, 450, -1000, -1000, -1000, -1000, -1000, -40,
	450, 172, 25, -1000, 1353, 1239, 1239, 1332, -1000, 574,
	1332, 48, -1000, -1000, 1221, -1000, 210, -1000, 1221, -1000,
	1221, -1000, -1000, 1614, 135, 30, 48, 203, -8, 1614,
	-41, 106, 48, 200, 24, -1000, 450, -1000, -1000, -1000,
	450, 131, -1000, 51, 450, 1239, 1332, -1000, 1332, -1000,
	-1000, -1000, -1000, 4, 31, 1614, -1000, 1614, 146, 16,
	450, -1000, 190, -1000, 1221, 450, 1221, -1000, 189, -1000,
	450, -1000, -1000, -1000, 120, -2, 60, 1332, -1000, -1000,
	-1000, 450, -1000, 1221, -1000, 1221, 450, -1000, 151, -1000,
	1614, -42, 1614, -1000, -1000, -3, 450, 151, -1000, 58,
	56, 1311, 151, -1000, 1221, 450, -1000, -1000, 151, -1000,
	-1000, -1000, 1614, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 308, 25, 307, 8, 6, 303, 302, 301, 298,
	116, 297, 295, 293, 290, 289, 288, 286, 284, 0,
	5, 158, 283, 211, 103, 282, 281, 280, 3, 1,
	279, 4, 11, 135, 277, 275, 274, 272, 270, 10,
	7, 267, 264, 261, 260, 259, 2, 258, 254, 247,
	243, 242, 14, 237, 234, 233, 232, 12,
}

var yyR1 = [...]int8{
	0, 57, 57, 57, 57, 56, 56, 56, 54, 54,
	54, 55, 55, 55, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 19, 19, 19, 19, 19,
	19, 19, 19, 2, 2, 5, 6, 6, 4, 18,
	18, 7, 9, 9, 8, 14, 14, 14, 14, 14,
	14, 14, 14, 13, 15, 17, 16, 16, 53, 53,
	53, 45, 11, 3, 3, 51, 51, 51, 51, 28,
	28, 28, 28, 27, 27, 29, 29, 29, 12, 12,
	1, 1, 52, 52, 52, 52, 49, 49, 46, 46,
	47, 47, 48, 48, 48, 33, 23, 23, 23, 23,
	23, 23, 23, 25, 22, 22, 22, 22, 22, 24,
	24, 21, 37, 37, 37, 37, 44, 44, 44, 44,
	44, 44, 42, 42, 42, 43, 43, 43, 43, 50,
	50, 50, 38, 38, 38, 38, 38, 38, 39, 39,
	41, 41, 40, 40, 40, 35, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 31,
	31, 30, 30, 32, 32, 32, 20, 20, 26, 26,
	26, 26, 26, 26, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 2, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 3, 2, 1,
	3, 3, 1, 2, 3, 7, 6, 6, 5, 6,
	5, 5, 4, 5, 1, 1, 1, 2, 1, 1,
	1, 1, 3, 9, 8, 8, 7, 6, 5, 1,
	3, 3, 5, 2, 3, 1, 2, 1, 2, 3,
	1, 1, 1, 3, 5, 3, 5, 3, 1, 3,
	2, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 1, 1, 1, 1, 1, 4,
	5, 5, 6, 5, 4, 3, 1, 1, 1, 1,
	1, 1, 2, 3, 2, 2, 3, 2, 1, 3,
	4, 3, 3, 4, 4, 2, 3, 3, 3, 1,
	2, 3, 1, 2, 1, 3, 4, 4, 3, 4,
	3, 6, 8, 4, 3, 4, 3, 6, 8, 1,
	3, 2, 3, 1, 2, 1, 1, 0, 2, 2,
	2, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
}

var yyChk = [...]int16{
	-1000, -56, 76, 2, 8, -54, -55, -10, -57, -18,
	-13, -14, -15, -17, -16, -45, -11, -5, -53, -3,
	4, 28, -9, 22, 26, 25, 27, -19, -6, -51,
	-12, -49, 47, -7, -33, -44, -42, -38, -35, -36,
	-26, -34, 14, 39, -1, 36, 71, 20, 11, 19,
	21, 64, 65, 69, 13, -24, -43, -21, 12, 7,
	57, 45, 50, 61, 41, 44, 38, 46, -50, 35,
	-10, -57, 4, 28, 48, 73, -8, 72, -19, 4,
	-33, 14, -19, 59, 52, 53, 68, 67, 54, 55,
	58, 60, 45, 42, 43, 50, 61, 57, 51, 56,
	15, -10, 5, -2, -4, -5, 14, 14, 13, 7,
	12, 13, 7, 12, -10, -40, 15, -41, -39, -19,
	-33, -52, -33, -33, -19, 59, 17, -19, 13, 17,
	14, -19, 13, -19, -19, -19, -19, -19, -19, -19,
	13, -57, 12, -2, -19, 4, -19, 4, 23, -19,
	-19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
	-19, -19, -19, -19, -19, -19, -19, -57, -52, 48,
	15, -40, 15, -19, -20, -33, -32, 16, -30, -31,
	-33, -19, -33, -32, 16, -57, 15, -39, 5, 29,
	12, 59, 29, 14, -4, -2, 17, 11, 5, 17,
	-19, -40, 15, 16, -19, 5, -23, -22, -24, -21,
	-33, -25, -37, 12, 31, 32, 33, 30, 37, 13,
	57, 39, -33, -2, -19, 4, 4, -19, -2, 14,
	-19, 12, 15, 17, 29, 16, -31, 5, 59, 17,
	29, 16, 5, -19, -29, 16, -27, -28, -33, -19,
	-23, -48, -47, -46, -33, -23, 17, 5, 15, 17,
	17, -23, -23, 12, 29, 4, -19, -2, -19, -2,
	-2, 15, -2, -33, -20, -19, 5, -19, -19, 16,
	40, -2, -28, 5, 59, 29, 59, 15, -46, 5,
	29, -23, -23, 16, -29, 16, -23, -19, -2, -2,
	-2, 29, 17, 29, 17, 29, 40, -2, -23, 5,
	-19, -23, -19, 5, -23, 16, 40, 16, -2, -23,
	-20, -19, -23, -2, 59, 40, -23, -2, 16, 17,
	17, -2, -19, -23, -2,
}

var yyDef = [...]int16{
	0, -2, 0, 7, 6, 5, 9, 10, 12, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
	1, 2, 39, 0, 54, 55, 56, 61, 0, 58,
	59, 60, 0, 42, 25, 26, 27, 28, 29, 30,
	31, 32, 0, 0, 0, 0, 0, 95, 116, 117,
	118, 119, 120, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 81, 128, 0,
	8, 11, 3, 4, 0, 0, 43, 0, 0, 0,
	25, 0, 57, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	35, 0, 0, 0, 33, 34, 0, 0, 167, 0,
	0, 0, 0, 0, 0, 0, 135, 142, 144, -2,
	0, 78, 82, 0, 0, 0, 122, 125, 0, 124,
	0, 0, 0, 168, 169, 170, 171, 172, 173, 127,
	0, 13, 0, 40, 0, 0, 0, 0, 0, 139,
	62, 174, 175, 176, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 37, 79, 0,
	38, 0, 137, 166, 0, 148, 0, 150, 163, 165,
	159, 0, 154, 0, 156, 36, 132, 143, 140, 0,
	0, 0, 0, 0, 87, 41, 0, 0, 129, 123,
	126, 0, 136, 145, 0, 131, 0, 96, 97, 98,
	99, 100, 101, 0, 104, 105, 106, 107, 108, 0,
	0, 0, 0, 44, 0, 0, 0, 0, 52, 0,
	0, 0, 134, 146, 167, 149, 164, 161, 0, 153,
	0, 155, 141, 138, 0, 0, 75, 77, 69, 83,
	85, 0, 92, 94, 88, 109, 0, 130, 133, 147,
	0, 0, 103, 0, 0, 0, 0, 48, 0, 50,
	51, -2, 53, 0, 0, 166, 162, 160, 0, 0,
	0, 68, 76, 73, 0, 0, 0, 86, 93, 90,
	0, 110, 111, 102, 0, 115, 0, 0, 46, 47,
	49, 0, 151, 167, 157, 0, 0, 67, 0, 74,
	70, 71, 84, 91, 89, 114, 0, 0, 45, 0,
	0, 0, 0, 66, 0, 0, 113, 64, 0, 152,
	158, 65, 72, 112, 63,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:145
		{
			yylex.(*parser).parseResult = yyDollar[2].aststmts
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:148
		{
			yylex.(*parser).unexpected("", "")
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:153
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:160
		{
			yyVAL.aststmts = plast.Stmts{yyDollar[1].node}
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:164
		{
			yyVAL.aststmts = plast.Stmts{yyDollar[1].node}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:166
		{
			yyVAL.aststmts = plast.Stmts{}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:168
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:210
		{
			yyVAL.node = &ast.Node{}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:214
		{
			yyVAL.node = &ast.Node{}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:216
		{
			yyVAL.node = &ast.Node{}
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:220
		{
			yyVAL.node = &ast.Node{}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:224
		{
			yyVAL.node = &ast.Node{}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:226
		{
			yyVAL.node = &ast.Node{}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:230
		{
			yyVAL.node = &ast.Node{}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:234
		{
			yyVAL.node = &ast.Node{}
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:236
		{
			yyVAL.node = &ast.Node{}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:240
		{
			yyVAL.node = &ast.Node{}
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:249
		{
			yyVAL.node = &ast.Node{}
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:251
		{
			yyVAL.node = &ast.Node{}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:253
		{
			yyVAL.node = &ast.Node{}
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:255
		{
			yyVAL.node = &ast.Node{}
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:257
		{
			yyVAL.node = &ast.Node{}
		}
	case 50:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:259
		{
			yyVAL.node = &ast.Node{}
		}
	case 51:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:261
		{
			yyVAL.node = &ast.Node{}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:263
		{
			yyVAL.node = &ast.Node{}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:267
		{
			yyVAL.node = &ast.Node{}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:271
		{
			yyVAL.node = &ast.Node{}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:276
		{
			yyVAL.node = &ast.Node{}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:281
		{
			yyVAL.node = &ast.Node{}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:283
		{
			yyVAL.node = &ast.Node{}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:297
		{
			yyVAL.node = &ast.Node{}
		}
	case 63:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:302
		{
			yyVAL.node = &ast.Node{}
		}
	case 64:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:304
		{
			yyVAL.node = &ast.Node{}
		}
	case 65:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:312
		{
			yyVAL.node = &ast.Node{}
		}
	case 66:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:314
		{
			yyVAL.node = &ast.Node{}
		}
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:316
		{
			yyVAL.node = &ast.Node{}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:318
		{
			yyVAL.node = &ast.Node{}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:323
		{
			yyVAL.node = &ast.Node{}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:325
		{
			yyVAL.node = &ast.Node{}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:327
		{
			yyVAL.node = &ast.Node{}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:329
		{
			yyVAL.node = &ast.Node{}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:333
		{
			yyVAL.node = &ast.Node{}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:335
		{
			yyVAL.node = &ast.Node{}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:345
		{
			yyVAL.node = &ast.Node{}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:347
		{
			yyVAL.node = &ast.Node{}
		}
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:361
		{
			yyVAL.node = &ast.Node{}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:363
		{
			yyVAL.node = &ast.Node{}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:389
		{
			yyVAL.node = &ast.Node{}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:400
		{
			yyVAL.node = &ast.Node{}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:404
		{
			yyVAL.node = &ast.Node{}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:408
		{
			yyVAL.node = &ast.Node{}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:410
		{
			yyVAL.node = &ast.Node{}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:412
		{
			yyVAL.node = &ast.Node{}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:414
		{
			yyVAL.node = &ast.Node{}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:416
		{
			yyVAL.node = &ast.Node{}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:420
		{
			yyVAL.node = &ast.Node{}
		}
	case 110:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:422
		{
			yyVAL.node = &ast.Node{}
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:426
		{
			yyVAL.node = &ast.Node{}
		}
	case 112:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:430
		{
			yyVAL.node = &ast.Node{}
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:432
		{
			yyVAL.node = &ast.Node{}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:434
		{
			yyVAL.node = &ast.Node{}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:436
		{
			yyVAL.node = &ast.Node{}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:441
		{
			yyVAL.node = &ast.Node{}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:443
		{
			yyVAL.node = &ast.Node{}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:445
		{
			yyVAL.node = &ast.Node{}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:447
		{
			yyVAL.node = &ast.Node{}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:449
		{
			yyVAL.node = &ast.Node{}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:451
		{
			yyVAL.node = &ast.Node{}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:455
		{
			yyVAL.node = &ast.Node{}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:457
		{
			yyVAL.node = &ast.Node{}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:459
		{
			yyVAL.node = &ast.Node{}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:463
		{
			yyVAL.node = &ast.Node{}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:465
		{
			yyVAL.node = &ast.Node{}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:467
		{
			yyVAL.node = &ast.Node{}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:472
		{
			yyVAL.node = &ast.Node{}
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:474
		{
			yyVAL.node = &ast.Node{}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:476
		{
			yyVAL.node = &ast.Node{}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:480
		{
			yyVAL.node = &ast.Node{}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:484
		{
			yyVAL.node = &ast.Node{}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:490
		{
			yyVAL.node = &ast.Node{}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:495
		{
			yyVAL.node = &ast.Node{}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:497
		{
			yyVAL.node = &ast.Node{}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:501
		{
			yyVAL.node = &ast.Node{}
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:503
		{
			yyVAL.node = &ast.Node{}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:509
		{
			yyVAL.node = &ast.Node{}
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:517
		{
			yyVAL.node = &ast.Node{}
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:519
		{
			yyVAL.node = &ast.Node{}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:523
		{
			yyVAL.node = &ast.Node{}
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:527
		{
			yyVAL.node = &ast.Node{}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:529
		{
			yyVAL.node = &ast.Node{}
		}
	case 151:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:533
		{
			yyVAL.node = &ast.Node{}
		}
	case 152:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:535
		{
			yyVAL.node = &ast.Node{}
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:539
		{
			yyVAL.node = &ast.Node{}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:543
		{
			yyVAL.node = &ast.Node{}
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:547
		{
			yyVAL.node = &ast.Node{}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:549
		{
			yyVAL.node = &ast.Node{}
		}
	case 157:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:553
		{
			yyVAL.node = &ast.Node{}
		}
	case 158:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:555
		{
			yyVAL.node = &ast.Node{}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:559
		{
			yyVAL.node = &ast.Node{}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:561
		{
			yyVAL.node = &ast.Node{}
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:565
		{
			yyVAL.node = &ast.Node{}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:567
		{
			yyVAL.node = &ast.Node{}
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:577
		{
			yyVAL.node = nil
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:582
		{
			yyVAL.node = &ast.Node{}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:584
		{
			yyVAL.node = &ast.Node{}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:586
		{
			yyVAL.node = &ast.Node{}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:588
		{
			yyVAL.node = &ast.Node{}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:590
		{
			yyVAL.node = &ast.Node{}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:592
		{
			yyVAL.node = &ast.Node{}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:596
		{
			yyVAL.node = &ast.Node{}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:598
		{
			yyVAL.node = &ast.Node{}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:600
		{
			yyVAL.node = &ast.Node{}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:602
		{
			yyVAL.node = &ast.Node{}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:604
		{
			yyVAL.node = &ast.Node{}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:606
		{
			yyVAL.node = &ast.Node{}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:608
		{
			yyVAL.node = &ast.Node{}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:610
		{
			yyVAL.node = &ast.Node{}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:612
		{
			yyVAL.node = &ast.Node{}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:614
		{
			yyVAL.node = &ast.Node{}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:616
		{
			yyVAL.node = &ast.Node{}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:618
		{
			yyVAL.node = &ast.Node{}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:620
		{
			yyVAL.node = &ast.Node{}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:622
		{
			yyVAL.node = &ast.Node{}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:624
		{
			yyVAL.node = &ast.Node{}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:626
		{
			yyVAL.node = &ast.Node{}
		}
	}
	goto yystack /* stack new state and value */
}
