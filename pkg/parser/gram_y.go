// Code generated by goyacc -o gram_y.go gram.y. DO NOT EDIT.

//line gram.y:7
package parser

import __yyfmt__ "fmt"

//line gram.y:7

import (
	plast "github.com/GuanceCloud/platypus/pkg/ast"
	// pltoken "github.com/GuanceCloud/platypus/pkg/token"
)

//line gram.y:16
type yySymType struct {
	yys      int
	aststmts plast.Stmts
	astblock *plast.BlockStmt
	node     *plast.Node
	item     Item
}

const SEMICOLON = 57346
const COMMA = 57347
const COMMENT = 57348
const DOT = 57349
const EOF = 57350
const ERROR = 57351
const ID = 57352
const NUMBER = 57353
const LEFT_PAREN = 57354
const LEFT_BRACKET = 57355
const LEFT_BRACE = 57356
const RIGHT_BRACE = 57357
const RIGHT_PAREN = 57358
const RIGHT_BRACKET = 57359
const SPACE = 57360
const STRING = 57361
const QUOTED_STRING = 57362
const MULTILINE_STRING = 57363
const FOR = 57364
const IN = 57365
const WHILE = 57366
const BREAK = 57367
const CONTINUE = 57368
const RETURN = 57369
const EOL = 57370
const COLON = 57371
const STR = 57372
const INT = 57373
const FLOAT = 57374
const BOOL = 57375
const LIST = 57376
const MAP = 57377
const STRUCT = 57378
const ANY = 57379
const LET = 57380
const FN = 57381
const RET_SYMB = 57382
const NOT = 57383
const BitwiseXOR = 57384
const BitwiseOR = 57385
const BitwiseNOT = 57386
const BitwiseAND = 57387
const CONST = 57388
const operatorsStart = 57389
const ADD = 57390
const DIV = 57391
const GTE = 57392
const GT = 57393
const LT = 57394
const LTE = 57395
const MOD = 57396
const MUL = 57397
const NEQ = 57398
const EQ = 57399
const EQEQ = 57400
const SUB = 57401
const operatorsEnd = 57402
const keywordsStart = 57403
const TRUE = 57404
const FALSE = 57405
const IDENTIFIER = 57406
const AND = 57407
const OR = 57408
const NIL = 57409
const NULL = 57410
const IF = 57411
const ELIF = 57412
const ELSE = 57413
const keywordsEnd = 57414
const startSymbolsStart = 57415
const START_STMTS = 57416
const startSymbolsEnd = 57417
const UMINUS = 57418

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SEMICOLON",
	"COMMA",
	"COMMENT",
	"DOT",
	"EOF",
	"ERROR",
	"ID",
	"NUMBER",
	"LEFT_PAREN",
	"LEFT_BRACKET",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"RIGHT_PAREN",
	"RIGHT_BRACKET",
	"SPACE",
	"STRING",
	"QUOTED_STRING",
	"MULTILINE_STRING",
	"FOR",
	"IN",
	"WHILE",
	"BREAK",
	"CONTINUE",
	"RETURN",
	"EOL",
	"COLON",
	"STR",
	"INT",
	"FLOAT",
	"BOOL",
	"LIST",
	"MAP",
	"STRUCT",
	"ANY",
	"LET",
	"FN",
	"RET_SYMB",
	"NOT",
	"BitwiseXOR",
	"BitwiseOR",
	"BitwiseNOT",
	"BitwiseAND",
	"CONST",
	"operatorsStart",
	"ADD",
	"DIV",
	"GTE",
	"GT",
	"LT",
	"LTE",
	"MOD",
	"MUL",
	"NEQ",
	"EQ",
	"EQEQ",
	"SUB",
	"operatorsEnd",
	"keywordsStart",
	"TRUE",
	"FALSE",
	"IDENTIFIER",
	"AND",
	"OR",
	"NIL",
	"NULL",
	"IF",
	"ELIF",
	"ELSE",
	"keywordsEnd",
	"startSymbolsStart",
	"START_STMTS",
	"startSymbolsEnd",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:620

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 112,
	5, 136,
	15, 136,
	-2, 60,
	-1, 262,
	1, 37,
	4, 37,
	8, 37,
	28, 37,
	-2, 132,
}

const yyPrivate = 57344

const yyLast = 1761

var yyAct = [...]int16{
	26, 245, 236, 239, 136, 167, 172, 111, 108, 169,
	310, 8, 114, 276, 53, 55, 74, 72, 90, 69,
	275, 89, 118, 75, 92, 95, 79, 32, 3, 89,
	96, 94, 92, 95, 230, 93, 311, 137, 96, 94,
	17, 112, 138, 93, 17, 117, 185, 138, 274, 95,
	77, 304, 280, 120, 96, 94, 226, 124, 45, 126,
	127, 128, 129, 130, 131, 17, 313, 132, 294, 113,
	115, 116, 285, 270, 184, 139, 45, 141, 17, 144,
	134, 145, 146, 147, 148, 149, 150, 151, 152, 153,
	154, 155, 156, 157, 158, 159, 160, 161, 199, 70,
	2, 144, 166, 290, 237, 174, 252, 248, 45, 164,
	162, 144, 163, 19, 122, 291, 176, 303, 180, 178,
	215, 187, 193, 71, 144, 45, 197, 115, 138, 283,
	168, 173, 194, 175, 173, 177, 170, 20, 135, 45,
	45, 217, 269, 220, 223, 190, 233, 107, 201, 202,
	7, 189, 227, 277, 68, 250, 90, 91, 224, 89,
	179, 203, 92, 95, 81, 82, 85, 86, 96, 94,
	87, 138, 88, 93, 186, 98, 17, 123, 228, 84,
	83, 90, 91, 235, 89, 241, 133, 92, 95, 81,
	82, 85, 86, 96, 94, 87, 125, 88, 93, 173,
	201, 202, 121, 102, 201, 202, 255, 4, 103, 101,
	100, 240, 183, 203, 246, 301, 297, 203, 279, 257,
	259, 201, 202, 112, 273, 266, 234, 265, 201, 202,
	105, 267, 264, 268, 203, 106, 104, 90, 91, 229,
	89, 203, 272, 92, 95, 181, 278, 99, 1, 96,
	94, 6, 5, 18, 93, 28, 188, 286, 284, 66,
	17, 30, 243, 201, 202, 244, 240, 201, 202, 15,
	33, 54, 246, 34, 110, 298, 203, 300, 216, 35,
	203, 221, 205, 240, 242, 201, 202, 37, 247, 36,
	201, 202, 265, 39, 307, 201, 202, 306, 203, 171,
	238, 38, 204, 203, 200, 253, 9, 13, 203, 201,
	202, 316, 254, 14, 12, 11, 10, 206, 212, 201,
	202, 29, 203, 16, 21, 45, 201, 202, 73, 31,
	27, 42, 203, 0, 0, 210, 207, 208, 209, 203,
	67, 0, 211, 0, 214, 0, 0, 281, 102, 0,
	0, 282, 0, 103, 101, 100, 0, 258, 260, 261,
	213, 0, 263, 0, 143, 0, 0, 0, 0, 296,
	0, 0, 0, 0, 299, 0, 271, 90, 91, 302,
	89, 0, 0, 92, 95, 81, 82, 85, 86, 96,
	94, 0, 0, 308, 93, 287, 288, 19, 289, 0,
	57, 0, 0, 312, 46, 56, 52, 40, 295, 0,
	317, 0, 47, 45, 48, 22, 0, 0, 24, 23,
	25, 20, 0, 0, 0, 305, 0, 0, 67, 43,
	0, 64, 41, 0, 62, 309, 0, 63, 59, 65,
	0, 60, 0, 0, 0, 0, 0, 315, 58, 0,
	0, 0, 61, 0, 0, 49, 50, 0, 0, 57,
	51, 0, 44, 46, 56, 52, 40, 262, 0, 0,
	0, 47, 45, 48, 22, 0, 0, 24, 23, 25,
	0, 0, 0, 0, 0, 0, 0, 67, 43, 0,
	64, 41, 0, 62, 0, 0, 63, 59, 65, 0,
	60, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	0, 61, 0, 0, 49, 50, 0, 0, 57, 51,
	0, 44, 46, 56, 52, 40, 215, 0, 0, 0,
	47, 45, 48, 22, 0, 0, 24, 23, 25, 0,
	0, 0, 0, 0, 0, 0, 67, 43, 0, 64,
	41, 0, 62, 0, 0, 63, 59, 65, 0, 60,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
	61, 0, 0, 49, 50, 0, 0, 57, 51, 0,
	44, 46, 56, 52, 40, 109, 0, 0, 0, 47,
	45, 48, 22, 0, 0, 24, 23, 25, 0, 0,
	0, 0, 0, 0, 0, 67, 43, 0, 64, 41,
	0, 62, 0, 0, 63, 59, 65, 0, 60, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 0, 61,
	0, 0, 49, 50, 0, 0, 57, 51, 0, 44,
	46, 56, 52, 40, 97, 0, 0, 0, 47, 45,
	48, 22, 0, 0, 24, 23, 25, 0, 0, 0,
	0, 0, 0, 0, 67, 43, 0, 64, 41, 0,
	62, 0, 0, 63, 59, 65, 0, 60, 0, 0,
	0, 0, 0, 0, 58, 0, 0, 0, 61, 0,
	0, 49, 50, 0, 0, 57, 51, 0, 44, 46,
	56, 52, 40, 0, 0, 0, 0, 47, 45, 48,
	22, 0, 0, 24, 23, 25, 0, 0, 0, 0,
	0, 0, 0, 67, 43, 0, 64, 41, 0, 62,
	0, 0, 63, 59, 65, 0, 60, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 0, 61, 0, 0,
	49, 50, 0, 0, 57, 51, 0, 44, 46, 56,
	52, 78, 0, 0, 119, 0, 47, 45, 48, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 67, 0, 0, 0, 0, 0, 62, 0,
	0, 63, 59, 0, 0, 60, 0, 0, 0, 0,
	0, 0, 58, 0, 118, 0, 61, 0, 218, 49,
	50, 57, 0, 0, 51, 46, 56, 52, 78, 0,
	0, 0, 0, 47, 45, 48, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
	0, 0, 0, 0, 0, 62, 0, 0, 63, 59,
	0, 0, 60, 0, 0, 0, 0, 0, 0, 58,
	0, 0, 0, 61, 0, 0, 49, 50, 57, 0,
	0, 51, 46, 56, 52, 78, 195, 0, 0, 0,
	47, 45, 48, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 67, 0, 0, 0,
	0, 0, 62, 0, 0, 63, 59, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
	61, 0, 0, 49, 50, 57, 0, 0, 51, 46,
	56, 52, 78, 0, 0, 192, 0, 47, 45, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 67, 0, 0, 0, 0, 0, 62,
	0, 0, 63, 59, 0, 0, 60, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 0, 61, 0, 0,
	49, 50, 57, 0, 0, 51, 46, 56, 52, 78,
	165, 0, 0, 0, 47, 45, 48, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	67, 0, 0, 0, 0, 0, 62, 0, 0, 63,
	59, 0, 0, 60, 0, 0, 0, 0, 0, 0,
	58, 0, 0, 0, 61, 0, 0, 49, 50, 57,
	0, 0, 51, 46, 56, 52, 78, 109, 0, 0,
	0, 47, 45, 48, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 0, 0,
	0, 0, 0, 62, 0, 0, 63, 59, 0, 0,
	60, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	0, 61, 0, 142, 49, 50, 57, 0, 0, 51,
	46, 56, 52, 78, 0, 0, 0, 0, 47, 45,
	48, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 67, 0, 0, 0, 0, 0,
	62, 0, 0, 63, 59, 0, 0, 60, 0, 0,
	0, 0, 0, 0, 58, 0, 0, 0, 61, 0,
	76, 49, 50, 57, 0, 0, 51, 46, 56, 52,
	78, 0, 0, 0, 0, 47, 45, 48, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 67, 0, 0, 0, 0, 0, 62, 0, 0,
	63, 59, 0, 0, 60, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 0, 61, 0, 0, 49, 50,
	57, 0, 0, 51, 46, 56, 52, 78, 0, 0,
	0, 0, 47, 45, 48, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 67, 0,
	0, 0, 0, 0, 62, 0, 0, 63, 59, 0,
	0, 60, 0, 0, 0, 0, 0, 0, 58, 0,
	0, 0, 61, 0, 0, 49, 50, 57, 0, 0,
	51, 46, 56, 52, 222, 0, 0, 0, 0, 47,
	45, 48, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 67, 0, 0, 0, 0,
	292, 62, 0, 0, 63, 59, 0, 0, 60, 0,
	0, 0, 293, 0, 0, 58, 0, 0, 0, 61,
	0, 0, 49, 50, 0, 90, 91, 51, 89, 0,
	0, 92, 95, 81, 82, 85, 86, 96, 94, 87,
	231, 88, 93, 0, 0, 0, 0, 0, 84, 83,
	0, 0, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 91, 0, 89, 0,
	0, 92, 95, 81, 82, 85, 86, 96, 94, 87,
	182, 88, 93, 0, 0, 0, 0, 314, 84, 83,
	0, 0, 0, 90, 91, 0, 89, 0, 0, 92,
	95, 81, 82, 85, 86, 96, 94, 87, 80, 88,
	93, 256, 90, 91, 0, 89, 84, 83, 92, 95,
	81, 82, 85, 86, 96, 94, 87, 0, 88, 93,
	0, 0, 0, 0, 0, 84, 83, 0, 0, 0,
	0, 0, 0, 251, 0, 0, 0, 0, 0, 90,
	91, 0, 89, 0, 0, 92, 95, 81, 82, 85,
	86, 96, 94, 87, 249, 88, 93, 0, 90, 91,
	0, 89, 84, 83, 92, 95, 81, 82, 85, 86,
	96, 94, 87, 0, 88, 93, 0, 0, 0, 0,
	0, 84, 83, 0, 0, 225, 0, 0, 0, 0,
	0, 90, 91, 0, 89, 0, 0, 92, 95, 81,
	82, 85, 86, 96, 94, 87, 0, 88, 93, 0,
	90, 91, 0, 89, 84, 83, 92, 95, 81, 82,
	85, 86, 96, 94, 87, 182, 88, 93, 219, 0,
	0, 0, 0, 84, 83, 0, 0, 0, 90, 91,
	0, 89, 0, 0, 92, 95, 81, 82, 85, 86,
	96, 94, 87, 0, 88, 93, 198, 0, 0, 0,
	0, 84, 83, 0, 0, 0, 90, 91, 0, 89,
	0, 0, 92, 95, 81, 82, 85, 86, 96, 94,
	87, 0, 88, 93, 0, 0, 196, 0, 0, 84,
	83, 0, 0, 90, 91, 0, 89, 0, 0, 92,
	95, 81, 82, 85, 86, 96, 94, 87, 191, 88,
	93, 0, 90, 91, 0, 89, 84, 83, 92, 95,
	81, 82, 85, 86, 96, 94, 87, 0, 88, 93,
	0, 0, 140, 0, 0, 84, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 91, 0, 89, 0,
	0, 92, 95, 81, 82, 85, 86, 96, 94, 87,
	0, 88, 93, 0, 0, 0, 0, 0, 84, 83,
	90, 91, 0, 89, 0, 0, 92, 95, 81, 82,
	85, 86, 96, 94, 87, 0, 88, 93, 0, 90,
	91, 0, 89, 84, 83, 92, 95, 81, 82, 85,
	86, 96, 94, 87, 80, 88, 93, 0, 90, 91,
	0, 89, 84, 83, 92, 95, 81, 82, 85, 86,
	96, 94, 87, 0, 88, 93, 0, 90, 91, 0,
	89, 84, 83, 92, 95, 81, 82, 85, 86, 96,
	94, 87, 0, 88, 93, 0, 0, 0, 0, 0,
	84,
}

var yyPact = [...]int16{
	26, 199, 393, -1000, -1000, -1000, 688, 109, 95, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -54, 1146, -1000, -1000, 1203, 1657, 629, -1000, 242,
	-1000, -1000, 196, -1000, -1000, -1000, -1000, 223, -1000, -1000,
	570, 38, 38, 38, 1203, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 747, 189, 97, 163, 1203, 183, 1203, 1203,
	1203, 1203, 1203, 1203, -1000, -1000, 1203, 173, 109, 95,
	-1000, -1000, 157, -1000, 1203, 1638, 1089, 341, 1032, 1676,
	1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
	1203, 1203, 1203, 1203, 1203, 1203, 1203, -1000, 109, 38,
	975, 1203, 38, 120, 1203, 38, 119, 109, 145, -1000,
	1203, 240, 1351, 200, -1000, 17, 160, 114, 134, -1000,
	1613, 918, -1000, 861, 1580, 1203, -1000, -1000, -1000, -1000,
	-1000, -1000, 1561, 305, 95, -1000, -1000, -1000, 511, 114,
	804, 1534, 1260, 1203, 1506, 1676, 195, 195, 1695, 139,
	195, 195, 335, 335, -16, -24, 195, 0, 0, -1000,
	-1000, -1000, 95, -1000, 143, -1000, 1478, 27, -1000, 136,
	-1000, 38, 234, -23, 1323, -1000, 130, -1000, 95, -1000,
	221, -1000, 1203, 88, 1203, 305, 105, -1000, -1000, 305,
	90, -1000, -1000, 1459, 140, -1000, -1000, 1426, -1000, 89,
	-1000, -1000, -1000, -1000, -1000, -1000, 305, -1000, -1000, -1000,
	-1000, -1000, -35, 305, 194, -1000, -1000, 1407, 1260, 1260,
	114, -1000, 452, 114, -1000, -1000, 1203, -1000, 220, -1000,
	1203, -1000, 1203, -1000, -1000, 1676, 126, 33, 38, 219,
	-9, 1676, -44, 138, 38, 213, 23, -1000, 305, -1000,
	-1000, -1000, 305, 113, -1000, 56, 1260, 114, -1000, 114,
	-1000, -1000, -1000, -1000, 86, 1676, -1000, 1676, 1283, 28,
	305, -1000, 211, -1000, 1203, 305, 1203, -1000, 210, -1000,
	305, -1000, -1000, -1000, 101, 11, 114, -1000, -1000, -1000,
	-1000, 1203, -1000, 1203, 305, -1000, 157, -1000, 1676, -47,
	1676, -1000, -1000, -4, 305, -1000, 49, 1370, 157, -1000,
	1203, 305, -1000, -1000, -1000, -1000, 1676, -1000,
}

var yyPgo = [...]int16{
	0, 331, 138, 4, 37, 330, 329, 328, 324, 147,
	323, 321, 316, 315, 314, 313, 307, 306, 0, 5,
	15, 304, 98, 14, 302, 301, 300, 3, 2, 299,
	6, 9, 27, 293, 289, 287, 282, 279, 7, 8,
	274, 273, 271, 270, 269, 1, 265, 262, 261, 259,
	255, 12, 253, 252, 251, 248, 11,
}

var yyR1 = [...]int8{
	0, 56, 56, 56, 56, 55, 55, 55, 53, 53,
	53, 54, 54, 54, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 18, 18, 18, 18, 18, 18,
	18, 18, 2, 2, 4, 5, 5, 3, 17, 17,
	6, 8, 8, 7, 13, 13, 13, 13, 13, 13,
	13, 13, 12, 14, 16, 15, 15, 52, 52, 52,
	44, 10, 50, 50, 50, 50, 27, 27, 27, 27,
	26, 26, 28, 28, 28, 11, 11, 1, 1, 51,
	51, 51, 51, 48, 48, 45, 45, 46, 46, 47,
	47, 47, 32, 22, 22, 22, 22, 22, 22, 22,
	24, 21, 21, 21, 21, 21, 23, 23, 20, 36,
	36, 36, 36, 43, 43, 43, 43, 43, 43, 41,
	41, 41, 42, 42, 42, 42, 49, 49, 49, 37,
	37, 37, 37, 37, 37, 38, 38, 40, 40, 39,
	39, 39, 34, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 30, 30, 29, 29,
	31, 31, 31, 19, 19, 25, 25, 25, 25, 25,
	25, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 2, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 3, 3, 2, 1, 3,
	3, 1, 2, 3, 7, 6, 6, 5, 6, 5,
	5, 4, 5, 1, 1, 1, 2, 1, 1, 1,
	1, 3, 8, 7, 6, 5, 1, 3, 3, 5,
	2, 3, 1, 2, 1, 2, 3, 1, 1, 1,
	3, 5, 3, 5, 3, 1, 3, 2, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 1, 1, 1, 1, 1, 4, 5, 5, 6,
	5, 4, 3, 1, 1, 1, 1, 1, 1, 2,
	3, 2, 2, 3, 2, 1, 3, 4, 3, 3,
	4, 4, 2, 3, 3, 3, 1, 2, 3, 1,
	2, 1, 3, 4, 4, 3, 4, 3, 6, 8,
	4, 3, 4, 3, 6, 8, 1, 3, 2, 3,
	1, 2, 1, 1, 0, 2, 2, 2, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3,
}

var yyChk = [...]int16{
	-1000, -55, 74, 2, 8, -53, -54, -9, -56, -17,
	-12, -13, -14, -16, -15, -44, -10, -4, -52, 4,
	28, -8, 22, 26, 25, 27, -18, -5, -50, -11,
	-48, -6, -32, -43, -41, -37, -34, -35, -25, -33,
	14, 39, -1, 36, 69, 20, 11, 19, 21, 62,
	63, 67, 13, -23, -42, -20, 12, 7, 55, 45,
	48, 59, 41, 44, 38, 46, -49, 35, -9, -56,
	4, 28, 71, -7, 70, -18, 4, -32, 14, -18,
	57, 50, 51, 66, 65, 52, 53, 56, 58, 45,
	42, 43, 48, 59, 55, 49, 54, 15, -9, 5,
	14, 13, 7, 12, 13, 7, 12, -9, -39, 15,
	-40, -38, -18, -32, -51, -32, -32, -18, 57, 17,
	-18, 13, 17, 14, -18, 13, -18, -18, -18, -18,
	-18, -18, -18, 13, -56, -2, -3, -4, 14, -18,
	4, -18, 4, 23, -18, -18, -18, -18, -18, -18,
	-18, -18, -18, -18, -18, -18, -18, -18, -18, -18,
	-18, -18, -56, -51, -39, 15, -18, -19, -32, -31,
	16, -29, -30, -32, -18, -32, -31, 16, -56, 15,
	-38, 5, 29, 12, 57, 29, 14, -3, -2, 17,
	11, 5, 17, -18, -39, 15, 16, -18, 5, -22,
	-21, -23, -20, -32, -24, -36, 12, 31, 32, 33,
	30, 37, 13, 55, 39, 15, -2, -18, 4, 4,
	-18, -2, 14, -18, 15, 17, 29, 16, -30, 5,
	57, 17, 29, 16, 5, -18, -28, 16, -26, -27,
	-32, -18, -22, -47, -46, -45, -32, -22, 17, 5,
	15, 17, 17, -22, -22, 12, 4, -18, -2, -18,
	-2, -2, 15, -2, -19, -18, 5, -18, -18, 16,
	40, -2, -27, 5, 57, 29, 57, 15, -45, 5,
	29, -22, -22, 16, -28, 16, -18, -2, -2, -2,
	17, 29, 17, 29, 40, -2, -22, 5, -18, -22,
	-18, 5, -22, 16, 40, -2, -19, -18, -22, -2,
	57, 40, -22, 17, 17, -2, -18, -22,
}

var yyDef = [...]int16{
	0, -2, 0, 7, 6, 5, 9, 10, 12, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 1,
	2, 38, 0, 53, 54, 55, 60, 0, 57, 58,
	59, 41, 24, 25, 26, 27, 28, 29, 30, 31,
	0, 0, 0, 0, 0, 92, 113, 114, 115, 116,
	117, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 125, 0, 8, 11,
	3, 4, 0, 42, 0, 0, 0, 24, 0, 56,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 34, 0, 0,
	0, 164, 0, 0, 0, 0, 0, 0, 0, 132,
	139, 141, -2, 0, 75, 79, 0, 0, 0, 119,
	122, 0, 121, 0, 0, 0, 165, 166, 167, 168,
	169, 170, 124, 0, 13, 39, 32, 33, 0, 0,
	0, 0, 0, 0, 136, 61, 171, 172, 173, 174,
	175, 176, 177, 178, 179, 180, 181, 182, 183, 184,
	185, 186, 36, 76, 0, 134, 163, 0, 145, 0,
	147, 160, 162, 156, 0, 151, 0, 153, 35, 129,
	140, 137, 0, 0, 0, 0, 0, 84, 40, 0,
	0, 126, 120, 123, 0, 133, 142, 0, 128, 0,
	93, 94, 95, 96, 97, 98, 0, 101, 102, 103,
	104, 105, 0, 0, 0, 37, 43, 0, 0, 0,
	0, 51, 0, 0, 131, 143, 164, 146, 161, 158,
	0, 150, 0, 152, 138, 135, 0, 0, 72, 74,
	66, 80, 82, 0, 89, 91, 85, 106, 0, 127,
	130, 144, 0, 0, 100, 0, 0, 0, 47, 0,
	49, 50, -2, 52, 0, 163, 159, 157, 0, 0,
	0, 65, 73, 70, 0, 0, 0, 83, 90, 87,
	0, 107, 108, 99, 0, 112, 0, 45, 46, 48,
	148, 164, 154, 0, 0, 64, 0, 71, 67, 68,
	81, 88, 86, 111, 0, 44, 0, 0, 0, 63,
	0, 0, 110, 149, 155, 62, 69, 109,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:142
		{
			yylex.(*parser).parseResult = yyDollar[2].aststmts
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:145
		{
			yylex.(*parser).unexpected("", "")
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:150
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:157
		{
			yyVAL.aststmts = plast.Stmts{yyDollar[1].node}
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:161
		{
			yyVAL.aststmts = plast.Stmts{yyDollar[1].node}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:163
		{
			yyVAL.aststmts = plast.Stmts{}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:165
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:206
		{
			yyVAL.node = &ast.Node{}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:210
		{
			yyVAL.node = &ast.Node{}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:212
		{
			yyVAL.node = &ast.Node{}
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:216
		{
			yyVAL.node = &ast.Node{}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:220
		{
			yyVAL.node = &ast.Node{}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:222
		{
			yyVAL.node = &ast.Node{}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:226
		{
			yyVAL.node = &ast.Node{}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:230
		{
			yyVAL.node = &ast.Node{}
		}
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:232
		{
			yyVAL.node = &ast.Node{}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:236
		{
			yyVAL.node = &ast.Node{}
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:245
		{
			yyVAL.node = &ast.Node{}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:247
		{
			yyVAL.node = &ast.Node{}
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:249
		{
			yyVAL.node = &ast.Node{}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:251
		{
			yyVAL.node = &ast.Node{}
		}
	case 48:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:253
		{
			yyVAL.node = &ast.Node{}
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:255
		{
			yyVAL.node = &ast.Node{}
		}
	case 50:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:257
		{
			yyVAL.node = &ast.Node{}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:259
		{
			yyVAL.node = &ast.Node{}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:263
		{
			yyVAL.node = &ast.Node{}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:267
		{
			yyVAL.node = &ast.Node{}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:272
		{
			yyVAL.node = &ast.Node{}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:277
		{
			yyVAL.node = &ast.Node{}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:279
		{
			yyVAL.node = &ast.Node{}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:293
		{
			yyVAL.node = &ast.Node{}
		}
	case 62:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:302
		{
			yyVAL.node = &ast.Node{}
		}
	case 63:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:304
		{
			yyVAL.node = &ast.Node{}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:306
		{
			yyVAL.node = &ast.Node{}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:308
		{
			yyVAL.node = &ast.Node{}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:313
		{
			yyVAL.node = &ast.Node{}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:315
		{
			yyVAL.node = &ast.Node{}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:317
		{
			yyVAL.node = &ast.Node{}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:319
		{
			yyVAL.node = &ast.Node{}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:323
		{
			yyVAL.node = &ast.Node{}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:325
		{
			yyVAL.node = &ast.Node{}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:335
		{
			yyVAL.node = &ast.Node{}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:337
		{
			yyVAL.node = &ast.Node{}
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:351
		{
			yyVAL.node = &ast.Node{}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:353
		{
			yyVAL.node = &ast.Node{}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:379
		{
			yyVAL.node = &ast.Node{}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:390
		{
			yyVAL.node = &ast.Node{}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:394
		{
			yyVAL.node = &ast.Node{}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:398
		{
			yyVAL.node = &ast.Node{}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:400
		{
			yyVAL.node = &ast.Node{}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:402
		{
			yyVAL.node = &ast.Node{}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:404
		{
			yyVAL.node = &ast.Node{}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:406
		{
			yyVAL.node = &ast.Node{}
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:410
		{
			yyVAL.node = &ast.Node{}
		}
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:412
		{
			yyVAL.node = &ast.Node{}
		}
	case 108:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:416
		{
			yyVAL.node = &ast.Node{}
		}
	case 109:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:420
		{
			yyVAL.node = &ast.Node{}
		}
	case 110:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:422
		{
			yyVAL.node = &ast.Node{}
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:424
		{
			yyVAL.node = &ast.Node{}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:426
		{
			yyVAL.node = &ast.Node{}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:431
		{
			yyVAL.node = &ast.Node{}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:433
		{
			yyVAL.node = &ast.Node{}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:435
		{
			yyVAL.node = &ast.Node{}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:437
		{
			yyVAL.node = &ast.Node{}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:439
		{
			yyVAL.node = &ast.Node{}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:441
		{
			yyVAL.node = &ast.Node{}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:445
		{
			yyVAL.node = &ast.Node{}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:447
		{
			yyVAL.node = &ast.Node{}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:449
		{
			yyVAL.node = &ast.Node{}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:453
		{
			yyVAL.node = &ast.Node{}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:455
		{
			yyVAL.node = &ast.Node{}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:457
		{
			yyVAL.node = &ast.Node{}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:462
		{
			yyVAL.node = &ast.Node{}
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:464
		{
			yyVAL.node = &ast.Node{}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:466
		{
			yyVAL.node = &ast.Node{}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:470
		{
			yyVAL.node = &ast.Node{}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:474
		{
			yyVAL.node = &ast.Node{}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:480
		{
			yyVAL.node = &ast.Node{}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:485
		{
			yyVAL.node = &ast.Node{}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:487
		{
			yyVAL.node = &ast.Node{}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:491
		{
			yyVAL.node = &ast.Node{}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:493
		{
			yyVAL.node = &ast.Node{}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:499
		{
			yyVAL.node = &ast.Node{}
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:507
		{
			yyVAL.node = &ast.Node{}
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:509
		{
			yyVAL.node = &ast.Node{}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:513
		{
			yyVAL.node = &ast.Node{}
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:517
		{
			yyVAL.node = &ast.Node{}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:519
		{
			yyVAL.node = &ast.Node{}
		}
	case 148:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:523
		{
			yyVAL.node = &ast.Node{}
		}
	case 149:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:525
		{
			yyVAL.node = &ast.Node{}
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:529
		{
			yyVAL.node = &ast.Node{}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:533
		{
			yyVAL.node = &ast.Node{}
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:537
		{
			yyVAL.node = &ast.Node{}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:539
		{
			yyVAL.node = &ast.Node{}
		}
	case 154:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:543
		{
			yyVAL.node = &ast.Node{}
		}
	case 155:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:545
		{
			yyVAL.node = &ast.Node{}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:549
		{
			yyVAL.node = &ast.Node{}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:551
		{
			yyVAL.node = &ast.Node{}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:555
		{
			yyVAL.node = &ast.Node{}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:557
		{
			yyVAL.node = &ast.Node{}
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:567
		{
			yyVAL.node = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:572
		{
			yyVAL.node = &ast.Node{}
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:574
		{
			yyVAL.node = &ast.Node{}
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:576
		{
			yyVAL.node = &ast.Node{}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:578
		{
			yyVAL.node = &ast.Node{}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:580
		{
			yyVAL.node = &ast.Node{}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:582
		{
			yyVAL.node = &ast.Node{}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:586
		{
			yyVAL.node = &ast.Node{}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:588
		{
			yyVAL.node = &ast.Node{}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:590
		{
			yyVAL.node = &ast.Node{}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:592
		{
			yyVAL.node = &ast.Node{}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:594
		{
			yyVAL.node = &ast.Node{}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:596
		{
			yyVAL.node = &ast.Node{}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:598
		{
			yyVAL.node = &ast.Node{}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:600
		{
			yyVAL.node = &ast.Node{}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:602
		{
			yyVAL.node = &ast.Node{}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:604
		{
			yyVAL.node = &ast.Node{}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:606
		{
			yyVAL.node = &ast.Node{}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:608
		{
			yyVAL.node = &ast.Node{}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:610
		{
			yyVAL.node = &ast.Node{}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:612
		{
			yyVAL.node = &ast.Node{}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:614
		{
			yyVAL.node = &ast.Node{}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:616
		{
			yyVAL.node = &ast.Node{}
		}
	}
	goto yystack /* stack new state and value */
}
