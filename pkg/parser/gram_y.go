// Code generated by goyacc -o gram_y.go gram.y. DO NOT EDIT.

//line gram.y:7
package parser

import __yyfmt__ "fmt"

//line gram.y:7

import (
	plast "github.com/GuanceCloud/platypus/pkg/ast"
	// pltoken "github.com/GuanceCloud/platypus/pkg/token"
)

//line gram.y:16
type yySymType struct {
	yys      int
	aststmts plast.Stmts
	astblock *plast.BlockStmt

	ifitem *plast.IfStmtElem
	iflist []*plast.IfStmtElem
	node   *plast.Node
	nodes  []*plast.Node
	item   Item
}

const SEMICOLON = 57346
const COMMA = 57347
const COMMENT = 57348
const DOT = 57349
const EOF = 57350
const ERROR = 57351
const ID = 57352
const NUMBER = 57353
const LEFT_PAREN = 57354
const LEFT_BRACKET = 57355
const LEFT_BRACE = 57356
const RIGHT_BRACE = 57357
const RIGHT_PAREN = 57358
const RIGHT_BRACKET = 57359
const SPACE = 57360
const STRING = 57361
const QUOTED_STRING = 57362
const MULTILINE_STRING = 57363
const FOR = 57364
const IN = 57365
const WHILE = 57366
const BREAK = 57367
const CONTINUE = 57368
const RETURN = 57369
const EOL = 57370
const COLON = 57371
const STR = 57372
const INT = 57373
const FLOAT = 57374
const BOOL = 57375
const LIST = 57376
const MAP = 57377
const STRUCT = 57378
const ANY = 57379
const LET = 57380
const FN = 57381
const RET_SYMB = 57382
const operatorsStart = 57383
const ADD = 57384
const DIV = 57385
const GTE = 57386
const GT = 57387
const LT = 57388
const LTE = 57389
const MOD = 57390
const MUL = 57391
const NEQ = 57392
const EQ = 57393
const EQEQ = 57394
const SUB = 57395
const operatorsEnd = 57396
const keywordsStart = 57397
const TRUE = 57398
const FALSE = 57399
const IDENTIFIER = 57400
const AND = 57401
const OR = 57402
const NIL = 57403
const NULL = 57404
const IF = 57405
const ELIF = 57406
const ELSE = 57407
const keywordsEnd = 57408
const startSymbolsStart = 57409
const START_STMTS = 57410
const startSymbolsEnd = 57411
const BitwiseAND = 57412

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SEMICOLON",
	"COMMA",
	"COMMENT",
	"DOT",
	"EOF",
	"ERROR",
	"ID",
	"NUMBER",
	"LEFT_PAREN",
	"LEFT_BRACKET",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"RIGHT_PAREN",
	"RIGHT_BRACKET",
	"SPACE",
	"STRING",
	"QUOTED_STRING",
	"MULTILINE_STRING",
	"FOR",
	"IN",
	"WHILE",
	"BREAK",
	"CONTINUE",
	"RETURN",
	"EOL",
	"COLON",
	"STR",
	"INT",
	"FLOAT",
	"BOOL",
	"LIST",
	"MAP",
	"STRUCT",
	"ANY",
	"LET",
	"FN",
	"RET_SYMB",
	"operatorsStart",
	"ADD",
	"DIV",
	"GTE",
	"GT",
	"LT",
	"LTE",
	"MOD",
	"MUL",
	"NEQ",
	"EQ",
	"EQEQ",
	"SUB",
	"operatorsEnd",
	"keywordsStart",
	"TRUE",
	"FALSE",
	"IDENTIFIER",
	"AND",
	"OR",
	"NIL",
	"NULL",
	"IF",
	"ELIF",
	"ELSE",
	"keywordsEnd",
	"startSymbolsStart",
	"START_STMTS",
	"startSymbolsEnd",
	"BitwiseAND",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:735

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 212,
	1, 54,
	4, 54,
	8, 54,
	15, 54,
	28, 54,
	-2, 112,
}

const yyPrivate = 57344

const yyLast = 1185

var yyAct = [...]int16{
	24, 218, 54, 179, 115, 8, 3, 80, 78, 112,
	114, 40, 58, 74, 285, 67, 65, 55, 51, 69,
	140, 178, 82, 263, 61, 68, 62, 106, 93, 96,
	109, 227, 115, 181, 97, 95, 108, 112, 114, 94,
	70, 203, 163, 111, 53, 264, 279, 71, 113, 116,
	117, 270, 122, 228, 48, 255, 128, 256, 72, 217,
	214, 59, 60, 202, 162, 257, 63, 64, 265, 245,
	132, 105, 2, 242, 107, 49, 113, 96, 138, 134,
	235, 139, 97, 95, 142, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 126,
	136, 233, 138, 138, 225, 114, 168, 239, 171, 172,
	119, 160, 231, 180, 182, 183, 67, 127, 169, 235,
	187, 173, 118, 137, 181, 189, 68, 184, 190, 164,
	193, 75, 192, 120, 18, 195, 199, 197, 198, 196,
	138, 206, 207, 200, 210, 234, 161, 58, 137, 67,
	67, 104, 4, 175, 124, 76, 137, 235, 19, 68,
	68, 108, 103, 216, 123, 47, 220, 220, 93, 96,
	84, 85, 88, 89, 97, 95, 90, 125, 91, 94,
	133, 232, 129, 130, 137, 87, 86, 81, 212, 67,
	98, 77, 101, 102, 131, 241, 92, 1, 67, 68,
	100, 222, 204, 243, 165, 5, 220, 110, 68, 248,
	250, 137, 176, 99, 253, 32, 31, 220, 199, 197,
	198, 196, 67, 70, 224, 200, 220, 159, 220, 262,
	220, 17, 68, 28, 266, 15, 67, 223, 267, 268,
	205, 25, 166, 135, 211, 220, 68, 14, 271, 7,
	46, 137, 45, 212, 212, 137, 73, 276, 220, 44,
	220, 43, 30, 244, 158, 281, 220, 226, 50, 137,
	167, 282, 170, 34, 254, 174, 52, 35, 39, 36,
	284, 185, 57, 258, 56, 260, 286, 261, 38, 221,
	219, 37, 212, 137, 9, 137, 13, 12, 11, 201,
	10, 16, 269, 33, 177, 137, 20, 246, 79, 249,
	251, 252, 29, 6, 66, 275, 137, 277, 0, 0,
	0, 0, 0, 280, 0, 259, 215, 0, 0, 201,
	201, 0, 58, 0, 0, 67, 65, 55, 51, 69,
	131, 230, 0, 0, 61, 68, 62, 0, 272, 273,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 278, 0, 0, 0, 0, 0, 71, 0, 201,
	0, 0, 283, 0, 48, 0, 0, 0, 72, 0,
	201, 59, 60, 0, 0, 0, 63, 64, 0, 201,
	0, 201, 0, 201, 0, 49, 18, 0, 0, 58,
	0, 0, 67, 65, 55, 51, 69, 131, 201, 0,
	0, 61, 68, 62, 21, 0, 0, 23, 22, 0,
	19, 201, 0, 201, 0, 0, 0, 70, 26, 201,
	27, 41, 0, 0, 71, 0, 0, 0, 0, 0,
	0, 48, 0, 0, 0, 72, 0, 0, 59, 60,
	0, 0, 0, 63, 64, 42, 0, 18, 0, 0,
	58, 0, 49, 67, 65, 55, 51, 69, 0, 0,
	0, 0, 61, 68, 62, 21, 0, 0, 23, 22,
	0, 19, 0, 0, 0, 0, 0, 0, 70, 26,
	0, 27, 41, 0, 0, 71, 0, 0, 0, 0,
	0, 0, 48, 0, 0, 0, 72, 0, 0, 59,
	60, 0, 0, 0, 63, 64, 42, 0, 0, 0,
	0, 58, 0, 49, 67, 65, 55, 51, 69, 0,
	0, 0, 0, 61, 68, 62, 21, 0, 0, 23,
	22, 0, 0, 0, 0, 0, 0, 0, 0, 70,
	26, 0, 27, 41, 0, 0, 71, 0, 0, 247,
	0, 0, 0, 48, 0, 0, 0, 72, 0, 0,
	59, 60, 0, 0, 0, 63, 64, 42, 0, 208,
	0, 0, 58, 0, 49, 67, 65, 55, 51, 69,
	0, 0, 0, 0, 61, 68, 62, 93, 96, 84,
	85, 88, 89, 97, 95, 90, 0, 91, 94, 0,
	70, 0, 0, 0, 87, 86, 0, 71, 0, 0,
	0, 0, 0, 0, 48, 92, 240, 0, 72, 0,
	0, 59, 60, 0, 0, 58, 63, 64, 67, 65,
	55, 51, 69, 188, 0, 49, 0, 61, 68, 62,
	0, 93, 96, 84, 85, 88, 89, 97, 95, 90,
	0, 91, 94, 70, 0, 0, 0, 0, 87, 86,
	71, 0, 0, 0, 0, 0, 0, 48, 0, 92,
	0, 72, 0, 0, 59, 60, 236, 0, 0, 63,
	64, 0, 0, 0, 0, 0, 58, 0, 49, 67,
	65, 55, 51, 69, 0, 0, 186, 0, 61, 68,
	62, 93, 96, 84, 85, 88, 89, 97, 95, 90,
	0, 91, 94, 0, 70, 0, 0, 0, 87, 86,
	0, 71, 0, 0, 0, 0, 0, 0, 48, 92,
	0, 0, 72, 0, 0, 59, 60, 229, 0, 0,
	63, 64, 0, 0, 143, 0, 0, 58, 0, 49,
	67, 65, 55, 51, 69, 0, 0, 0, 0, 61,
	68, 62, 93, 96, 84, 85, 88, 89, 97, 95,
	90, 0, 91, 94, 0, 70, 0, 0, 0, 87,
	86, 0, 71, 0, 0, 209, 0, 0, 0, 48,
	92, 0, 0, 72, 0, 0, 59, 60, 0, 0,
	0, 63, 64, 0, 0, 0, 0, 0, 58, 0,
	49, 67, 65, 55, 51, 69, 0, 0, 121, 0,
	61, 68, 62, 93, 96, 84, 85, 88, 89, 97,
	95, 90, 0, 91, 94, 0, 70, 0, 0, 0,
	87, 86, 0, 71, 0, 0, 141, 0, 0, 0,
	48, 92, 0, 0, 72, 0, 0, 59, 60, 0,
	0, 0, 63, 64, 0, 0, 83, 0, 0, 58,
	0, 49, 67, 65, 55, 51, 69, 0, 0, 0,
	0, 61, 68, 62, 93, 96, 84, 85, 88, 89,
	97, 95, 90, 0, 91, 94, 0, 70, 0, 0,
	0, 87, 86, 0, 71, 0, 0, 0, 0, 0,
	0, 48, 92, 0, 0, 72, 0, 0, 59, 60,
	0, 0, 58, 63, 64, 67, 65, 55, 51, 69,
	0, 0, 49, 0, 61, 68, 62, 93, 96, 84,
	85, 88, 89, 97, 95, 90, 0, 91, 94, 0,
	70, 0, 0, 0, 87, 86, 0, 71, 0, 0,
	0, 0, 0, 0, 48, 92, 0, 0, 72, 0,
	0, 59, 60, 0, 0, 58, 63, 64, 67, 65,
	55, 51, 213, 0, 0, 49, 0, 61, 68, 62,
	93, 96, 84, 85, 88, 89, 97, 95, 90, 0,
	91, 94, 0, 70, 0, 0, 0, 87, 0, 0,
	71, 0, 0, 0, 191, 0, 0, 48, 92, 0,
	0, 72, 0, 0, 59, 60, 181, 0, 0, 63,
	64, 0, 0, 0, 0, 0, 0, 0, 49, 0,
	93, 96, 84, 85, 88, 89, 97, 95, 90, 0,
	91, 94, 0, 0, 0, 0, 194, 87, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	96, 84, 85, 88, 89, 97, 95, 90, 0, 91,
	94, 0, 0, 0, 0, 238, 87, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 96,
	84, 85, 88, 89, 97, 95, 90, 0, 91, 94,
	0, 0, 0, 0, 237, 87, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 96, 84,
	85, 88, 89, 97, 95, 90, 0, 91, 94, 0,
	0, 0, 0, 0, 87, 86, 93, 96, 84, 85,
	88, 89, 97, 95, 90, 92, 91, 94, 93, 96,
	84, 85, 88, 89, 97, 95, 90, 0, 91, 94,
	0, 0, 0, 0, 92,
}

var yyPact = [...]int16{
	4, 144, 453, -1000, -1000, -1000, 514, 130, 127, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 186, -1000, -1000, -1000,
	-57, 872, -1000, -1000, 905, 185, 139, 139, 146, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 20,
	23, 139, 925, -1000, -1000, -1000, -1000, 25, 925, 925,
	105, 811, 149, -1000, 103, 925, -1000, -1000, 169, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 172, -1000, -1000, 325,
	167, -1000, -1000, 130, 127, -1000, -1000, 139, 88, -1000,
	925, -3, 852, 750, 925, 925, 925, 925, 925, 925,
	925, 925, 925, 925, 925, 925, 925, 925, 212, -1000,
	-1000, 97, 13, 89, 226, 925, 140, 925, 925, 140,
	141, 126, 5, 925, 925, 140, -1000, 1126, -1000, 689,
	-1000, -1000, 905, -1000, 628, -1000, -1000, 325, 1008, 925,
	-1000, -1000, 1037, 106, 127, 12, -1000, -1000, 392, 126,
	925, 575, 791, 978, -14, -14, 958, 1114, -14, -14,
	-14, -14, 1126, 34, 34, -1000, -1000, -1000, 31, -1000,
	179, -1000, 925, 188, 188, -1000, 64, 2, 905, 148,
	92, 905, 730, 148, 92, 139, -1000, 96, -1000, 129,
	905, -1000, 905, 669, 148, 92, -1000, 905, -1000, 1095,
	1066, -1000, 91, 609, 925, 56, -1000, -1000, -1000, -1000,
	-1000, -1000, 925, 188, 54, -1000, 126, 555, 978, 978,
	126, -1000, -1000, 392, 188, 26, 905, 6, -1000, -1000,
	-1000, -1000, 48, 188, 88, 188, -1000, 188, 925, -1000,
	-6, -1000, 52, 925, -1000, -1000, -1000, 925, 925, -1000,
	-1000, 905, 188, 905, 0, -1000, -1000, 978, 126, -1000,
	126, -1000, -1000, 1037, -1000, 188, 925, 188, -1000, -1000,
	88, -5, 905, 188, 925, -1000, 905, 905, 905, -1000,
	925, 126, -1000, -1000, -1000, -1000, 905, -1000, -1000, 925,
	-37, 905, 905, -1000, 905, 925, 905,
}

var yyPgo = [...]int16{
	0, 314, 100, 44, 202, 313, 312, 308, 306, 304,
	249, 303, 301, 300, 298, 297, 296, 294, 291, 2,
	290, 1, 59, 289, 165, 288, 284, 282, 279, 11,
	278, 0, 277, 276, 273, 268, 262, 261, 259, 252,
	250, 247, 241, 235, 233, 231, 216, 215, 197, 5,
	3,
}

var yyR1 = [...]int8{
	0, 49, 49, 49, 49, 48, 48, 48, 4, 4,
	4, 5, 5, 5, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 41, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 46, 47, 16, 15, 13,
	14, 14, 14, 14, 14, 14, 14, 14, 17, 17,
	6, 8, 8, 7, 2, 2, 3, 18, 18, 18,
	18, 9, 9, 9, 25, 25, 12, 12, 12, 12,
	12, 12, 12, 12, 11, 11, 11, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 27, 27, 27, 27,
	27, 28, 28, 50, 50, 29, 29, 29, 30, 30,
	30, 30, 30, 30, 34, 34, 34, 35, 35, 35,
	32, 32, 32, 32, 33, 33, 33, 33, 36, 36,
	36, 36, 36, 37, 37, 38, 38, 39, 39, 40,
	40, 24, 24, 1, 1, 22, 22, 22, 22, 23,
	21, 21, 21, 21, 21, 21, 20, 19, 42, 42,
	42, 42, 42, 43, 43, 43, 45, 45, 45, 45,
	44, 44, 44, 44, 44, 44, 44, 44,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 2, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 1, 1, 5,
	7, 6, 6, 5, 6, 5, 5, 4, 1, 3,
	3, 1, 2, 3, 1, 3, 2, 4, 3, 5,
	4, 3, 2, 1, 1, 1, 2, 4, 4, 6,
	3, 5, 5, 7, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 1, 2, 4, 4, 4, 3, 3,
	3, 3, 3, 3, 2, 3, 2, 2, 3, 2,
	2, 3, 1, 2, 4, 5, 5, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 3, 5, 4, 6,
	3, 5, 2, 2, 3, 3, 5, 6, 3, 4,
	4, 6, 3, 5, 6, 8, 5, 7,
}

var yyChk = [...]int16{
	-1000, -48, 68, 2, 8, -4, -5, -10, -49, -17,
	-13, -14, -15, -16, -41, -43, -12, -45, 4, 28,
	-8, 22, 26, 25, -31, -42, 36, 38, -44, -6,
	-36, -46, -47, -11, -34, -32, -28, -18, -25, -30,
	-29, 39, 63, -37, -38, -39, -40, -24, 49, 70,
	-35, 13, -33, -3, -19, 12, -26, -27, 7, 56,
	57, 19, 21, 61, 62, 11, -1, 10, 20, 14,
	35, 42, 53, -10, -49, 4, 28, 5, 65, -7,
	64, -24, -31, 4, 44, 45, 60, 59, 46, 47,
	50, 52, 70, 42, 53, 49, 43, 48, 5, 28,
	15, -24, -24, 16, 5, 51, 7, 51, 13, 7,
	-24, -31, 12, 51, 13, 7, -31, -31, 17, 5,
	28, 17, -31, 15, 5, 28, -3, 14, -31, 13,
	11, 15, -31, 13, -49, -24, -2, -3, 14, -31,
	23, 4, -31, 4, -31, -31, -31, -31, -31, -31,
	-31, -31, -31, -31, -31, -31, -31, -31, -24, 15,
	14, -3, 51, 29, 40, -2, 16, -24, -31, -29,
	-24, -31, -31, -29, -24, 12, -2, -9, 16, -50,
	-31, 28, -31, -31, -29, -24, 17, -31, 15, -31,
	-31, 16, -50, -31, 29, -21, 33, 31, 32, 30,
	37, -24, 51, 29, -4, -2, -31, -31, 4, 4,
	-31, -2, -3, 14, 29, -24, -31, -22, -21, -20,
	-19, -23, 13, 49, -22, 40, -2, 29, 51, 17,
	-24, 16, -50, 5, 16, 28, 17, 29, 29, 16,
	17, -31, 17, -31, -22, 15, -2, 4, -31, -2,
	-31, -2, -2, -31, -22, 29, 51, 17, -22, -2,
	-22, -22, -31, 29, 51, 16, -31, -31, -31, -22,
	51, -31, -2, -2, -2, -22, -31, -22, -2, 51,
	-22, -31, -31, -2, -31, 51, -31,
}

var yyDef = [...]int16{
	0, -2, 0, 7, 6, 5, 9, 10, 12, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 1, 2,
	48, 0, 38, 37, 23, 0, 0, 0, 0, 51,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 0, 0, 118, 119, 120, 121, 122, 0, 0,
	0, 0, 0, 112, 0, 0, 64, 65, 0, 123,
	124, 125, 126, 127, 128, 129, 0, 131, 132, 0,
	0, 133, 134, 8, 11, 3, 4, 0, 0, 52,
	0, 122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 152,
	153, 0, 66, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 35, 36, 104, 0,
	109, 106, 107, 110, 0, 117, 113, 0, 0, 0,
	130, 56, 0, 0, 13, 70, 49, 54, 0, 0,
	0, 0, 0, 0, 77, 78, 79, 80, 81, 82,
	83, 84, 85, 86, 87, 88, 89, 90, 150, 154,
	0, 155, 0, 0, 0, 158, 0, 162, 75, 102,
	103, 74, 0, 100, 101, 0, 50, 0, 58, 0,
	63, 93, 76, 0, 98, 99, 105, 108, 111, 0,
	0, 91, 0, 0, 0, 0, 140, 141, 142, 143,
	144, 145, 0, 0, 0, 53, 0, 0, 0, 0,
	0, 47, -2, 0, 0, 148, 67, 68, 135, 136,
	137, 138, 0, 0, 0, 0, 159, 0, 0, 97,
	160, 57, 0, 62, 60, 94, 95, 0, 0, 92,
	96, 114, 0, 71, 72, 55, 39, 0, 0, 45,
	0, 43, 46, 23, 151, 0, 0, 0, 139, 156,
	0, 163, 166, 0, 0, 59, 61, 116, 115, 147,
	0, 0, 41, 44, 42, 149, 69, 146, 157, 0,
	161, 164, 73, 40, 167, 0, 165,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:143
		{
			yylex.(*parser).parseResult = yyDollar[2].aststmts
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:146
		{
			yylex.(*parser).unexpected("", "")
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:151
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:158
		{
			yyVAL.aststmts = plast.Stmts{yyDollar[1].node}
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:162
		{
			yyVAL.aststmts = plast.Stmts{yyDollar[1].node}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:164
		{
			yyVAL.aststmts = plast.Stmts{}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:166
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:193
		{
			yyVAL.node = yyDollar[2].node
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:199
		{
			yyVAL.node = yyDollar[2].node
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:205
		{
			yyVAL.node = yylex.(*parser).newBreakStmt(yyDollar[1].item.Pos)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:209
		{
			yyVAL.node = yylex.(*parser).newContinueStmt(yyDollar[1].item.Pos)
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:218
		{
			yyVAL.node = yylex.(*parser).newForInStmt(yyDollar[2].node, yyDollar[4].node, yyDollar[5].astblock, yyDollar[1].item, yyDollar[3].item)
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:229
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, yyDollar[4].node, yyDollar[6].node, yyDollar[7].astblock)
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:231
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, yyDollar[4].node, nil, yyDollar[6].astblock)
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:233
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, yyDollar[3].node, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:235
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, yyDollar[3].node, nil, yyDollar[5].astblock)
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:238
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, nil, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 45:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:240
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, nil, nil, yyDollar[5].astblock)
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:242
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, nil, yyDollar[4].node, yyDollar[5].astblock)
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:244
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, nil, nil, yyDollar[4].astblock)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:248
		{
			yyVAL.node = yylex.(*parser).newIfElifStmt(yyDollar[1].iflist)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:252
		{
			yyVAL.node = yylex.(*parser).newIfElifelseStmt(yyDollar[1].iflist, yyDollar[2].item, yyDollar[3].astblock)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:258
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:262
		{
			yyVAL.iflist = []*plast.IfStmtElem{yyDollar[1].ifitem}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:264
		{
			yyVAL.iflist = append(yyDollar[1].iflist, yyDollar[2].ifitem)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:268
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:274
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, yyDollar[2].aststmts, yyDollar[3].item)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:278
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, plast.Stmts{}, yyDollar[2].item)
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:283
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, yyDollar[3].nodes, yyDollar[2].item, yyDollar[4].item)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:287
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, nil, yyDollar[2].item, yyDollar[3].item)
		}
	case 59:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:291
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, yyDollar[3].nodes, yyDollar[2].item, yyDollar[5].item)
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:295
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, nil, yyDollar[2].item, yyDollar[4].item)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:302
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:307
		{
			yyVAL.nodes = []*plast.Node{yyDollar[1].node}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:314
		{
			yyVAL.node = yylex.(*parser).newVarbDeclStmt(yyDollar[1].item)
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[2].node, nil, nil)
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:319
		{
			yyVAL.node = yylex.(*parser).newVarbDeclStmt(yyDollar[1].item)
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[2].node, nil, yyDollar[4].node)
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:324
		{
			yyVAL.node = yylex.(*parser).newVarbDeclStmt(yyDollar[1].item)
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[2].node, yyDollar[4].node, nil)
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:329
		{
			yyVAL.node = yylex.(*parser).newVarbDeclStmt(yyDollar[1].item)
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[2].node, yyDollar[4].node, yyDollar[6].node)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:334
		{
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[3].node, nil, nil)
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:338
		{
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[3].node, nil, yyDollar[5].node)
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:342
		{
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[3].node, yyDollar[5].node, nil)
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:346
		{
			yyVAL.node = yylex.(*parser).varbDeclAppend(yyVAL.node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:353
		{
			yyVAL.node = yylex.(*parser).newAssignmentExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:355
		{
			yyVAL.node = yylex.(*parser).newAssignmentExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:357
		{
			yyVAL.node = yylex.(*parser).newAssignmentExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:361
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:363
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:365
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:367
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:369
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:371
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:373
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:375
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:377
		{
			yyVAL.node = yyDollar[1].node
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:384
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:386
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:388
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:390
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:392
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:397
		{
			yyVAL.node = yylex.(*parser).newParenExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[3].item)
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:399
		{
			yyVAL.node = yylex.(*parser).newParenExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[4].item)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:408
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].item)
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:411
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(nil, yyDollar[2].item, yyDollar[3].node, yyDollar[4].item)
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:413
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].item)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:420
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:424
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:428
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:432
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:436
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:440
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:447
		{
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:451
		{
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:455
		{
			yyVAL.node = yylex.(*parser).newListInitStartExpr(yyDollar[1].item.Pos, nil)
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:462
		{
			yyVAL.node = yylex.(*parser).newListInitStartExpr(yyDollar[1].item.Pos, nil)
			yyVAL.node = yylex.(*parser).newListInitAppendExpr(yyVAL.node, yyDollar[2].node)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:472
		{
			yyVAL.node = yylex.(*parser).newListInitAppendExpr(yyVAL.node, yyDollar[3].node)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:480
		{
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:484
		{
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[3].item.Pos)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:488
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[1].astblock.LBracePos.Pos, nil)
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[1].astblock.RBracePos.Pos)
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:493
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[2].astblock.LBracePos.Pos, yyDollar[1].node)
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[2].astblock.RBracePos.Pos)
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:500
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[1].item.Pos, nil)
			yyVAL.node = yylex.(*parser).newMapInitAppendExpr(yyVAL.node, yyDollar[2].node, yyDollar[4].node)
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:505
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[2].item.Pos, yyDollar[1].node)
			yyVAL.node = yylex.(*parser).newMapInitAppendExpr(yyVAL.node, yyDollar[3].node, yyDollar[5].node)
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:510
		{
			yyVAL.node = yylex.(*parser).newMapInitAppendExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:531
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, true)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:533
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, false)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:538
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:543
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteMultilineString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:551
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:553
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:559
		{
			yyVAL.node = yylex.(*parser).newNumberLiteral(yyDollar[1].item)
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:561
		{
			num := yylex.(*parser).newNumberLiteral(yyDollar[2].item)
			switch yyDollar[1].item.Typ {
			case ADD: // pass
			case SUB:
				if num.NodeType == plast.TypeFloatLiteral {
					num.FloatLiteral.Val = -num.FloatLiteral.Val
					num.FloatLiteral.Start = yylex.(*parser).posCache.LnCol(yyDollar[1].item.Pos)
				} else {
					num.IntegerLiteral.Val = -num.IntegerLiteral.Val
					num.IntegerLiteral.Start = yylex.(*parser).posCache.LnCol(yyDollar[1].item.Pos)

				}
			}
			yyVAL.node = num
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:580
		{
			yyVAL.node = yylex.(*parser).newIdentifier(yyDollar[1].item)
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:584
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newIdentifier(yyDollar[1].item)
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:597
		{
			yyVAL.node = yyDollar[2].node
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:603
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:607
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:611
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:615
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:619
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].item.Val, 0)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:623
		{
			yyVAL.node = yylex.(*parser).newNamedType(yyDollar[1].node.Identifier.Name, 0)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:630
		{
			yyVAL.node = yylex.(*parser).newListType(yyDollar[3].node)
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:636
		{
			yyVAL.node = yylex.(*parser).newMapType(yyDollar[3].node, yyDollar[5].node)
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:643
		{
			yyVAL.node = yylex.(*parser).newStructTypeDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[4].node, nil)
		}
	case 149:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:648
		{
			yyVAL.node = yylex.(*parser).newStructTypeDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[4].node, yyDollar[6].node)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:653
		{
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[3].node, nil)
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:657
		{
			yyVAL.node = yylex.(*parser).structTypeAppendField(yyVAL.node, yyDollar[3].node, yyDollar[5].node)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:665
		{
			yyVAL.node = yyDollar[1].node
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:669
		{
			yyVAL.node = yyDollar[1].node
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:673
		{
			yyVAL.node = yylex.(*parser).newStructTypeDecl(yyDollar[2].node)
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:679
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenReturn(yyDollar[1].node, yyDollar[4].node)
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[5].astblock)
		}
	case 157:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:684
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenReturn(yyDollar[1].node, yyDollar[5].node)
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[6].astblock)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:689
		{
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[3].astblock)
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:693
		{
			yyVAL.node = yylex.(*parser).fnDeclEnd(yyVAL.node, yyDollar[4].astblock)
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:699
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, nil, nil)
		}
	case 161:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:704
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, yyDollar[6].node, nil)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:709
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, nil, nil)
		}
	case 163:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:713
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, yyDollar[5].node, nil)
		}
	case 164:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:717
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, nil, yyDollar[6].node)
		}
	case 165:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:722
		{
			yyVAL.node = yylex.(*parser).newFnDecl(yyDollar[2].node)
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[4].node, yyDollar[6].node, yyDollar[8].node)
		}
	case 166:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:727
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, nil, yyDollar[5].node)
		}
	case 167:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:731
		{
			yyVAL.node = yylex.(*parser).fnDeclAppenParam(yyVAL.node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	}
	goto yystack /* stack new state and value */
}
