// Code generated by goyacc -o gram_y.go gram.y. DO NOT EDIT.

//line gram.y:7
package parser

import __yyfmt__ "fmt"

//line gram.y:7

import (
	plast "github.com/GuanceCloud/platypus/pkg/ast"
	// pltoken "github.com/GuanceCloud/platypus/pkg/token"
)

//line gram.y:16
type yySymType struct {
	yys      int
	aststmts plast.Stmts
	astblock *plast.BlockStmt
	node     *plast.Node
	item     Item
}

const SEMICOLON = 57346
const COMMA = 57347
const COMMENT = 57348
const DOT = 57349
const EOF = 57350
const ERROR = 57351
const ID = 57352
const NUMBER = 57353
const LEFT_PAREN = 57354
const LEFT_BRACKET = 57355
const LEFT_BRACE = 57356
const RIGHT_BRACE = 57357
const RIGHT_PAREN = 57358
const RIGHT_BRACKET = 57359
const SPACE = 57360
const STRING = 57361
const QUOTED_STRING = 57362
const MULTILINE_STRING = 57363
const FOR = 57364
const IN = 57365
const WHILE = 57366
const BREAK = 57367
const CONTINUE = 57368
const RETURN = 57369
const EOL = 57370
const COLON = 57371
const STR = 57372
const INT = 57373
const FLOAT = 57374
const BOOL = 57375
const LIST = 57376
const MAP = 57377
const STRUCT = 57378
const ANY = 57379
const LET = 57380
const FN = 57381
const RET_SYMB = 57382
const NOT = 57383
const BitwiseXOR = 57384
const BitwiseOR = 57385
const BitwiseNOT = 57386
const BitwiseAND = 57387
const CONST = 57388
const TRY = 57389
const CATCH = 57390
const THROW = 57391
const operatorsStart = 57392
const ADD = 57393
const DIV = 57394
const GTE = 57395
const GT = 57396
const LT = 57397
const LTE = 57398
const MOD = 57399
const MUL = 57400
const NEQ = 57401
const EQ = 57402
const EQEQ = 57403
const SUB = 57404
const operatorsEnd = 57405
const keywordsStart = 57406
const TRUE = 57407
const FALSE = 57408
const IDENTIFIER = 57409
const AND = 57410
const OR = 57411
const NIL = 57412
const NULL = 57413
const IF = 57414
const ELIF = 57415
const ELSE = 57416
const keywordsEnd = 57417
const startSymbolsStart = 57418
const START_STMTS = 57419
const startSymbolsEnd = 57420
const UMINUS = 57421

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SEMICOLON",
	"COMMA",
	"COMMENT",
	"DOT",
	"EOF",
	"ERROR",
	"ID",
	"NUMBER",
	"LEFT_PAREN",
	"LEFT_BRACKET",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"RIGHT_PAREN",
	"RIGHT_BRACKET",
	"SPACE",
	"STRING",
	"QUOTED_STRING",
	"MULTILINE_STRING",
	"FOR",
	"IN",
	"WHILE",
	"BREAK",
	"CONTINUE",
	"RETURN",
	"EOL",
	"COLON",
	"STR",
	"INT",
	"FLOAT",
	"BOOL",
	"LIST",
	"MAP",
	"STRUCT",
	"ANY",
	"LET",
	"FN",
	"RET_SYMB",
	"NOT",
	"BitwiseXOR",
	"BitwiseOR",
	"BitwiseNOT",
	"BitwiseAND",
	"CONST",
	"TRY",
	"CATCH",
	"THROW",
	"operatorsStart",
	"ADD",
	"DIV",
	"GTE",
	"GT",
	"LT",
	"LTE",
	"MOD",
	"MUL",
	"NEQ",
	"EQ",
	"EQEQ",
	"SUB",
	"operatorsEnd",
	"keywordsStart",
	"TRUE",
	"FALSE",
	"IDENTIFIER",
	"AND",
	"OR",
	"NIL",
	"NULL",
	"IF",
	"ELIF",
	"ELSE",
	"keywordsEnd",
	"startSymbolsStart",
	"START_STMTS",
	"startSymbolsEnd",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:634

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 122,
	5, 141,
	15, 141,
	-2, 62,
	-1, 274,
	1, 39,
	4, 39,
	8, 39,
	28, 39,
	-2, 137,
}

const yyPrivate = 57344

const yyLast = 1774

var yyAct = [...]int16{
	28, 256, 182, 177, 247, 118, 250, 121, 106, 179,
	107, 288, 124, 17, 79, 77, 195, 17, 327, 289,
	128, 241, 172, 76, 100, 80, 108, 108, 84, 101,
	99, 328, 105, 3, 319, 109, 8, 304, 293, 305,
	17, 49, 287, 117, 73, 122, 7, 194, 267, 127,
	72, 306, 309, 283, 74, 17, 237, 130, 36, 332,
	263, 134, 259, 136, 137, 138, 139, 140, 141, 112,
	132, 142, 57, 103, 113, 111, 110, 298, 75, 21,
	147, 49, 149, 82, 152, 151, 153, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 169, 22, 123, 125, 126, 331, 2, 144,
	146, 152, 176, 173, 290, 184, 174, 171, 49, 17,
	248, 152, 320, 187, 49, 180, 186, 49, 190, 49,
	318, 209, 203, 296, 152, 197, 207, 282, 200, 204,
	170, 112, 244, 59, 199, 238, 113, 111, 110, 227,
	261, 230, 233, 235, 188, 189, 115, 108, 196, 133,
	198, 116, 114, 125, 143, 135, 131, 266, 4, 234,
	193, 178, 183, 307, 185, 183, 145, 316, 312, 292,
	226, 286, 279, 231, 239, 308, 245, 240, 191, 104,
	1, 6, 5, 246, 20, 252, 18, 30, 95, 96,
	70, 94, 213, 32, 225, 254, 255, 97, 100, 86,
	87, 90, 91, 101, 99, 92, 211, 93, 98, 15,
	37, 58, 38, 120, 89, 88, 39, 215, 41, 269,
	271, 40, 43, 122, 181, 249, 42, 214, 278, 210,
	183, 277, 280, 17, 281, 9, 13, 14, 12, 11,
	10, 31, 251, 16, 213, 257, 285, 291, 213, 23,
	78, 270, 272, 273, 95, 96, 275, 94, 211, 300,
	35, 297, 211, 97, 100, 213, 29, 19, 46, 101,
	99, 284, 213, 0, 98, 0, 0, 212, 313, 211,
	315, 0, 0, 276, 0, 0, 211, 0, 0, 94,
	0, 301, 302, 0, 303, 97, 100, 278, 251, 324,
	323, 101, 99, 0, 257, 310, 98, 0, 213, 0,
	0, 0, 213, 0, 0, 251, 213, 253, 335, 0,
	0, 258, 211, 321, 0, 0, 211, 0, 0, 212,
	211, 0, 213, 212, 326, 0, 0, 213, 264, 0,
	0, 0, 213, 330, 0, 265, 211, 0, 334, 0,
	212, 211, 0, 213, 337, 0, 211, 212, 213, 0,
	95, 0, 0, 94, 0, 0, 0, 211, 213, 97,
	100, 0, 211, 0, 0, 101, 99, 213, 0, 0,
	98, 294, 211, 0, 0, 295, 0, 0, 0, 299,
	0, 211, 0, 212, 0, 0, 0, 212, 0, 0,
	0, 212, 0, 0, 0, 311, 0, 0, 0, 0,
	314, 0, 0, 0, 0, 317, 0, 212, 0, 0,
	0, 0, 212, 0, 0, 0, 322, 212, 0, 0,
	0, 325, 0, 0, 0, 0, 0, 0, 212, 0,
	0, 329, 0, 212, 0, 0, 0, 0, 21, 0,
	336, 61, 0, 212, 0, 50, 60, 56, 44, 0,
	0, 0, 212, 51, 49, 52, 24, 0, 0, 26,
	25, 27, 22, 0, 0, 0, 0, 0, 0, 71,
	47, 0, 68, 45, 0, 66, 0, 0, 67, 63,
	69, 33, 0, 34, 0, 64, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 0, 65, 0, 0, 53,
	54, 0, 0, 61, 55, 0, 48, 50, 60, 56,
	44, 274, 0, 0, 0, 51, 49, 52, 24, 0,
	0, 26, 25, 27, 0, 0, 0, 0, 0, 0,
	0, 71, 47, 0, 68, 45, 0, 66, 0, 0,
	67, 63, 69, 33, 0, 34, 0, 64, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 0, 65, 0,
	0, 53, 54, 0, 0, 61, 55, 0, 48, 50,
	60, 56, 44, 173, 0, 0, 0, 51, 49, 52,
	24, 0, 0, 26, 25, 27, 0, 0, 0, 0,
	0, 0, 0, 71, 47, 0, 68, 45, 0, 66,
	0, 0, 67, 63, 69, 33, 0, 34, 0, 64,
	0, 0, 0, 0, 0, 0, 62, 0, 0, 0,
	65, 0, 0, 53, 54, 0, 0, 61, 55, 0,
	48, 50, 60, 56, 44, 119, 0, 0, 0, 51,
	49, 52, 24, 0, 0, 26, 25, 27, 0, 0,
	0, 0, 0, 0, 0, 71, 47, 0, 68, 45,
	0, 66, 0, 0, 67, 63, 69, 33, 0, 34,
	0, 64, 0, 0, 0, 0, 0, 0, 62, 0,
	0, 0, 65, 0, 0, 53, 54, 0, 0, 61,
	55, 0, 48, 50, 60, 56, 44, 102, 0, 0,
	0, 51, 49, 52, 24, 0, 0, 26, 25, 27,
	0, 0, 0, 0, 0, 0, 0, 71, 47, 0,
	68, 45, 0, 66, 0, 0, 67, 63, 69, 33,
	0, 34, 0, 64, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 65, 0, 0, 53, 54, 0,
	0, 61, 55, 0, 48, 50, 60, 56, 44, 0,
	0, 0, 0, 51, 49, 52, 24, 0, 0, 26,
	25, 27, 0, 0, 0, 0, 0, 0, 0, 71,
	47, 0, 68, 45, 0, 66, 0, 0, 67, 63,
	69, 33, 0, 34, 0, 64, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 0, 65, 0, 0, 53,
	54, 0, 0, 61, 55, 0, 48, 50, 60, 56,
	83, 0, 0, 129, 0, 51, 49, 52, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 0, 0, 0, 228, 66, 0, 61,
	67, 63, 0, 50, 60, 56, 83, 64, 0, 0,
	0, 51, 49, 52, 62, 0, 128, 0, 65, 0,
	0, 53, 54, 0, 0, 0, 55, 71, 0, 0,
	0, 0, 0, 66, 0, 0, 67, 63, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 65, 0, 0, 53, 54, 61,
	0, 0, 55, 50, 60, 56, 83, 205, 0, 0,
	0, 51, 49, 52, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 0, 0,
	0, 0, 0, 66, 0, 61, 67, 63, 0, 50,
	60, 56, 83, 64, 0, 202, 0, 51, 49, 52,
	62, 0, 0, 0, 65, 0, 0, 53, 54, 0,
	0, 0, 55, 71, 0, 0, 0, 0, 0, 66,
	0, 0, 67, 63, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 62, 0, 0, 0,
	65, 0, 0, 53, 54, 61, 0, 0, 55, 50,
	60, 56, 83, 175, 0, 0, 0, 51, 49, 52,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 66,
	0, 0, 67, 63, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 62, 0, 0, 0,
	65, 0, 0, 53, 54, 61, 0, 0, 55, 50,
	60, 56, 83, 119, 0, 0, 0, 51, 49, 52,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 0, 0, 0, 150, 66,
	0, 61, 67, 63, 0, 50, 60, 56, 83, 64,
	0, 0, 0, 51, 49, 52, 62, 0, 0, 0,
	65, 0, 0, 53, 54, 0, 0, 0, 55, 71,
	0, 0, 0, 0, 81, 66, 0, 61, 67, 63,
	0, 50, 60, 56, 83, 64, 0, 0, 0, 51,
	49, 52, 62, 0, 0, 0, 65, 0, 0, 53,
	54, 0, 0, 0, 55, 71, 0, 0, 0, 0,
	0, 66, 0, 61, 67, 63, 0, 50, 60, 56,
	83, 64, 0, 0, 0, 51, 49, 52, 62, 0,
	0, 0, 65, 0, 0, 53, 54, 0, 0, 0,
	55, 71, 0, 0, 0, 0, 0, 66, 0, 61,
	67, 63, 0, 50, 60, 56, 232, 64, 0, 0,
	0, 51, 49, 52, 62, 0, 0, 0, 65, 0,
	0, 53, 54, 0, 0, 0, 55, 71, 0, 0,
	0, 0, 0, 66, 0, 242, 67, 63, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 243, 0, 0,
	62, 0, 0, 0, 65, 0, 0, 53, 54, 0,
	95, 96, 55, 94, 0, 0, 0, 0, 192, 97,
	100, 86, 87, 90, 91, 101, 99, 92, 333, 93,
	98, 95, 96, 0, 94, 0, 89, 88, 0, 0,
	97, 100, 86, 87, 90, 91, 101, 99, 92, 85,
	93, 98, 0, 95, 96, 108, 94, 89, 88, 0,
	0, 0, 97, 100, 86, 87, 90, 91, 101, 99,
	92, 0, 93, 98, 268, 0, 0, 0, 0, 89,
	88, 0, 0, 95, 96, 0, 94, 0, 0, 0,
	0, 0, 97, 100, 86, 87, 90, 91, 101, 99,
	92, 0, 93, 98, 0, 0, 0, 0, 262, 89,
	88, 0, 95, 96, 0, 94, 0, 260, 0, 0,
	0, 97, 100, 86, 87, 90, 91, 101, 99, 92,
	0, 93, 98, 95, 96, 0, 94, 0, 89, 88,
	0, 0, 97, 100, 86, 87, 90, 91, 101, 99,
	92, 236, 93, 98, 95, 96, 0, 94, 0, 89,
	88, 0, 0, 97, 100, 86, 87, 90, 91, 101,
	99, 92, 0, 93, 98, 0, 95, 96, 0, 94,
	89, 88, 0, 0, 192, 97, 100, 86, 87, 90,
	91, 101, 99, 92, 229, 93, 98, 95, 96, 0,
	94, 0, 89, 88, 0, 0, 97, 100, 86, 87,
	90, 91, 101, 99, 92, 0, 93, 98, 0, 0,
	0, 0, 0, 89, 88, 208, 0, 0, 0, 0,
	0, 0, 95, 96, 0, 94, 0, 0, 0, 0,
	0, 97, 100, 86, 87, 90, 91, 101, 99, 92,
	0, 93, 98, 0, 0, 0, 0, 206, 89, 88,
	0, 0, 95, 96, 0, 94, 0, 201, 0, 0,
	0, 97, 100, 86, 87, 90, 91, 101, 99, 92,
	0, 93, 98, 95, 96, 0, 94, 148, 89, 88,
	0, 0, 97, 100, 86, 87, 90, 91, 101, 99,
	92, 0, 93, 98, 95, 96, 0, 94, 0, 89,
	88, 0, 0, 97, 100, 86, 87, 90, 91, 101,
	99, 92, 0, 93, 98, 95, 96, 0, 94, 0,
	89, 88, 0, 0, 97, 100, 86, 87, 90, 91,
	101, 99, 92, 0, 93, 98, 95, 96, 0, 94,
	0, 89, 88, 0, 0, 97, 100, 86, 87, 90,
	91, 101, 99, 92, 85, 93, 98, 95, 96, 0,
	94, 0, 89, 88, 0, 0, 97, 100, 86, 87,
	90, 91, 101, 99, 92, 0, 93, 98, 95, 96,
	0, 94, 0, 89, 88, 0, 0, 97, 100, 86,
	87, 90, 91, 101, 99, 92, 0, 93, 98, 95,
	96, 0, 94, 0, 89, 0, 0, 0, 97, 100,
	86, 87, 90, 91, 101, 99, 92, 0, 93, 98,
	95, 96, 0, 94, 0, 0, 0, 0, 0, 97,
	100, 86, 87, 90, 91, 101, 99, 216, 222, 0,
	98, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 217, 218, 219, 0,
	71, 0, 221, 0, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 223,
}

var yyPact = [...]int16{
	31, 160, 454, -1000, -1000, -1000, 764, 75, 50, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -25,
	-1000, -1000, -1000, -59, 1150, -1000, -1000, 1186, 1584, 702,
	-1000, 184, -1000, 143, 1186, -1000, 134, -1000, -1000, -1000,
	-1000, 149, -1000, -1000, 640, 21, 21, 21, 1186, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 826, 153, 53, 145,
	1186, 152, 1186, 1186, 1186, 1186, 1186, 1186, -1000, -1000,
	1186, 151, 75, 50, -1000, -1000, 164, 143, -1000, 1186,
	1563, 1114, 62, 1078, 1605, 1186, 1186, 1186, 1186, 1186,
	1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
	1186, 1186, -1000, 75, 21, -26, -1000, -1000, 578, 1605,
	1018, 1186, 21, 109, 1186, 21, 107, 75, 140, -1000,
	1186, 183, 1269, 158, -1000, -13, 144, 1321, 127, -1000,
	1542, 958, -1000, 922, 1521, 1186, -1000, -1000, -1000, -1000,
	-1000, -1000, 1500, 1715, 50, 21, -1000, 1321, 862, 1470,
	1222, 1186, 1435, 1605, 222, 222, 1626, 1647, 222, 222,
	1668, 1668, 254, 328, 222, -28, -28, -1000, -1000, -1000,
	50, -1000, 157, -1000, 138, -1000, 1414, 27, -1000, 129,
	-1000, 21, 182, -39, 1248, -1000, 126, -1000, 50, -1000,
	181, -1000, 1186, 104, 1186, 1715, 98, -1000, -1000, 1715,
	45, -1000, -1000, 1392, 135, -1000, -1000, 1371, -1000, 43,
	-1000, -1000, -1000, -1000, -1000, -1000, 1715, -1000, -1000, -1000,
	-1000, -1000, -40, 1715, 155, 19, -1000, 1350, 1222, 1222,
	1321, -1000, 516, 1321, 21, -1000, -1000, 1186, -1000, 177,
	-1000, 1186, -1000, 1186, -1000, -1000, 1605, 121, 13, 21,
	176, -18, 1605, -41, 99, 21, 174, 9, -1000, 1715,
	-1000, -1000, -1000, 1715, 117, -1000, 61, 1715, 1222, 1321,
	-1000, 1321, -1000, -1000, -1000, -1000, 8, 22, 1605, -1000,
	1605, 156, 12, 1715, -1000, 173, -1000, 1186, 1715, 1186,
	-1000, 172, -1000, 1715, -1000, -1000, -1000, 114, -6, 106,
	1321, -1000, -1000, -1000, 1715, -1000, 1186, -1000, 1186, 1715,
	-1000, 143, -1000, 1605, -42, 1605, -1000, -1000, -9, 1715,
	143, -1000, 91, 42, 1291, 143, -1000, 1186, 1715, -1000,
	-1000, 143, -1000, -1000, -1000, 1605, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 278, 32, 277, 8, 10, 276, 270, 260, 259,
	43, 253, 251, 250, 249, 248, 247, 246, 245, 0,
	3, 143, 239, 131, 72, 237, 236, 235, 6, 4,
	234, 2, 9, 58, 232, 231, 228, 227, 226, 7,
	5, 223, 222, 221, 220, 219, 1, 206, 205, 203,
	200, 197, 12, 196, 194, 192, 191, 190, 36,
}

var yyR1 = [...]int8{
	0, 58, 58, 58, 58, 57, 57, 57, 55, 55,
	55, 56, 56, 56, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 19, 19, 19, 19,
	19, 19, 19, 19, 2, 2, 5, 6, 6, 4,
	18, 18, 7, 9, 9, 8, 14, 14, 14, 14,
	14, 14, 14, 14, 13, 15, 17, 16, 16, 53,
	53, 53, 45, 11, 3, 3, 54, 51, 51, 51,
	51, 28, 28, 28, 28, 27, 27, 29, 29, 29,
	12, 12, 1, 1, 52, 52, 52, 52, 49, 49,
	46, 46, 47, 47, 48, 48, 48, 33, 23, 23,
	23, 23, 23, 23, 23, 25, 22, 22, 22, 22,
	22, 24, 24, 21, 37, 37, 37, 37, 44, 44,
	44, 44, 44, 44, 42, 42, 42, 43, 43, 43,
	43, 50, 50, 50, 38, 38, 38, 38, 38, 38,
	39, 39, 41, 41, 40, 40, 40, 35, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 31, 31, 30, 30, 32, 32, 32, 20, 20,
	26, 26, 26, 26, 26, 26, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 2, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 3, 2,
	1, 3, 3, 1, 2, 3, 7, 6, 6, 5,
	6, 5, 5, 4, 5, 1, 1, 1, 2, 1,
	1, 1, 1, 3, 9, 8, 2, 8, 7, 6,
	5, 1, 3, 3, 5, 2, 3, 1, 2, 1,
	2, 3, 1, 1, 1, 3, 5, 3, 5, 3,
	1, 3, 2, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 1, 1, 1, 1,
	1, 4, 5, 5, 6, 5, 4, 3, 1, 1,
	1, 1, 1, 1, 2, 3, 2, 2, 3, 2,
	1, 3, 4, 3, 3, 4, 4, 2, 3, 3,
	3, 1, 2, 3, 1, 2, 1, 3, 4, 4,
	3, 4, 3, 6, 8, 4, 3, 4, 3, 6,
	8, 1, 3, 2, 3, 1, 2, 1, 1, 0,
	2, 2, 2, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3,
}

var yyChk = [...]int16{
	-1000, -57, 77, 2, 8, -55, -56, -10, -58, -18,
	-13, -14, -15, -17, -16, -45, -11, -5, -53, -3,
	-54, 4, 28, -9, 22, 26, 25, 27, -19, -6,
	-51, -12, -49, 47, 49, -7, -33, -44, -42, -38,
	-35, -36, -26, -34, 14, 39, -1, 36, 72, 20,
	11, 19, 21, 65, 66, 70, 13, -24, -43, -21,
	12, 7, 58, 45, 51, 62, 41, 44, 38, 46,
	-50, 35, -10, -58, 4, 28, 48, 74, -8, 73,
	-19, 4, -33, 14, -19, 60, 53, 54, 69, 68,
	55, 56, 59, 61, 45, 42, 43, 51, 62, 58,
	52, 57, 15, -10, 5, -2, -4, -5, 14, -19,
	14, 13, 7, 12, 13, 7, 12, -10, -40, 15,
	-41, -39, -19, -33, -52, -33, -33, -19, 60, 17,
	-19, 13, 17, 14, -19, 13, -19, -19, -19, -19,
	-19, -19, -19, 13, -58, 12, -2, -19, 4, -19,
	4, 23, -19, -19, -19, -19, -19, -19, -19, -19,
	-19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
	-58, -52, 48, 15, -40, 15, -19, -20, -33, -32,
	16, -30, -31, -33, -19, -33, -32, 16, -58, 15,
	-39, 5, 29, 12, 60, 29, 14, -4, -2, 17,
	11, 5, 17, -19, -40, 15, 16, -19, 5, -23,
	-22, -24, -21, -33, -25, -37, 12, 31, 32, 33,
	30, 37, 13, 58, 39, -33, -2, -19, 4, 4,
	-19, -2, 14, -19, 12, 15, 17, 29, 16, -31,
	5, 60, 17, 29, 16, 5, -19, -29, 16, -27,
	-28, -33, -19, -23, -48, -47, -46, -33, -23, 17,
	5, 15, 17, 17, -23, -23, 12, 29, 4, -19,
	-2, -19, -2, -2, 15, -2, -33, -20, -19, 5,
	-19, -19, 16, 40, -2, -28, 5, 60, 29, 60,
	15, -46, 5, 29, -23, -23, 16, -29, 16, -23,
	-19, -2, -2, -2, 29, 17, 29, 17, 29, 40,
	-2, -23, 5, -19, -23, -19, 5, -23, 16, 40,
	16, -2, -23, -20, -19, -23, -2, 60, 40, -23,
	-2, 16, 17, 17, -2, -19, -23, -2,
}

var yyDef = [...]int16{
	0, -2, 0, 7, 6, 5, 9, 10, 12, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
	25, 1, 2, 40, 0, 55, 56, 57, 62, 0,
	59, 60, 61, 0, 0, 43, 26, 27, 28, 29,
	30, 31, 32, 33, 0, 0, 0, 0, 0, 97,
	118, 119, 120, 121, 122, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 83,
	130, 0, 8, 11, 3, 4, 0, 0, 44, 0,
	0, 0, 26, 0, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 36, 0, 0, 0, 34, 35, 0, 66,
	0, 169, 0, 0, 0, 0, 0, 0, 0, 137,
	144, 146, -2, 0, 80, 84, 0, 0, 0, 124,
	127, 0, 126, 0, 0, 0, 170, 171, 172, 173,
	174, 175, 129, 0, 13, 0, 41, 0, 0, 0,
	0, 0, 141, 63, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	38, 81, 0, 39, 0, 139, 168, 0, 150, 0,
	152, 165, 167, 161, 0, 156, 0, 158, 37, 134,
	145, 142, 0, 0, 0, 0, 0, 89, 42, 0,
	0, 131, 125, 128, 0, 138, 147, 0, 133, 0,
	98, 99, 100, 101, 102, 103, 0, 106, 107, 108,
	109, 110, 0, 0, 0, 0, 45, 0, 0, 0,
	0, 53, 0, 0, 0, 136, 148, 169, 151, 166,
	163, 0, 155, 0, 157, 143, 140, 0, 0, 77,
	79, 71, 85, 87, 0, 94, 96, 90, 111, 0,
	132, 135, 149, 0, 0, 105, 0, 0, 0, 0,
	49, 0, 51, 52, -2, 54, 0, 0, 168, 164,
	162, 0, 0, 0, 70, 78, 75, 0, 0, 0,
	88, 95, 92, 0, 112, 113, 104, 0, 117, 0,
	0, 47, 48, 50, 0, 153, 169, 159, 0, 0,
	69, 0, 76, 72, 73, 86, 93, 91, 116, 0,
	0, 46, 0, 0, 0, 0, 68, 0, 0, 115,
	65, 0, 154, 160, 67, 74, 114, 64,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:145
		{
			yylex.(*parser).parseResult = yyDollar[2].aststmts
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:148
		{
			yylex.(*parser).unexpected("", "")
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:153
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:160
		{
			yyVAL.aststmts = plast.Stmts{yyDollar[1].node}
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:164
		{
			yyVAL.aststmts = plast.Stmts{yyDollar[1].node}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:166
		{
			yyVAL.aststmts = plast.Stmts{}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:168
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:211
		{
			yyVAL.node = &ast.Node{}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:215
		{
			yyVAL.node = &ast.Node{}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:217
		{
			yyVAL.node = &ast.Node{}
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:221
		{
			yyVAL.node = &ast.Node{}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:225
		{
			yyVAL.node = &ast.Node{}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:227
		{
			yyVAL.node = &ast.Node{}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:231
		{
			yyVAL.node = &ast.Node{}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:235
		{
			yyVAL.node = &ast.Node{}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:237
		{
			yyVAL.node = &ast.Node{}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:241
		{
			yyVAL.node = &ast.Node{}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:250
		{
			yyVAL.node = &ast.Node{}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:252
		{
			yyVAL.node = &ast.Node{}
		}
	case 48:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:254
		{
			yyVAL.node = &ast.Node{}
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:256
		{
			yyVAL.node = &ast.Node{}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:258
		{
			yyVAL.node = &ast.Node{}
		}
	case 51:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:260
		{
			yyVAL.node = &ast.Node{}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:262
		{
			yyVAL.node = &ast.Node{}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:264
		{
			yyVAL.node = &ast.Node{}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:268
		{
			yyVAL.node = &ast.Node{}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:272
		{
			yyVAL.node = &ast.Node{}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:277
		{
			yyVAL.node = &ast.Node{}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:282
		{
			yyVAL.node = &ast.Node{}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:284
		{
			yyVAL.node = &ast.Node{}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:298
		{
			yyVAL.node = &ast.Node{}
		}
	case 64:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:303
		{
			yyVAL.node = &ast.Node{}
		}
	case 65:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:305
		{
			yyVAL.node = &ast.Node{}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:309
		{
			yyVAL.node = &ast.NodeP{}
		}
	case 67:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:317
		{
			yyVAL.node = &ast.Node{}
		}
	case 68:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:319
		{
			yyVAL.node = &ast.Node{}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:321
		{
			yyVAL.node = &ast.Node{}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:323
		{
			yyVAL.node = &ast.Node{}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:328
		{
			yyVAL.node = &ast.Node{}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:330
		{
			yyVAL.node = &ast.Node{}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:332
		{
			yyVAL.node = &ast.Node{}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:334
		{
			yyVAL.node = &ast.Node{}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:338
		{
			yyVAL.node = &ast.Node{}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:340
		{
			yyVAL.node = &ast.Node{}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:350
		{
			yyVAL.node = &ast.Node{}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:352
		{
			yyVAL.node = &ast.Node{}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:366
		{
			yyVAL.node = &ast.Node{}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:368
		{
			yyVAL.node = &ast.Node{}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:394
		{
			yyVAL.node = &ast.Node{}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:405
		{
			yyVAL.node = &ast.Node{}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:409
		{
			yyVAL.node = &ast.Node{}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:413
		{
			yyVAL.node = &ast.Node{}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:415
		{
			yyVAL.node = &ast.Node{}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:417
		{
			yyVAL.node = &ast.Node{}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:419
		{
			yyVAL.node = &ast.Node{}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:421
		{
			yyVAL.node = &ast.Node{}
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:425
		{
			yyVAL.node = &ast.Node{}
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:427
		{
			yyVAL.node = &ast.Node{}
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:431
		{
			yyVAL.node = &ast.Node{}
		}
	case 114:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:435
		{
			yyVAL.node = &ast.Node{}
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:437
		{
			yyVAL.node = &ast.Node{}
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:439
		{
			yyVAL.node = &ast.Node{}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:441
		{
			yyVAL.node = &ast.Node{}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:446
		{
			yyVAL.node = &ast.Node{}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:448
		{
			yyVAL.node = &ast.Node{}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:450
		{
			yyVAL.node = &ast.Node{}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:452
		{
			yyVAL.node = &ast.Node{}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:454
		{
			yyVAL.node = &ast.Node{}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:456
		{
			yyVAL.node = &ast.Node{}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:460
		{
			yyVAL.node = &ast.Node{}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:462
		{
			yyVAL.node = &ast.Node{}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:464
		{
			yyVAL.node = &ast.Node{}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:468
		{
			yyVAL.node = &ast.Node{}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:470
		{
			yyVAL.node = &ast.Node{}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:472
		{
			yyVAL.node = &ast.Node{}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:477
		{
			yyVAL.node = &ast.Node{}
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:479
		{
			yyVAL.node = &ast.Node{}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:481
		{
			yyVAL.node = &ast.Node{}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:485
		{
			yyVAL.node = &ast.Node{}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:489
		{
			yyVAL.node = &ast.Node{}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:495
		{
			yyVAL.node = &ast.Node{}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:500
		{
			yyVAL.node = &ast.Node{}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:502
		{
			yyVAL.node = &ast.Node{}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:506
		{
			yyVAL.node = &ast.Node{}
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:508
		{
			yyVAL.node = &ast.Node{}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:514
		{
			yyVAL.node = &ast.Node{}
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:522
		{
			yyVAL.node = &ast.Node{}
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:524
		{
			yyVAL.node = &ast.Node{}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:528
		{
			yyVAL.node = &ast.Node{}
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:532
		{
			yyVAL.node = &ast.Node{}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:534
		{
			yyVAL.node = &ast.Node{}
		}
	case 153:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:538
		{
			yyVAL.node = &ast.Node{}
		}
	case 154:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:540
		{
			yyVAL.node = &ast.Node{}
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:544
		{
			yyVAL.node = &ast.Node{}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:548
		{
			yyVAL.node = &ast.Node{}
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:552
		{
			yyVAL.node = &ast.Node{}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:554
		{
			yyVAL.node = &ast.Node{}
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:558
		{
			yyVAL.node = &ast.Node{}
		}
	case 160:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:560
		{
			yyVAL.node = &ast.Node{}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:564
		{
			yyVAL.node = &ast.Node{}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:566
		{
			yyVAL.node = &ast.Node{}
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:570
		{
			yyVAL.node = &ast.Node{}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:572
		{
			yyVAL.node = &ast.Node{}
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:582
		{
			yyVAL.node = nil
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:587
		{
			yyVAL.node = &ast.Node{}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:589
		{
			yyVAL.node = &ast.Node{}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:591
		{
			yyVAL.node = &ast.Node{}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:593
		{
			yyVAL.node = &ast.Node{}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:595
		{
			yyVAL.node = &ast.Node{}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:597
		{
			yyVAL.node = &ast.Node{}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:601
		{
			yyVAL.node = &ast.Node{}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:603
		{
			yyVAL.node = &ast.Node{}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:605
		{
			yyVAL.node = &ast.Node{}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:607
		{
			yyVAL.node = &ast.Node{}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:609
		{
			yyVAL.node = &ast.Node{}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:611
		{
			yyVAL.node = &ast.Node{}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:613
		{
			yyVAL.node = &ast.Node{}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:615
		{
			yyVAL.node = &ast.Node{}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:617
		{
			yyVAL.node = &ast.Node{}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:619
		{
			yyVAL.node = &ast.Node{}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:621
		{
			yyVAL.node = &ast.Node{}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:623
		{
			yyVAL.node = &ast.Node{}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:625
		{
			yyVAL.node = &ast.Node{}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:627
		{
			yyVAL.node = &ast.Node{}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:629
		{
			yyVAL.node = &ast.Node{}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:631
		{
			yyVAL.node = &ast.Node{}
		}
	}
	goto yystack /* stack new state and value */
}
